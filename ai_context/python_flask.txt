TITLE: Creating a Basic Flask Application Factory
DESCRIPTION: Demonstrates the fundamental structure of a Flask application factory. This function initializes the Flask app, loads configuration, initializes a database extension, registers blueprints, and returns the configured application instance.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#_snippet_0

LANGUAGE: python
CODE:
```
def create_app(config_filename):
    app = Flask(__name__)
    app.config.from_pyfile(config_filename)

    from yourapplication.model import db
    db.init_app(app)

    from yourapplication.views.admin import admin
    from yourapplication.views.frontend import frontend
    app.register_blueprint(admin)
    app.register_blueprint(frontend)

    return app
```

----------------------------------------

TITLE: Create Custom Flask API Exception Classes
DESCRIPTION: This snippet illustrates how to define a custom exception class, `InvalidAPIUsage`, for more structured API error handling in Flask. This class allows specifying a human-readable message, an HTTP status code, and an optional payload. It includes an error handler for this custom exception and an example API route that raises it based on invalid input or missing resources.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_18

LANGUAGE: Python
CODE:
```
    from flask import jsonify, request

    class InvalidAPIUsage(Exception):
        status_code = 400

        def __init__(self, message, status_code=None, payload=None):
            super().__init__()
            self.message = message
            if status_code is not None:
                self.status_code = status_code
            self.payload = payload

        def to_dict(self):
            rv = dict(self.payload or ())
            rv['message'] = self.message
            return rv

    @app.errorhandler(InvalidAPIUsage)
    def invalid_api_usage(e):
        return jsonify(e.to_dict()), e.status_code

    # an API app route for getting user information
    # a correct request might be /api/user?user_id=420
    @app.route("/api/user")
    def user_api(user_id):
        user_id = request.arg.get("user_id")
        if not user_id:
            raise InvalidAPIUsage("No user id provided!")

        user = get_user(user_id=user_id)
        if not user:
            raise InvalidAPIUsage("No such user!", status_code=404)

        return jsonify(user.to_dict())
```

----------------------------------------

TITLE: Generate URLs for Static Files in Flask
DESCRIPTION: Illustrates the use of Flask's `url_for` function with the special `'static'` endpoint to generate URLs for static assets. This function automatically constructs the correct path to files located within the application's `static/` directory, such as `style.css`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_11

LANGUAGE: python
CODE:
```
url_for('static', filename='style.css')
```

----------------------------------------

TITLE: Implement User Registration View Function in Flask (Python)
DESCRIPTION: This Python code defines the `register` view for the Flask 'auth' blueprint, handling GET and POST requests. It validates user input, hashes passwords, and inserts new users into the database. Upon successful registration, it redirects to the login page; otherwise, it flashes an error message.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#_snippet_2

LANGUAGE: python
CODE:
```
@bp.route('/register', methods=('GET', 'POST'))
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        error = None

        if not username:
            error = 'Username is required.'
        elif not password:
            error = 'Password is required.'

        if error is None:
            try:
                db.execute(
                    "INSERT INTO user (username, password) VALUES (?, ?)",
                    (username, generate_password_hash(password)),
                )
                db.commit()
            except db.IntegrityError:
                error = f"User {username} is already registered."
            else:
                return redirect(url_for("auth.login"))

        flash(error)

    return render_template('auth/register.html')
```

----------------------------------------

TITLE: Define Basic Flask Routes
DESCRIPTION: Demonstrates how to bind Python functions to specific URL paths using the `@app.route` decorator in Flask. This allows the application to respond to requests at the defined endpoints.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_5

LANGUAGE: python
CODE:
```
@app.route('/')
def index():
    return 'Index Page'

@app.route('/hello')
def hello():
    return 'Hello, World'
```

----------------------------------------

TITLE: Specify Flask Application with --app Option
DESCRIPTION: Explains how the `--app` option is used to tell the `flask` command where to find the application, covering various formats like simple names, dotted paths, specific instances, and factory calls with arguments. If not set, the command tries to import 'app' or 'wsgi'.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_0

LANGUAGE: console
CODE:
```
--app hello
```

LANGUAGE: console
CODE:
```
--app src/hello
```

LANGUAGE: console
CODE:
```
--app hello.web
```

LANGUAGE: console
CODE:
```
--app hello:app2
```

LANGUAGE: console
CODE:
```
--app 'hello:create_app("dev")'
```

----------------------------------------

TITLE: Explicit Flask Application Object Initialization
DESCRIPTION: This code demonstrates the standard way to initialize a Flask application by explicitly creating an instance of the `Flask` class. This design choice allows for greater flexibility, enabling features like unit testing with isolated application instances, easy subclassing of the `Flask` object, and reliable resource loading relative to the module.
SOURCE: https://github.com/pallets/flask/blob/main/docs/design.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from flask import Flask
app = Flask(__name__)

@app.route('/')
def index():
    return 'Hello World!'
```

----------------------------------------

TITLE: Basic Flask Function-based User List View
DESCRIPTION: Demonstrates a traditional Flask view function that queries all users from a `User` model and renders an HTML template to display the list.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#_snippet_0

LANGUAGE: python
CODE:
```
@app.route("/users/")
def user_list():
    users = User.query.all()
    return render_template("users.html", users=users)
```

----------------------------------------

TITLE: Create a Minimal Flask Web Application
DESCRIPTION: This snippet demonstrates how to create a basic Flask application. It imports the Flask class, creates an application instance, defines a route for the root URL ('/'), and returns a simple 'Hello, World!' HTML paragraph. The '__name__' argument helps Flask locate resources like templates.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"
```

----------------------------------------

TITLE: Flask File Validation and Upload Route
DESCRIPTION: This snippet defines the allowed_file function to validate file extensions and the main upload_file Flask route. The route handles both GET requests (displaying the upload form) and POST requests (processing file uploads). It checks for file presence, validates the filename, secures it using secure_filename, saves the file, and redirects the user to a download URL.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#_snippet_1

LANGUAGE: Python
CODE:
```
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        # If the user does not select a file, the browser submits an
        # empty file without a filename.
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            return redirect(url_for('download_file', name=filename))
    return '''
    <!doctype html>
    <title>Upload new File</title>
    <h1>Upload new File</h1>
    <form method=post enctype=multipart/form-data>
      <input type=file name=file>
      <input type=submit value=Upload>
    </form>
    '''
```

----------------------------------------

TITLE: Loading Flask Config from Prefixed Env Vars - Python
DESCRIPTION: Demonstrates loading all environment variables starting with the default `FLASK_` prefix into the Flask configuration object using `from_prefixed_env` and accessing a key.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_17

LANGUAGE: Python
CODE:
```
app.config.from_prefixed_env()
app.config["SECRET_KEY"]  # Is "5f352379324c22463451387a0aec5d2f"
```

----------------------------------------

TITLE: Install Flask - Shell
DESCRIPTION: Command to install the Flask package using pip within the activated virtual environment.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#_snippet_4

LANGUAGE: Shell
CODE:
```
$ pip install Flask
```

----------------------------------------

TITLE: Send JSON Data to Flask with JavaScript Fetch
DESCRIPTION: This JavaScript snippet demonstrates how to send JSON data to a Flask backend using the `fetch` API. It specifies the `POST` method, sets the `Content-Type` header to `application/json`, and stringifies the JavaScript object into a JSON string for the request body. Flask requires the correct `Content-Type` header to parse the JSON data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_7

LANGUAGE: javascript
CODE:
```
let data = {
    "name": "Flask Room",
    "description": "Talk about Flask here.",
}
fetch(room_url, {
    "method": "POST",
    "headers": {"Content-Type": "application/json"},
    "body": JSON.stringify(data),
}).then(...)
```

----------------------------------------

TITLE: Install Waitress WSGI server for Flask
DESCRIPTION: Instructions to install Waitress, a production-ready WSGI server, into the virtual environment using pip. Waitress is recommended for serving Flask applications in production instead of the built-in development server.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#_snippet_6

LANGUAGE: shell
CODE:
```
$ pip install waitress
```

----------------------------------------

TITLE: Loading Default and Environment Config (Python)
DESCRIPTION: Illustrates a common pattern for loading configuration in Flask by first loading default settings from an object (like a module) and then overriding them with values from a file specified by an environment variable.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_20

LANGUAGE: python
CODE:
```
app = Flask(__name__)
app.config.from_object('yourapplication.default_settings')
app.config.from_envvar('YOURAPPLICATION_SETTINGS')
```

----------------------------------------

TITLE: Install Gunicorn and application in a virtual environment
DESCRIPTION: This snippet outlines the standard procedure to set up a Python virtual environment, install your Flask application, and then install Gunicorn using pip. This is a common and recommended setup for deploying Python web applications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#_snippet_0

LANGUAGE: shell
CODE:
```
$ cd hello-app
$ python -m venv .venv
$ . .venv/bin/activate
$ pip install .  # install your application
$ pip install gunicorn
```

----------------------------------------

TITLE: Define a Basic Flask Blueprint for Static Pages
DESCRIPTION: This snippet demonstrates how to create a Flask Blueprint named 'simple_page'. It defines routes for a root path and a dynamic page, serving static HTML templates from a 'templates' folder. The code includes error handling for TemplateNotFound to return a 404 error.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from flask import Blueprint, render_template, abort
from jinja2 import TemplateNotFound

simple_page = Blueprint('simple_page', __name__,
                            template_folder='templates')

@simple_page.route('/', defaults={'page': 'index'})
@simple_page.route('/<page>')
def show(page):
    try:
        return render_template(f'pages/{page}.html')
    except TemplateNotFound:
        abort(404)
```

----------------------------------------

TITLE: Create and Activate Python Virtual Environment
DESCRIPTION: Instructions to create and activate a Python virtual environment using `venv` on different operating systems, isolating project dependencies.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#_snippet_1

LANGUAGE: bash
CODE:
```
$ python3 -m venv .venv
$ . .venv/bin/activate
```

LANGUAGE: batch
CODE:
```
$ py -3 -m venv .venv
$ .venv\Scripts\activate.bat
```

----------------------------------------

TITLE: Basic Flask Route Definitions
DESCRIPTION: Demonstrates fundamental Flask route definitions using the @app.route decorator for static paths, variable paths (e.g., username), and paths with integer converters (e.g., post ID).
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_36

LANGUAGE: Python
CODE:
```
@app.route('/')
def index():
    pass

@app.route('/<username>')
def show_user(username):
    pass

@app.route('/post/<int:post_id>')
def show_post(post_id):
    pass
```

----------------------------------------

TITLE: Flask Request Object and Global Proxy API Reference
DESCRIPTION: Documents the Request object, which provides access to incoming request data, and the global 'request' proxy object. Flask parses incoming request data and ensures thread-safe access. Excludes the 'json_module' member.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Request:
  Type: Class
  Description: Provides access to incoming request data.
  Members: All members and inherited members are documented, excluding 'json_module'.

request:
  Type: Global Proxy Object (instance of flask.Request)
  Description: Used to access incoming request data. Flask parses data and ensures correct data for the active thread in multithreaded environments.
  Notes: This is a proxy. See :ref:`notes-on-proxies` for more information.
```

----------------------------------------

TITLE: Create and Run a Simple Flask Hello World Application
DESCRIPTION: This snippet demonstrates how to create a basic 'Hello, World!' web application using Flask. It initializes a Flask app, defines a route for the root URL, and returns a simple string. The second part shows how to run the Flask development server from the command line, making the application accessible via a web browser.
SOURCE: https://github.com/pallets/flask/blob/main/README.md#_snippet_0

LANGUAGE: python
CODE:
```
# save this as app.py
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello, World!"
```

LANGUAGE: bash
CODE:
```
$ flask run
  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Start Flask Development Server
DESCRIPTION: Demonstrates how to start the Flask development server using the `flask run` command. This command replaces the `Flask.run` method for most cases. It's important to note that this server is for development only and not suitable for production.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_1

LANGUAGE: console
CODE:
```
$ flask --app hello run
 * Serving Flask app "hello"
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Generate production secret key for Flask
DESCRIPTION: Provides a Python command to generate a strong, random hexadecimal string suitable for use as the SECRET_KEY in a Flask production environment. This key is vital for security, protecting session cookies and other sensitive data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#_snippet_4

LANGUAGE: shell
CODE:
```
$ python -c 'import secrets; print(secrets.token_hex())'
```

----------------------------------------

TITLE: Run a Flask Application from the Command Line
DESCRIPTION: This command shows how to run the Flask application using the 'flask' command-line interface. The '--app hello' option specifies the application file (e.g., 'hello.py'). The output indicates the server is running locally, typically on port 5000.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_1

LANGUAGE: text
CODE:
```
$ flask --app hello run
 * Serving Flask app 'hello'
 * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
```

----------------------------------------

TITLE: Correct Flask Extension Initialization in Factory
DESCRIPTION: Demonstrates the preferred method for initializing Flask extensions within an application factory. By creating the extension object unbound and then calling `init_app(app)` inside the factory, the extension remains decoupled from the application, allowing a single extension object to be used with multiple app instances.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#_snippet_3

LANGUAGE: python
CODE:
```
db.init_app(app)
```

----------------------------------------

TITLE: Pytest Fixtures for Flask Application Testing Setup
DESCRIPTION: Python code defining pytest fixtures (`app`, `client`, `runner`) in `tests/conftest.py`. These fixtures set up a test Flask application with a temporary database, load test data, and provide a test client for simulating requests and a CLI runner for testing command-line interfaces.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_2

LANGUAGE: python
CODE:
```
import os
import tempfile

import pytest
from flaskr import create_app
from flaskr.db import get_db, init_db

with open(os.path.join(os.path.dirname(__file__), 'data.sql'), 'rb') as f:
    _data_sql = f.read().decode('utf8')


@pytest.fixture
def app():
    db_fd, db_path = tempfile.mkstemp()

    app = create_app({
        'TESTING': True,
        'DATABASE': db_path,
    })

    with app.app_context():
        init_db()
        get_db().executescript(_data_sql)

    yield app

    os.close(db_fd)
    os.unlink(db_path)


@pytest.fixture
def client(app):
    return app.test_client()


@pytest.fixture
def runner(app):
    return app.test_cli_runner()
```

----------------------------------------

TITLE: APIDOC: Flask `app.test_client()` Method
DESCRIPTION: Documentation for the `test_client()` method of a Flask application instance. This method creates a test client that allows making requests to the application without needing to run a live server, which is ideal for unit testing.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Flask.test_client() -> FlaskClient
  Description: Creates a test client for the application.
  Returns: An instance of FlaskClient, which can be used to simulate HTTP requests.
```

----------------------------------------

TITLE: Implementing Content Security Policy (CSP) in Flask
DESCRIPTION: Sets the Content Security Policy header to control resource loading, mitigating XSS and data injection attacks. The example shows a strict policy allowing resources only from the same origin.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_5

LANGUAGE: Python
CODE:
```
response.headers['Content-Security-Policy'] = "default-src 'self'"
```

----------------------------------------

TITLE: Handle Multiple HTTP Methods for Flask Routes
DESCRIPTION: Shows how to configure a Flask route to respond to specific HTTP methods (e.g., GET, POST) using the `methods` argument in the `@app.route` decorator. This allows for different logic based on the request type, such as handling form submissions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_9

LANGUAGE: python
CODE:
```
from flask import request

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        return do_the_login()
```

----------------------------------------

TITLE: Implement Blog Post Creation View in Flask (Partial)
DESCRIPTION: This partial Python snippet defines the `create` view for the blog, accessible at '/create' and requiring user login via the `@login_required` decorator. It handles both GET and POST requests. For POST requests, it extracts 'title' and 'body' from the form, performs basic validation (title is required), and initializes an error variable to capture validation issues.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_4

LANGUAGE: python
CODE:
```
@bp.route('/create', methods=('GET', 'POST'))
@login_required
def create():
    if request.method == 'POST':
        title = request.form['title']
        body = request.form['body']
        error = None

        if not title:
            error = 'Title is required.'

        if error is not None:
```

----------------------------------------

TITLE: Implement Login Required Decorator in Flask
DESCRIPTION: This decorator ensures that a user is logged in before accessing a view function. If the user is not logged in, they are redirected to the 'login' page, passing the current URL as 'next'. It uses `functools.wraps` to preserve original function metadata. It assumes `g.user` stores the current user and 'login' is the login page endpoint.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#_snippet_0

LANGUAGE: python
CODE:
```
from functools import wraps
from flask import g, request, redirect, url_for

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if g.user is None:
            return redirect(url_for('login', next=request.url))
        return f(*args, **kwargs)
    return decorated_function
```

----------------------------------------

TITLE: Serving a Single-Page Application with a Flask API
DESCRIPTION: This Flask application demonstrates how to serve a Single-Page Application (SPA) by configuring a static folder for frontend files and creating a catch-all route that serves the SPA's index.html. It also includes a simple '/heartbeat' API endpoint for health checks.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/singlepageapplications.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from flask import Flask, jsonify

app = Flask(__name__, static_folder='app', static_url_path="/app")


@app.route("/heartbeat")
def heartbeat():
    return jsonify({"status": "healthy"})


@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def catch_all(path):
    return app.send_static_file("index.html")
```

----------------------------------------

TITLE: Define Flask Authentication Blueprint (Python)
DESCRIPTION: This Python code initializes a Flask Blueprint named 'auth' in `flaskr/auth.py`. It imports essential Flask modules and sets a URL prefix '/auth'. This blueprint serves as an organizational unit for authentication-related views and functions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#_snippet_0

LANGUAGE: python
CODE:
```
import functools

from flask import (
    Blueprint, flash, g, redirect, render_template, request, session, url_for
)
from werkzeug.security import check_password_hash, generate_password_hash

from flaskr.db import get_db

bp = Blueprint('auth', __name__, url_prefix='/auth')
```

----------------------------------------

TITLE: Handling Login with Request Method and Form Data
DESCRIPTION: Provides a comprehensive example of a login route that uses `request.method` to differentiate between GET and POST requests and `request.form` to access submitted username and password data. It includes basic validation and error handling.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_18

LANGUAGE: python
CODE:
```
@app.route('/login', methods=['POST', 'GET'])
def login():
    error = None
    if request.method == 'POST':
        if valid_login(request.form['username'],
                       request.form['password']):
            return log_the_user_in(request.form['username'])
        else:
            error = 'Invalid username/password'
    # the code below is executed if the request method
    # was GET or the credentials were invalid
    return render_template('login.html', error=error)
```

----------------------------------------

TITLE: Flask User Login View Implementation
DESCRIPTION: This Python code defines the '/login' route for a Flask application, handling both GET and POST requests. On POST, it retrieves username and password, queries the database for the user, verifies the password hash using 'check_password_hash', and manages the user session upon successful login. It also handles incorrect credentials and redirects to the index page.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#_snippet_3

LANGUAGE: python
CODE:
```
@bp.route('/login', methods=('GET', 'POST'))
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        db = get_db()
        error = None
        user = db.execute(
            'SELECT * FROM user WHERE username = ?', (username,)
        ).fetchone()

        if user is None:
            error = 'Incorrect username.'
        elif not check_password_hash(user['password'], password):
            error = 'Incorrect password.'

        if error is None:
            session.clear()
            session['user_id'] = user['id']
            return redirect(url_for('index'))

        flash(error)

    return render_template('auth/login.html')
```

----------------------------------------

TITLE: Define Simple Flask Application (hello.py)
DESCRIPTION: This Python snippet demonstrates a minimal Flask application in a single file, `hello.py`. It initializes a Flask app and defines a route for the root URL ('/') that returns 'Hello, World!'.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#_snippet_1

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)


@app.route('/')
def hello():
    return 'Hello, World!'
```

----------------------------------------

TITLE: Configuring Secure Session Cookie Options in Flask
DESCRIPTION: Demonstrates how to configure Flask's session cookie with 'Secure', 'HttpOnly', and 'SameSite' options for enhanced security. 'Secure' limits cookies to HTTPS, 'HttpOnly' prevents JavaScript access, and 'SameSite='Lax'' restricts cookie sending with CSRF-prone requests.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_8

LANGUAGE: Python
CODE:
```
app.config.update(
    SESSION_COOKIE_SECURE=True,
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SAMESITE='Lax'
)
```

----------------------------------------

TITLE: Generating Flask Secret Key - Shell
DESCRIPTION: Command line example using Python's `secrets` module to generate a secure hexadecimal string suitable for use as a Flask `SECRET_KEY`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_4

LANGUAGE: text
CODE:
```
$ python -c 'import secrets; print(secrets.token_hex())'
```

----------------------------------------

TITLE: XSS Attack Example: Javascript URI in Anchor Tag
DESCRIPTION: Shows how a javascript: URI in an <a> tag's href attribute can lead to a Cross-Site Scripting (XSS) vulnerability. Browsers will execute such URIs when clicked if not properly secured, for example, by setting a Content Security Policy (CSP).
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_3

LANGUAGE: html
CODE:
```
<a href="{{ value }}">click here</a>
<a href="javascript:alert('unsafe');">click here</a>
```

----------------------------------------

TITLE: Define Flask Routes with Dynamic Variable Rules
DESCRIPTION: Illustrates how to create dynamic URL segments in Flask routes using `<variable_name>` and type converters like `<int:post_id>` or `<path:subpath>`. The corresponding function receives these segments as keyword arguments, allowing for flexible URL patterns.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_6

LANGUAGE: python
CODE:
```
from markupsafe import escape

@app.route('/user/<username>')
def show_user_profile(username):
    # show the user profile for that user
    return f'User {escape(username)}'

@app.route('/post/<int:post_id>')
def show_post(post_id):
    # show the post with the given id, the id is an integer
    return f'Post {post_id}'

@app.route('/path/<path:subpath>')
def show_subpath(subpath):
    # show the subpath after /path/
    return f'Subpath {escape(subpath)}'
```

----------------------------------------

TITLE: Jinja Base Template for HTML Layout with Blocks
DESCRIPTION: This Jinja template, named layout.html, defines a simple HTML skeleton for a two-column page. It uses {% block %} tags to mark areas like head, title, content, and footer that child templates can fill or override, establishing a reusable site structure.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/templateinheritance.rst#_snippet_0

LANGUAGE: html+jinja
CODE:
```
<!doctype html>
<html>
  <head>
        {% block head %}
        <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
        <title>{% block title %}{% endblock %} - My Webpage</title>
        {% endblock %}
      </head>
      <body>
        <div id="content">{% block content %}{% endblock %}</div>
        <div id="footer">
          {% block footer %}
          &copy; Copyright 2010 by <a href="http://domain.invalid/">you</a>.
          {% endblock %}
        </div>
      </body>
    </html>
```

----------------------------------------

TITLE: Test Flask Create/Update Form Validation
DESCRIPTION: This Python test uses `pytest.mark.parametrize` to test form validation for both create and update paths. It logs in, sends a POST request with empty title and body fields, and asserts that the response data contains the 'Title is required.' error message.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_19

LANGUAGE: python
CODE:
```
@pytest.mark.parametrize('path', (
    '/create',
    '/1/update',
))
def test_create_update_validate(client, auth, path):
    auth.login()
    response = client.post(path, data={'title': '', 'body': ''})
    assert b'Title is required.' in response.data
```

----------------------------------------

TITLE: Setting HTTP Strict Transport Security (HSTS) Header in Flask
DESCRIPTION: Configures the HSTS header to force browsers to use HTTPS, preventing man-in-the-middle (MITM) attacks. The 'max-age' directive specifies how long the browser should remember to enforce HTTPS, and 'includeSubDomains' applies the policy to subdomains.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_4

LANGUAGE: Python
CODE:
```
response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
```

----------------------------------------

TITLE: Flask File Upload: Secure Filename
DESCRIPTION: Illustrates how to securely save an uploaded file using `werkzeug.utils.secure_filename` to prevent path traversal vulnerabilities. It's crucial to sanitize client-provided filenames before using them on the server.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_21

LANGUAGE: python
CODE:
```
from werkzeug.utils import secure_filename

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        file = request.files['the_file']
        file.save(f"/var/www/uploads/{secure_filename(file.filename)}")
    ...
```

----------------------------------------

TITLE: Flask API Endpoints Returning JSON (dict/list)
DESCRIPTION: Illustrates how Flask automatically converts dictionaries or lists returned from view functions into JSON responses, simplifying the creation of API endpoints.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_28

LANGUAGE: python
CODE:
```
@app.route("/me")
def me_api():
    user = get_current_user()
    return {
        "username": user.username,
        "theme": user.theme,
        "image": url_for("user_image", filename=user.image),
    }

@app.route("/users")
def users_api():
    users = get_all_users()
    return [user.to_json() for user in users]
```

----------------------------------------

TITLE: Preventing MIME Type Sniffing with X-Content-Type-Options in Flask
DESCRIPTION: Adds the X-Content-Type-Options header with 'nosniff' to prevent browsers from guessing content types, which can lead to XSS vulnerabilities.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_6

LANGUAGE: Python
CODE:
```
response.headers['X-Content-Type-Options'] = 'nosniff'
```

----------------------------------------

TITLE: Return Dictionary as JSON from Flask View
DESCRIPTION: This Python Flask view demonstrates how to return a dictionary directly from a route function. Flask automatically serializes the dictionary into a JSON response, simplifying API endpoint creation for structured data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_10

LANGUAGE: python
CODE:
```
@app.route("/user/<int:id>")
def user_detail(id):
    user = User.query.get_or_404(id)
    return {
        "username": User.username,
        "email": User.email,
        "picture": url_for("static", filename=f"users/{id}/profile.png"),
    }
```

----------------------------------------

TITLE: Define Pytest Fixtures for Flask App, Test Client, and CLI Runner
DESCRIPTION: This Python code defines essential `pytest` fixtures for a Flask application. It includes an `app` fixture for creating and configuring the Flask instance with setup/teardown logic, a `client` fixture for the application's test client, and a `runner` fixture for the CLI runner, enabling reusable test components.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_1

LANGUAGE: python
CODE:
```
import pytest
from my_project import create_app

@pytest.fixture()
def app():
    app = create_app()
    app.config.update({
        "TESTING": True,
    })

    # other setup can go here

    yield app

    # clean up / reset resources here


@pytest.fixture()
def client(app):
    return app.test_client()


@pytest.fixture()
def runner(app):
    return app.test_cli_runner()
```

----------------------------------------

TITLE: Configure Flask to Trust Proxy Headers with ProxyFix Middleware
DESCRIPTION: This Python snippet demonstrates how to apply the ProxyFix middleware from Werkzeug to a Flask application's WSGI app. It configures Flask to trust X-Forwarded-For, X-Forwarded-Proto, X-Forwarded-Host, and X-Forwarded-Prefix headers, which are set by reverse proxies to pass original client information. It's crucial to only apply this middleware if truly behind a proxy and to correctly specify the number of proxies setting each header to avoid security vulnerabilities.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/proxy_fix.rst#_snippet_0

LANGUAGE: python
CODE:
```
from werkzeug.middleware.proxy_fix import ProxyFix

app.wsgi_app = ProxyFix(
    app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1
)
```

----------------------------------------

TITLE: Run Flask with Waitress production server
DESCRIPTION: Command to start the Flask application using the Waitress WSGI server. It specifies how to call the application factory ('create_app') to obtain the Flask application object, making it accessible via HTTP.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#_snippet_7

LANGUAGE: shell
CODE:
```
$ waitress-serve --call 'flaskr:create_app'
```

----------------------------------------

TITLE: Loading Flask Config from Object and Instance File (Python)
DESCRIPTION: Provides a full example of configuring a Flask app. It first loads default settings from a Python object (`yourapplication.default_settings`) and then attempts to override them by loading configuration from `application.cfg` located in the instance folder, silently ignoring errors if the file is not found.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_29

LANGUAGE: Python
CODE:
```
app = Flask(__name__, instance_relative_config=True)
app.config.from_object('yourapplication.default_settings')
app.config.from_pyfile('application.cfg', silent=True)
```

----------------------------------------

TITLE: Flask Routing with Defaults and HTTP Methods
DESCRIPTION: Shows how to define a Flask route with a default value for an optional parameter and specify allowed HTTP methods (GET, POST) for the route. It also highlights the redirect behavior for default routes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_38

LANGUAGE: Python
CODE:
```
@app.route('/region/', defaults={'id': 1})
@app.route('/region/<int:id>', methods=['GET', 'POST'])
def region(id):
   pass
```

----------------------------------------

TITLE: Define SQLAlchemy User Model and Table
DESCRIPTION: This example defines a SQLAlchemy ORM User class mapped to a 'users' table. It includes class properties for querying, an initializer, a representation method, and the table schema definition with columns and constraints, demonstrating a typical ORM setup.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_8

LANGUAGE: Python
CODE:
```
from sqlalchemy import Table, Column, Integer, String
from sqlalchemy.orm import mapper
from yourapplication.database import metadata, db_session

class User(object):
    query = db_session.query_property()

    def __init__(self, name=None, email=None):
        self.name = name
        self.email = email

    def __repr__(self):
        return f'<User {self.name!r}>'

users = Table('users', metadata,
    Column('id', Integer, primary_key=True),
    Column('name', String(50), unique=True),
    Column('email', String(120), unique=True)
)
mapper(User, users)
```

----------------------------------------

TITLE: Run Flask Development Server via CLI
DESCRIPTION: Use the `flask run` command with the `--app` option to specify your application and `--debug` to enable debug mode. This starts the server on `http://localhost:5000/` with an interactive debugger and automatic code reloading.
SOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#_snippet_0

LANGUAGE: text
CODE:
```
$ flask --app hello run --debug
```

----------------------------------------

TITLE: Handle WTForms in Flask View Function
DESCRIPTION: This Flask view function demonstrates how to process a WTForms form. It initializes the form with request data, validates it on POST, and then processes the data (e.g., creating a user, flashing a message, redirecting) or renders the template with the form.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#_snippet_1

LANGUAGE: python
CODE:
```
@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm(request.form)
    if request.method == 'POST' and form.validate():
        user = User(form.username.data, form.email.data,
                    form.password.data)
        db_session.add(user)
        flash('Thanks for registering')
        return redirect(url_for('login'))
    return render_template('register.html', form=form)
```

----------------------------------------

TITLE: Jinja Child Template Extending Base Layout with Overrides
DESCRIPTION: This child template demonstrates how to extend a base template using {% extends "layout.html" %}. It overrides specific blocks like title, head, and content to inject unique content. The {{ super() }} function is used within the head block to render the parent block's content before adding new styles.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/templateinheritance.rst#_snippet_1

LANGUAGE: html+jinja
CODE:
```
{% extends "layout.html" %}
{% block title %}Index{% endblock %}
{% block head %}
      {{ super() }}
      <style type="text/css">
        .important { color: #336699; }
      </style>
{% endblock %}
{% block content %}
      <h1>Index</h1>
      <p class="important">
        Welcome on my awesome homepage.
{% endblock %}
```

----------------------------------------

TITLE: JavaScript Fetch API for Form Submission and UI Update
DESCRIPTION: This snippet illustrates how to intercept a form submission event, prevent its default behavior, and use the Fetch API to send form data via a POST request. It includes helper functions to parse the JSON response and update a specific HTML element with the received data.
SOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/js_example/templates/fetch.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
function addSubmit(ev) {
  ev.preventDefault();
  fetch({{ url_for('add')|tojson }}, { method: 'POST', body: new FormData(this) })
    .then(parseJSON)
    .then(addShow);
}
function parseJSON(response) {
  return response.json();
}
function addShow(data) {
  var span = document.getElementById('result');
  span.innerText = data.result;
}
var form = document.getElementById('calc');
form.addEventListener('submit', addSubmit);
```

----------------------------------------

TITLE: Example Jinja2 HTML Template Structure
DESCRIPTION: Provides a basic Jinja2 template demonstrating conditional rendering (`{% if %}` / `{% else %}`) and variable display (`{{ variable }}`). This template is designed to be rendered by a Flask application, showcasing how dynamic content can be integrated into standard HTML markup.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_13

LANGUAGE: html
CODE:
```
<!doctype html>
<title>Hello from Flask</title>
{% if person %}
  <h1>Hello {{ person }}!</h1>
{% else %}
  <h1>Hello, World!</h1>
{% endif %}
```

----------------------------------------

TITLE: Register a Flask Blueprint with a URL Prefix
DESCRIPTION: This code demonstrates how to register a Flask Blueprint at a specific URL prefix, such as '/pages'. By providing `url_prefix` to `app.register_blueprint()`, all routes defined within the blueprint will automatically be prepended with this path.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_3

LANGUAGE: Python
CODE:
```
app.register_blueprint(simple_page, url_prefix='/pages')
```

----------------------------------------

TITLE: Flask User Login HTML Template
DESCRIPTION: This HTML+Jinja template defines the user login form for a Flask application. It extends a base template and includes input fields for username and password, both marked as required for client-side validation. A submit button is provided to log in. This template is similar to the registration template but with a different title and submit button text, and it's crucial to remember that server-side validation is always required.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/templates.rst#_snippet_2

LANGUAGE: html+jinja
CODE:
```
{% extends 'base.html' %}

{% block header %}
  <h1>{% block title %}Log In{% endblock %}</h1>
{% endblock %}

{% block content %}
  <form method="post">
    <label for="username">Username</label>
    <input name="username" id="username" required>
    <label for="password">Password</label>
    <input type="password" name="password" id="password" required>
    <input type="submit" value="Log In">
  </form>
{% endblock %}
```

----------------------------------------

TITLE: Manage SQLite Database Connection in Flask
DESCRIPTION: This Python snippet defines `get_db` and `close_db` functions for managing a SQLite database connection within a Flask application. `get_db` ensures a single connection per request, storing it in Flask's `g` object and configuring rows to behave like dictionaries. `close_db` is responsible for closing the connection after the request is finished.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#_snippet_0

LANGUAGE: python
CODE:
```
import sqlite3
from datetime import datetime

import click
from flask import current_app, g


def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect(
            current_app.config['DATABASE'],
            detect_types=sqlite3.PARSE_DECLTYPES
        )
        g.db.row_factory = sqlite3.Row

    return g.db


def close_db(e=None):
    db = g.pop('db', None)

    if db is not None:
        db.close()
```

----------------------------------------

TITLE: Flask SQLite Database Connection and Teardown
DESCRIPTION: This code defines functions to get a SQLite database connection on demand and close it automatically when the application context tears down. It uses Flask's `g` object to store the connection and `app.teardown_appcontext` for cleanup, ensuring the database is closed only if it was opened.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import sqlite3
from flask import g

DATABASE = '/path/to/database.db'

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()
```

----------------------------------------

TITLE: Importing the Flask Request Object
DESCRIPTION: Shows the standard way to import the `request` object from the `flask` module, which is necessary before using it to access client data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_17

LANGUAGE: python
CODE:
```
from flask import request
```

----------------------------------------

TITLE: Jinja Template for Displaying Flashed Messages with Categories
DESCRIPTION: This Jinja template snippet shows how to modify the `get_flashed_messages` call to retrieve message categories using `with_categories=true`. The loop then accesses both the category and message, allowing for dynamic styling (e.g., `class="{{ category }}"`) based on the message type.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#_snippet_5

LANGUAGE: HTML+Jinja
CODE:
```
{% with messages = get_flashed_messages(with_categories=true) %}
     {% if messages %}
       <ul class=flashes>
       {% for category, message in messages %}
         <li class="{{ category }}">{{ message }}</li>
       {% endfor %}
       </ul>
     {% endif %}
   {% endwith %}
```

----------------------------------------

TITLE: Register Blog Blueprint in Flask Application Factory
DESCRIPTION: This code demonstrates how to register the 'blog' Blueprint within the Flask application factory (`create_app` function in `flaskr/__init__.py`). It imports the blog module and uses `app.register_blueprint()` to integrate it, also setting the root URL '/' to the 'index' endpoint so that `url_for('index')` or `url_for('blog.index')` both resolve to '/'.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_1

LANGUAGE: python
CODE:
```
def create_app():
    app = ...
    # existing code omitted

    from . import blog
    app.register_blueprint(blog.bp)
    app.add_url_rule('/', endpoint='index')

    return app
```

----------------------------------------

TITLE: Jinja Template for Displaying Flashed Messages (layout.html)
DESCRIPTION: This Jinja template (`layout.html`) shows how to retrieve and display flashed messages using `get_flashed_messages()`. It iterates through messages and renders them as list items within an unordered list, typically used as a base layout for other pages.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#_snippet_1

LANGUAGE: HTML+Jinja
CODE:
```
<!doctype html>
   <title>My Application</title>
   {% with messages = get_flashed_messages() %}
     {% if messages %}
       <ul class=flashes>
       {% for message in messages %}
         <li>{{ message }}</li>
       {% endfor %}
       </ul>
     {% endif %}
   {% endwith %}
   {% block body %}{% endblock %}
```

----------------------------------------

TITLE: Setting Secure and HttpOnly Cookies in Flask
DESCRIPTION: Demonstrates how to set a secure, HttpOnly, and SameSite=Lax cookie in Flask, enhancing security by preventing client-side script access and cross-site request forgery.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_9

LANGUAGE: python
CODE:
```
response.set_cookie('username', 'flask', secure=True, httponly=True, samesite='Lax')
```

----------------------------------------

TITLE: Flask File Upload Application Initialization
DESCRIPTION: This code initializes a Flask application for file uploads. It imports necessary modules like os, Flask, request, and secure_filename. It defines the UPLOAD_FOLDER path and ALLOWED_EXTENSIONS set, then configures the Flask app with the upload folder. This setup is crucial for handling file uploads securely and efficiently.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import os
from flask import Flask, flash, request, redirect, url_for
from werkzeug.utils import secure_filename

UPLOAD_FOLDER = '/path/to/the/uploads'
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
```

----------------------------------------

TITLE: Integrating Database Registration into Flask App Factory (Python)
DESCRIPTION: This Python code shows how to import and call the `init_app` function (from `flaskr/db.py`) within the `create_app` factory function in `flaskr/__init__.py`. This ensures that the database functions are properly registered with the Flask application instance when the application is created.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#_snippet_4

LANGUAGE: python
CODE:
```
def create_app():
    app = ...
    # existing code omitted

    from . import db
    db.init_app(app)

    return app
```

----------------------------------------

TITLE: Using test_request_context for Unit Testing
DESCRIPTION: Demonstrates how to use the `test_request_context` context manager to bind a test request to the current context, enabling unit testing of code that depends on the global `request` object. This allows for assertions on request attributes like path and method.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_15

LANGUAGE: python
CODE:
```
from flask import request

with app.test_request_context('/hello', method='POST'):
    # now you can do something with the request until the
    # end of the with block, such as basic assertions:
    assert request.path == '/hello'
    assert request.method == 'POST'
```

----------------------------------------

TITLE: Using MarkupSafe for HTML Escaping and Unescaping
DESCRIPTION: Demonstrates the `markupsafe.Markup` class for handling HTML strings securely in Python. It illustrates how to combine safe and unsafe strings, explicitly escape potentially malicious HTML, and strip HTML tags from text, crucial for preventing Cross-Site Scripting (XSS) vulnerabilities.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_14

LANGUAGE: python
CODE:
```
from markupsafe import Markup
>>> Markup('<strong>Hello %s!</strong>') % '<blink>hacker</blink>'
Markup('<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>')
>>> Markup.escape('<blink>hacker</blink>')
Markup('&lt;blink&gt;hacker&lt;/blink&gt;')
>>> Markup('<em>Marked up</em> &raquo; HTML').striptags()
'Marked up » HTML'
```

----------------------------------------

TITLE: Return JSON Responses for Flask API Errors
DESCRIPTION: This example shows how to configure Flask to return JSON responses for HTTP errors, specifically a 404 Not Found error. It uses `jsonify` within an `errorhandler` to format the error message as JSON and demonstrates how `abort` can be used with a `description` parameter to trigger this custom error handler.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_17

LANGUAGE: Python
CODE:
```
    from flask import abort, jsonify

    @app.errorhandler(404)
    def resource_not_found(e):
        return jsonify(error=str(e)), 404

    @app.route("/cheese")
    def get_one_cheese():
        resource = get_resource()

        if resource is None:
            abort(404, description="Resource not found")

        return jsonify(resource)
```

----------------------------------------

TITLE: Configure Flask SECRET_KEY in production
DESCRIPTION: Example of how to set the generated SECRET_KEY within the 'config.py' file, located in the Flask instance folder. This configuration overrides the development key and is essential for securing the application in production.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#_snippet_5

LANGUAGE: python
CODE:
```
SECRET_KEY = '192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'
```

----------------------------------------

TITLE: Flask: Create New Blog Post Logic
DESCRIPTION: This Python snippet handles the POST request logic for creating a new blog post. It validates the input title, flashes an error if the title is missing, otherwise it inserts the new post into the database and redirects the user to the blog index page.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_5

LANGUAGE: python
CODE:
```
            if error is not None:
                flash(error)
            else:
                db = get_db()
                db.execute(
                    'INSERT INTO post (title, body, author_id)'
                    ' VALUES (?, ?, ?)',
                    (title, body, g.user['id'])
                )
                db.commit()
                return redirect(url_for('blog.index'))

        return render_template('blog/create.html')
```

----------------------------------------

TITLE: Replace HTML Content with JavaScript Fetch
DESCRIPTION: This HTML snippet, including embedded JavaScript, demonstrates how to fetch new HTML content from a Flask endpoint and dynamically replace the inner HTML of a specific `div` element. It uses `fetch` to retrieve the content as text and then assigns it to `element.innerHTML`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_9

LANGUAGE: html
CODE:
```
<div id="geology-fact">
    {{ include "geology_fact.html" }}
</div>
<script>
    const geology_url = {{ url_for("geology_fact")|tojson }}
    const geology_div = getElementById("geology-fact")
    fetch(geology_url)
        .then(response => response.text)
        .then(text => geology_div.innerHTML = text)
</script>
```

----------------------------------------

TITLE: Define Flask Application Factory (Python)
DESCRIPTION: This Python function `create_app` serves as the application factory for a Flask application. It initializes the Flask instance, configures default settings, handles instance-relative configuration, ensures the instance folder exists, and sets up a basic '/hello' route. This pattern is recommended for robust application structures, especially for testing and deployment.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/factory.rst#_snippet_1

LANGUAGE: python
CODE:
```
import os

from flask import Flask


def create_app(test_config=None):
    # create and configure the app
    app = Flask(__name__, instance_relative_config=True)
    app.config.from_mapping(
        SECRET_KEY='dev',
        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),
    )

    if test_config is None:
        # load the instance config, if it exists, when not testing
        app.config.from_pyfile('config.py', silent=True)
    else:
        # load the test config if passed in
        app.config.from_mapping(test_config)

    # ensure the instance folder exists
    try:
        os.makedirs(app.instance_path)
    except OSError:
        pass

    # a simple page that says hello
    @app.route('/hello')
    def hello():
        return 'Hello, World!'

    return app
```

----------------------------------------

TITLE: Generate Flask Secret Key (Shell Command)
DESCRIPTION: Provides a shell command using Python's `secrets` module to quickly generate a strong, random hexadecimal string suitable for use as a Flask secret key.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_30

LANGUAGE: shell
CODE:
```
python -c 'import secrets; print(secrets.token_hex())'
```

----------------------------------------

TITLE: Initialize and configure a Flask extension in Python
DESCRIPTION: This example demonstrates the general pattern for using a Flask extension. It shows how to import the extension, create an instance, configure application-specific settings via `app.config`, and then initialize the extension with the Flask application instance using the `init_app` method.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensions.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from flask_foo import Foo

foo = Foo()

app = Flask(__name__)
app.config.update(
    FOO_BAR='baz',
    FOO_SPAM='eggs',
)

foo.init_app(app)
```

----------------------------------------

TITLE: Configuring and Using Permanent Sessions in Flask
DESCRIPTION: Illustrates how to configure the `PERMANENT_SESSION_LIFETIME` for Flask sessions and how to mark a session as permanent within a route, ensuring it persists for the configured duration. This also impacts the cryptographic signature validation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_11

LANGUAGE: python
CODE:
```
app.config.update(
    PERMANENT_SESSION_LIFETIME=600
)

@app.route('/login', methods=['POST'])
def login():
    ...
    session.clear()
    session['user_id'] = user.id
    session.permanent = True
    ...
```

----------------------------------------

TITLE: Injecting Request Context into Flask Log Messages
DESCRIPTION: Demonstrates how to extend `logging.Formatter` to include request-specific information like URL and remote IP address directly into log messages. This customization enhances debugging capabilities by providing richer context for errors and events occurring within a web request.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#_snippet_4

LANGUAGE: python
CODE:
```
from flask import has_request_context, request
from flask.logging import default_handler

class RequestFormatter(logging.Formatter):
    def format(self, record):
        if has_request_context():
            record.url = request.url
            record.remote_addr = request.remote_addr
        else:
            record.url = None
            record.remote_addr = None

        return super().format(record)

formatter = RequestFormatter(
    '[%(asctime)s] %(remote_addr)s requested %(url)s\n'
    '%(levelname)s in %(module)s: %(message)s'
)
default_handler.setFormatter(formatter)
mail_handler.setFormatter(formatter)
```

----------------------------------------

TITLE: Test User Logout in Flask with Pytest
DESCRIPTION: Tests the Flask logout view. This snippet ensures that after a user logs out, their `user_id` is successfully removed from the session, confirming the logout operation's effectiveness.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_14

LANGUAGE: python
CODE:
```
def test_logout(client, auth):
    auth.login()

    with client:
        auth.logout()
        assert 'user_id' not in session
```

----------------------------------------

TITLE: Separate Flask Views for GET and POST Methods
DESCRIPTION: Demonstrates how to define distinct view functions for different HTTP methods (GET and POST) on the same route in Flask. This approach, using `@app.get` and `@app.post` decorators, helps organize logic when specific actions are tied to particular request methods, such as displaying a form versus processing its submission.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_10

LANGUAGE: python
CODE:
```
@app.get('/login')
def login_get():
    return show_the_login_form()

@app.post('/login')
def login_post():
    return do_the_login()
```

----------------------------------------

TITLE: Flask: Custom 500 Internal Server Error Handler
DESCRIPTION: This Python snippet demonstrates how to create a custom error handler for 500 Internal Server Errors at the application level. It uses `@app.errorhandler(500)` to catch these errors, renders a custom '500.html' template, and explicitly returns the 500 status code.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_12

LANGUAGE: python
CODE:
```
from flask import render_template

@app.errorhandler(500)
def internal_server_error(e):
    # note that we set the 500 status explicitly
    return render_template('500.html'), 500
```

----------------------------------------

TITLE: Setting Flask Config Value (Dictionary Style) - Python
DESCRIPTION: Demonstrates setting a single configuration value on the Flask application's config object using dictionary-like access.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_0

LANGUAGE: python
CODE:
```
app = Flask(__name__)
app.config['TESTING'] = True
```

----------------------------------------

TITLE: Start Flask Application with Debug Mode
DESCRIPTION: This command initiates the Flask development server for the 'flaskr' application, activating debug mode. Debug mode is crucial for development as it provides an interactive debugger on errors and automatically reloads the server upon code modifications, streamlining the development workflow.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/factory.rst#_snippet_3

LANGUAGE: text
CODE:
```
$ flask --app flaskr run --debug
```

----------------------------------------

TITLE: Run Gunicorn with gevent asynchronous worker
DESCRIPTION: Shows how to start Gunicorn using the 'gevent' worker type for asynchronous processing. This requires gevent to be installed and your application code to utilize gevent for any performance benefits. Ensure greenlet>=1.0 is installed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#_snippet_3

LANGUAGE: shell
CODE:
```
$ gunicorn -k gevent 'hello:create_app()'
```

----------------------------------------

TITLE: Test Flask Client JSON Data Handling
DESCRIPTION: This Python snippet demonstrates how to send JSON data in a POST request using the Flask test client and assert the structure and content of the JSON response. It shows querying a GraphQL endpoint with JSON payload and verifying the returned user data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_4

LANGUAGE: python
CODE:
```
def test_json_data(client):
    response = client.post("/graphql", json={
        "query": """
            query User($id: String!) {
                user(id: $id) {
                    name
                    theme
                    picture_url
                }
            }
        """,
        variables:{"id": 2},
    })
    assert response.json["data"]["user"]["name"] == "Flask"
```

----------------------------------------

TITLE: Flask Decorator for Requiring User Authentication
DESCRIPTION: This Python decorator, 'login_required', is designed to protect Flask views by ensuring that a user is logged in before accessing them. It wraps the original view function, checks if 'g.user' is 'None' (indicating no logged-in user), and if so, redirects to the login page. Otherwise, it proceeds to execute the original view function, passing along any keyword arguments.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#_snippet_6

LANGUAGE: python
CODE:
```
def login_required(view):
    @functools.wraps(view)
    def wrapped_view(**kwargs):
        if g.user is None:
            return redirect(url_for('auth.login'))

        return view(**kwargs)

    return wrapped_view
```

----------------------------------------

TITLE: Define an Async Route in Flask
DESCRIPTION: This Python code demonstrates how to create an asynchronous route in a Flask application. By using `async def` for the view function and `await` for I/O operations (like database queries), the application can perform non-blocking tasks within a single worker, improving concurrency for I/O-bound operations.
SOURCE: https://github.com/pallets/flask/blob/main/docs/async-await.rst#_snippet_0

LANGUAGE: python
CODE:
```
@app.route("/get-data")
async def get_data():
    data = await async_db_query(...)
    return jsonify(data)
```

----------------------------------------

TITLE: Flask Routing with Optional Parameters and Defaults
DESCRIPTION: Illustrates how to define Flask routes with optional parameters using default values, allowing a single function to handle multiple URL patterns for the same resource, such as a paginated list of users.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_37

LANGUAGE: Python
CODE:
```
@app.route('/users/', defaults={'page': 1})
@app.route('/users/page/<int:page>')
def show_users(page):
    pass
```

----------------------------------------

TITLE: Werkzeug secure_filename Function Usage Example
DESCRIPTION: This example demonstrates the usage and output of the werkzeug.utils.secure_filename function in a Python REPL. It illustrates how a potentially malicious filename containing directory traversal attempts (../../..) is sanitized into a safe filename, effectively preventing path manipulation vulnerabilities when storing user-provided file names.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#_snippet_2

LANGUAGE: Python
CODE:
```
>>> secure_filename('../../../../home/username/.bashrc')
'home_username_.bashrc'
```

----------------------------------------

TITLE: Flask: Update Existing Blog Post Logic
DESCRIPTION: This Python function handles the update logic for an existing blog post. It uses the `get_post` helper to fetch the post, validates the new title from the POST request, updates the post in the database, and redirects to the blog index. It supports both GET (display form) and POST (process update) requests.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_8

LANGUAGE: python
CODE:
```
@bp.route('/<int:id>/update', methods=('GET', 'POST'))
@login_required
def update(id):
        post = get_post(id)

        if request.method == 'POST':
            title = request.form['title']
            body = request.form['body']
            error = None

            if not title:
                error = 'Title is required.'

            if error is not None:
                flash(error)
            else:
                db = get_db()
                db.execute(
                    'UPDATE post SET title = ?, body = ?'
                    ' WHERE id = ?',
                    (title, body, id)
                )
                db.commit()
                return redirect(url_for('blog.index'))

        return render_template('blog/update.html', post=post)
```

----------------------------------------

TITLE: Flask Blog Post Deletion Endpoint (flaskr/blog.py)
DESCRIPTION: This Python Flask snippet defines the `delete` view for a blog post. It handles POST requests to the `/<int:id>/delete` URL, ensures the user is logged in, retrieves the post to confirm its existence, deletes the corresponding entry from the 'post' table in the database, commits the transaction, and then redirects the user to the blog index page.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_10

LANGUAGE: python
CODE:
```
@bp.route('/<int:id>/delete', methods=('POST',))
@login_required
def delete(id):
    get_post(id)
    db = get_db()
    db.execute('DELETE FROM post WHERE id = ?', (id,))
    db.commit()
    return redirect(url_for('blog.index'))
```

----------------------------------------

TITLE: Flask Blueprint URL Generation (Absolute)
DESCRIPTION: Demonstrates how to generate a URL for an endpoint within a specific Flask Blueprint using the `url_for` function, by prefixing the endpoint with the blueprint name and a dot.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_14

LANGUAGE: python
CODE:
```
url_for('admin.index')
```

----------------------------------------

TITLE: Perform POST Request with JavaScript fetch and FormData
DESCRIPTION: This JavaScript snippet illustrates how to send data using the `fetch` API with the POST method. It demonstrates the use of a `FormData` object to send form-encoded data, which can be accessed via `request.form` in a Flask view.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_6

LANGUAGE: javascript
CODE:
```
let data = new FormData()
data.append("name", "Flask Room")
data.append("description", "Talk about Flask here.")
fetch(room_url, {
    "method": "POST",
    "body": data,
}).then(...)
```

----------------------------------------

TITLE: Manage Database Connection with Flask g Object and Teardown
DESCRIPTION: This example shows how to manage a database connection using Flask's `g` object. The `get_db` function ensures a single connection per application context, while `teardown_db` is registered with `@app.teardown_appcontext` to automatically close the connection when the context ends, ensuring proper resource cleanup.
SOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#_snippet_2

LANGUAGE: python
CODE:
```
from flask import g

def get_db():
    if 'db' not in g:
        g.db = connect_to_database()

    return g.db

@app.teardown_appcontext
def teardown_db(exception):
    db = g.pop('db', None)

    if db is not None:
        db.close()
```

----------------------------------------

TITLE: Flask User Logout Functionality
DESCRIPTION: This Python function defines the '/logout' route in Flask. It clears the user's session data, effectively logging them out. After clearing the session, it redirects the user to the application's index page, ensuring that subsequent requests will not have a logged-in user.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#_snippet_5

LANGUAGE: python
CODE:
```
@bp.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))
```

----------------------------------------

TITLE: Handling RuntimeError: Working outside of request context in Flask
DESCRIPTION: This snippet illustrates the `RuntimeError` encountered when accessing request-dependent functionality outside an active Flask request context. It provides a solution using `app.test_request_context` within a `with` block, allowing test code to simulate a request environment and access `request` data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/reqcontext.rst#_snippet_0

LANGUAGE: pytb
CODE:
```
RuntimeError: Working outside of request context.

    This typically means that you attempted to use functionality that
    needed an active HTTP request. Consult the documentation on testing
    for information about how to avoid this problem.
```

LANGUAGE: Python
CODE:
```
def generate_report(year):
        format = request.args.get("format")
        ...

    with app.test_request_context(
        "/make_report/2017", query_string={"format": "short"}
    ):
        generate_report()
```

----------------------------------------

TITLE: Flask Session Object API Reference and Usage
DESCRIPTION: Documents the `session` object, which allows remembering information across requests using signed cookies. It behaves like a dictionary and tracks modifications. Requires `Flask.secret_key` to be set. Includes an example of explicitly marking a session as modified.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
session:
  Type: Global Proxy Object (dict-like)
  Description: Stores information across requests using a signed cookie. Requires Flask.secret_key.
  Attributes:
    new: bool - True if the session is new.
    modified: bool - True if the session object detected a modification. Be advised that modifications on mutable structures are not picked up automatically; set this attribute to True yourself.
    permanent: bool - If set to True, the session lives for Flask.permanent_session_lifetime seconds (default 31 days). If set to False (default), the session will be deleted when the user closes the browser.
  Notes: This is a proxy. See :ref:`notes-on-proxies` for more information.
```

LANGUAGE: python
CODE:
```
# this change is not picked up because a mutable object (here
# a list) is changed.
session['objects'].append(42)
# so mark it as modified yourself
session.modified = True
```

----------------------------------------

TITLE: Create Virtual Environment (macOS/Linux) - Shell
DESCRIPTION: Commands to create a project directory and a virtual environment named .venv within it on macOS or Linux using the python3 -m venv command.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#_snippet_0

LANGUAGE: Shell
CODE:
```
$ mkdir myproject
$ cd myproject
$ python3 -m venv .venv
```

----------------------------------------

TITLE: Test User Login and Input Validation in Flask with Pytest
DESCRIPTION: Tests the Flask login view. `test_login` verifies successful user login, redirection to the home page, and correct `session` and `g` context updates. `test_login_validate_input` utilizes `pytest.mark.parametrize` to efficiently test various invalid username/password combinations, asserting that the expected error messages are present in the response data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_13

LANGUAGE: python
CODE:
```
def test_login(client, auth):
    assert client.get('/auth/login').status_code == 200
    response = auth.login()
    assert response.headers["Location"] == "/"

    with client:
        client.get('/')
        assert session['user_id'] == 1
        assert g.user['username'] == 'test'


@pytest.mark.parametrize(('username', 'password', 'message'), (
    ('a', 'test', b'Incorrect username.'),
    ('test', 'a', b'Incorrect password.'),
))
def test_login_validate_input(auth, username, password, message):
    response = auth.login(username, password)
    assert message in response.data
```

----------------------------------------

TITLE: Flask Redirects and Errors: `redirect` and `abort`
DESCRIPTION: Illustrates the basic usage of `flask.redirect` to send a user to another URL and `flask.abort` to immediately terminate a request with an HTTP error code.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_24

LANGUAGE: python
CODE:
```
from flask import abort, redirect, url_for

@app.route('/')
def index():
    return redirect(url_for('login'))

@app.route('/login')
def login():
    abort(401)
    this_is_never_executed()
```

----------------------------------------

TITLE: Test Flask Post Update Functionality
DESCRIPTION: This Python test snippet verifies the update functionality for a blog post. It asserts that a GET request to the update page returns a 200 status, then posts data to update a post, and finally checks the database to confirm the post's title has been successfully updated.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_18

LANGUAGE: python
CODE:
```
assert client.get('/1/update').status_code == 200
client.post('/1/update', data={'title': 'updated', 'body': ''})

with app.app_context():
    db = get_db()
    post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()
    assert post['title'] == 'updated'
```

----------------------------------------

TITLE: Blog Index HTML Template with Jinja
DESCRIPTION: This Jinja2 template (`blog/index.html`) extends a base layout and displays a list of blog posts. It includes a 'New' link for logged-in users to create posts and an 'Edit' link for authors to modify their own posts. Posts are separated by a horizontal rule, except for the last one, using `loop.last`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_3

LANGUAGE: html+jinja
CODE:
```
{% extends 'base.html' %}

{% block header %}
  <h1>{% block title %}Posts{% endblock %}</h1>
  {% if g.user %}
    <a class="action" href="{{ url_for('blog.create') }}">New</a>
  {% endif %}
{% endblock %}

{% block content %}
  {% for post in posts %}
    <article class="post">
      <header>
        <div>
          <h1>{{ post['title'] }}</h1>
          <div class="about">by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}</div>
        </div>
        {% if g.user['id'] == post['author_id'] %}
          <a class="action" href="{{ url_for('blog.update', id=post['id']) }}">Edit</a>
        {% endif %}
      </header>
      <p class="body">{{ post['body'] }}</p>
    </article>
    {% if not loop.last %}
      <hr>
    {% endif %}
  {% endfor %}
{% endblock %}
```

----------------------------------------

TITLE: Jinja Template for Login Page (login.html)
DESCRIPTION: This Jinja template (`login.html`) extends `layout.html` and provides a login form. It displays any `error` message passed from the Flask view and includes input fields for username and password, demonstrating form submission within the flashing context.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#_snippet_3

LANGUAGE: HTML+Jinja
CODE:
```
{% extends "layout.html" %}
   {% block body %}
     <h1>Login</h1>
     {% if error %}
       <p class=error><strong>Error:</strong> {{ error }}
     {% endif %}
     <form method=post>
       <dl>
         <dt>Username:
         <dd><input type=text name=username value="{{
             request.form.username }}">
         <dt>Password:
         <dd><input type=password name=password>
       </dl>
       <p><input type=submit value=Login>
     </form>
   {% endblock %}
```

----------------------------------------

TITLE: Build URLs in Flask using url_for Function
DESCRIPTION: Demonstrates how to programmatically generate URLs for Flask functions using `url_for`. This method is preferred over hard-coding URLs as it handles changes, escaping, and application root paths automatically, ensuring robust URL generation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_8

LANGUAGE: python
CODE:
```
from flask import url_for

@app.route('/')
def index():
    return 'index'

@app.route('/login')
def login():
    return 'login'

@app.route('/user/<username>')
def profile(username):
    return f'{username}\'s profile'

with app.test_request_context():
    print(url_for('index'))
    print(url_for('login'))
    print(url_for('login', next='/'))
    print(url_for('profile', username='John Doe'))
```

LANGUAGE: text
CODE:
```
/
/login
/login?next=/
/user/John%20Doe
```

----------------------------------------

TITLE: Embed Server-Side Data in JavaScript using Jinja tojson Filter
DESCRIPTION: This Jinja template snippet shows how to safely embed server-side data (e.g., `chart_data`) directly into a JavaScript block. The `tojson` filter is crucial for converting the data into a valid JavaScript object and escaping unsafe HTML characters, preventing `SyntaxError` in the browser.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_1

LANGUAGE: jinja
CODE:
```
<script>
    const chart_data = {{ chart_data|tojson }}
    chartLib.makeChart(chart_data)
</script>
```

----------------------------------------

TITLE: Handle HTTP Exceptions with JSON Response in Flask
DESCRIPTION: This snippet demonstrates how to register a generic error handler for all HTTPException subclasses to return JSON responses instead of default HTML error pages. It extracts the error code, name, and description from the exception object.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_5

LANGUAGE: python
CODE:
```
from flask import json
from werkzeug.exceptions import HTTPException

@app.errorhandler(HTTPException)
def handle_exception(e):
    """Return JSON instead of HTML for HTTP errors."""
    # start with the correct headers and status code from the error
    response = e.get_response()
    # replace the body with JSON
    response.data = json.dumps({
        "code": e.code,
        "name": e.name,
        "description": e.description,
    })
    response.content_type = "application/json"
    return response
```

----------------------------------------

TITLE: Make Flask Server Externally Visible
DESCRIPTION: By default, the Flask development server is only accessible from the local machine. This command demonstrates how to make the server publicly available on the network by adding '--host=0.0.0.0'. This tells the operating system to listen on all public IP addresses, but should only be used if the debugger is disabled or users on the network are trusted due to security risks.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_2

LANGUAGE: text
CODE:
```
$ flask run --host=0.0.0.0
```

----------------------------------------

TITLE: Perform GET Request with JavaScript fetch and Process JSON Response
DESCRIPTION: This JavaScript snippet demonstrates how to make a basic GET request using the `fetch` API. It shows how to chain `.then()` calls to parse the response as JSON and then work with the parsed data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_5

LANGUAGE: javascript
CODE:
```
const room_url = {{ url_for("room_detail", id=room.id)|tojson }}
fetch(room_url)
    .then(response => response.json())
    .then(data => {
        // data is a parsed JSON object
    })
```

----------------------------------------

TITLE: Flask Teardown for Database Session Cleanup
DESCRIPTION: This snippet shows how to register a function to be called when the application context tears down, ensuring the database session is removed. This is crucial for proper resource management and preventing connection leaks in web applications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from yourapplication.database import db_session

@app.teardown_appcontext
def shutdown_session(exception=None):
    db_session.remove()
```

----------------------------------------

TITLE: Test Flask Client Redirect Following
DESCRIPTION: This Python example illustrates how to configure the Flask test client to automatically follow redirects by setting `follow_redirects=True`. It also demonstrates how to inspect the `response.history` attribute to verify the number of redirects and the final request path.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_5

LANGUAGE: python
CODE:
```
def test_logout_redirect(client):
    response = client.get("/logout", follow_redirects=True)
    # Check that there was one redirect response.
    assert len(response.history) == 1
    # Check that the second request was to the index page.
    assert response.request.path == "/index"
```

----------------------------------------

TITLE: Basic Flask Application Setup
DESCRIPTION: Demonstrates a minimal Flask application that returns 'Hello World!' on the root path. This serves as a basic WSGI application that can be run with any WSGI server.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello World!'
```

----------------------------------------

TITLE: Register a Flask Blueprint with an Application
DESCRIPTION: This example shows how to integrate a previously defined Flask Blueprint, `simple_page`, into a main Flask application. It imports the blueprint and registers it using the `app.register_blueprint()` method, making its routes available to the application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from flask import Flask
from yourapplication.simple_page import simple_page

app = Flask(__name__)
app.register_blueprint(simple_page)
```

----------------------------------------

TITLE: Werkzeug secure_filename Function
DESCRIPTION: Documentation for the werkzeug.utils.secure_filename function. This function is critical for sanitizing user-provided filenames before saving them to the filesystem, preventing security vulnerabilities like directory traversal by removing unsafe characters and path components.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
werkzeug.utils.secure_filename(filename: str) -> str
  filename: str - The filename string to secure.
  Returns: str - A secured version of the filename, safe for storage on a filesystem.
  Description: Secures a filename to prevent directory traversal and other filesystem-related attacks by removing unsafe characters.
```

----------------------------------------

TITLE: Accessing SQLite Database in a Flask Route
DESCRIPTION: Demonstrates how to use the `get_db()` function within a Flask route to obtain a database cursor and perform operations, leveraging the on-demand connection management.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#_snippet_1

LANGUAGE: Python
CODE:
```
@app.route('/')
def index():
    cur = get_db().cursor()
    ...
```

----------------------------------------

TITLE: Flask application factory with Celery integration
DESCRIPTION: Demonstrates how to integrate Celery initialization within a Flask application factory pattern. The `celery_init_app` function is called inside the factory, making the Celery app accessible via `app.extensions["celery"]`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#_snippet_5

LANGUAGE: python
CODE:
```
def create_app() -> Flask:
    app = Flask(__name__)
    app.config.from_mapping(
        CELERY=dict(
            broker_url="redis://localhost",
            result_backend="redis://localhost",
            task_ignore_result=True,
        ),
    )
    app.config.from_prefixed_env()
    celery_init_app(app)
    return app
```

----------------------------------------

TITLE: Create a custom Click script for Flask app factory pattern
DESCRIPTION: This snippet demonstrates how to create a custom Click script using 'FlaskGroup' when employing the app factory pattern. It allows defining a custom entry point (e.g., 'wiki') that automatically loads the Flask application without needing the '--app' argument.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_17

LANGUAGE: Python
CODE:
```
import click
from flask import Flask
from flask.cli import FlaskGroup

def create_app():
    app = Flask('wiki')
    # other setup
    return app

@click.group(cls=FlaskGroup, create_app=create_app)
def cli():
    """Management script for the Wiki application."""
```

----------------------------------------

TITLE: Flask Session Management Example
DESCRIPTION: Demonstrates how to use Flask sessions to store user-specific information across requests, including setting a secret key, handling login, and logout functionality.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_29

LANGUAGE: python
CODE:
```
from flask import session

# Set the secret key to some random bytes. Keep this really secret!
app.secret_key = b'_5#y2L\"F4Q8z\n\xec]/'

@app.route('/')
def index():
    if 'username' in session:
        return f'Logged in as {session["username"]}'
    return 'You are not logged in'

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        session['username'] = request.form['username']
        return redirect(url_for('index'))
    return '''
        <form method="post">
            <p><input type=text name=username>
            <p><input type=submit value=Login>
        </form>
    '''

@app.route('/logout')
def logout():
    # remove the username from the session if it's there
    session.pop('username', None)
    return redirect(url_for('index'))
```

----------------------------------------

TITLE: Initialize Flask Application Package
DESCRIPTION: This Python code snippet for '__init__.py' demonstrates how to create the Flask application object within a package. It also shows the crucial step of importing view modules (like 'yourapplication.views') after the app object is created, which ensures that routes defined in those modules are registered with the application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#_snippet_3

LANGUAGE: python
CODE:
```
from flask import Flask
app = Flask(__name__)

import yourapplication.views
```

----------------------------------------

TITLE: Install Python Environment and Flask Project
DESCRIPTION: This snippet provides commands to set up a Python virtual environment, activate it, and install the current Flask project in editable mode. This is a standard procedure for preparing a Python development environment.
SOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/README.rst#_snippet_0

LANGUAGE: text
CODE:
```
$ python3 -m venv .venv
$ . .venv/bin/activate
$ pip install -e .
```

----------------------------------------

TITLE: Load Logged-in User Before Each Flask Request
DESCRIPTION: This Flask 'before_app_request' function ensures that user information is loaded and available for every request if a user is logged in. It retrieves the 'user_id' from the session, queries the database for the corresponding user, and stores the user object in 'g.user' for the duration of the request. If no user is logged in or the ID is invalid, 'g.user' is set to 'None'.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#_snippet_4

LANGUAGE: python
CODE:
```
@bp.before_app_request
def load_logged_in_user():
    user_id = session.get('user_id')

    if user_id is None:
        g.user = None
    else:
        g.user = get_db().execute(
            'SELECT * FROM user WHERE id = ?', (user_id,)
        ).fetchone()
```

----------------------------------------

TITLE: Insert Data into SQLAlchemy Table
DESCRIPTION: This snippet illustrates how to insert new data into a SQLAlchemy table. It involves establishing a connection from the engine and executing an insert statement with the desired values. SQLAlchemy handles transaction commitment automatically for simple operations.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_11

LANGUAGE: Python
CODE:
```
con = engine.connect()
con.execute(users.insert(), name='admin', email='admin@localhost')
```

----------------------------------------

TITLE: Injecting Functions with Flask Context Processor
DESCRIPTION: Demonstrates how a Flask context processor can make Python functions available directly within Jinja2 templates. This snippet injects a `format_price` utility function for currency formatting.
SOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#_snippet_7

LANGUAGE: python
CODE:
```
@app.context_processor
def utility_processor():
    def format_price(amount, currency="€"):
        return f"{amount:.2f}{currency}"
    return dict(format_price=format_price)
```

----------------------------------------

TITLE: Accessing URL Parameters with request.args
DESCRIPTION: Demonstrates how to retrieve parameters submitted in the URL query string (e.g., `?key=value`) using the `request.args` attribute. It recommends using the `.get()` method to safely access parameters and provide a default value, preventing `KeyError`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_19

LANGUAGE: python
CODE:
```
searchword = request.args.get('key', '')
```

----------------------------------------

TITLE: Flask: Setting Maximum Request Content Length
DESCRIPTION: This code illustrates how to configure Flask's MAX_CONTENT_LENGTH setting to limit the maximum size of incoming request payloads, such as file uploads. If a request exceeds this limit (e.g., 16 megabytes as shown), Flask will raise a werkzeug.exceptions.RequestEntityTooLarge exception.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#_snippet_9

LANGUAGE: python
CODE:
```
from flask import Flask, Request

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1000 * 1000
```

----------------------------------------

TITLE: Return List as JSON using Flask jsonify
DESCRIPTION: This Python Flask example illustrates the use of `flask.json.jsonify` to return a list of objects as a JSON response. The `jsonify` function properly serializes the data and sets the appropriate `Content-Type` header, making it suitable for returning complex JSON structures like arrays.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_11

LANGUAGE: python
CODE:
```
from flask import jsonify

@app.route("/users")
def user_list():
    users = User.query.order_by(User.name).all()
    return jsonify([u.to_json() for u in users])
```

----------------------------------------

TITLE: Create Virtual Environment (Windows) - Shell
DESCRIPTION: Commands to create a project directory and a virtual environment named .venv within it on Windows using the py -3 -m venv command.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#_snippet_1

LANGUAGE: Shell
CODE:
```
> mkdir myproject
> cd myproject
> py -3 -m venv .venv
```

----------------------------------------

TITLE: Implement RESTful API with Flask MethodView
DESCRIPTION: Provides a comprehensive example of building a RESTful API using Flask's `MethodView`. It defines `ItemAPI` for single resource operations (GET, PATCH, DELETE) and `GroupAPI` for collection operations (GET, POST), demonstrating how to dispatch requests to class methods based on HTTP verbs.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#_snippet_12

LANGUAGE: python
CODE:
```
from flask.views import MethodView

class ItemAPI(MethodView):
    init_every_request = False

    def __init__(self, model):
        self.model = model
        self.validator = generate_validator(model)

    def _get_item(self, id):
        return self.model.query.get_or_404(id)

    def get(self, id):
        item = self._get_item(id)
        return jsonify(item.to_json())

    def patch(self, id):
        item = self._get_item(id)
        errors = self.validator.validate(item, request.json)

        if errors:
            return jsonify(errors), 400

        item.update_from_json(request.json)
        db.session.commit()
        return jsonify(item.to_json())

    def delete(self, id):
        item = self._get_item(id)
        db.session.delete(item)
        db.session.commit()
        return "", 204

class GroupAPI(MethodView):
    init_every_request = False

    def __init__(self, model):
        self.model = model
        self.validator = generate_validator(model, create=True)

    def get(self):
        items = self.model.query.all()
        return jsonify([item.to_json() for item in items])

    def post(self):
        errors = self.validator.validate(request.json)

        if errors:
            return jsonify(errors), 400

        db.session.add(self.model.from_json(request.json))
        db.session.commit()
        return jsonify(item.to_json())

def register_api(app, model, name):
    item = ItemAPI.as_view(f"{name}-item", model)
    group = GroupAPI.as_view(f"{name}-group", model)
    app.add_url_rule(f"/{name}/<int:id>", view_func=item)
    app.add_url_rule(f"/{name}/", view_func=group)

register_api(app, User, "users")
register_api(app, Story, "stories")
```

----------------------------------------

TITLE: Flask Resource Use Configuration for DoS Prevention
DESCRIPTION: Details Flask's configuration options to mitigate Denial of Service (DoS) attacks by controlling resource consumption per request. These settings help limit the amount of data, form memory, and form parts processed, preventing excessive resource usage.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Configuration Options:
- MAX_CONTENT_LENGTH (or Request.max_content_length): Controls maximum data read from a request. Not set by default, but blocks truly unlimited streams unless WSGI server supports it.
- MAX_FORM_MEMORY_SIZE (or Request.max_form_memory_size): Controls maximum size of non-file multipart/form-data fields. Default: 500kB.
- MAX_FORM_PARTS (or Request.max_form_parts): Controls maximum number of multipart/form-data fields parsed. Default: 1000. Combined with default max_form_memory_size, a form can occupy at most 500MB.
```

----------------------------------------

TITLE: Test Flask Database Initialization Command
DESCRIPTION: Tests the `init-db` command, ensuring it correctly calls the `init_db` function and outputs a confirmation message. It uses Pytest's `monkeypatch` fixture to mock the `init_db` function for testing purposes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_9

LANGUAGE: python
CODE:
```
def test_init_db_command(runner, monkeypatch):
    class Recorder(object):
        called = False

    def fake_init_db():
        Recorder.called = True

    monkeypatch.setattr('flaskr.db.init_db', fake_init_db)
    result = runner.invoke(args=['init-db'])
    assert 'Initialized' in result.output
    assert Recorder.called
```

----------------------------------------

TITLE: Flask Error Handling: Custom 404 Page
DESCRIPTION: Shows how to customize error pages in Flask using the `errorhandler` decorator. This example specifically handles a 404 Not Found error by rendering a custom template and setting the correct status code.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_25

LANGUAGE: python
CODE:
```
from flask import render_template

@app.errorhandler(404)
def page_not_found(error):
    return render_template('page_not_found.html'), 404
```

----------------------------------------

TITLE: Define Flask application for mod_wsgi (wsgi.py)
DESCRIPTION: These Python examples demonstrate how to create a `wsgi.py` script, which `mod_wsgi-express` expects, to expose your Flask application. It covers both direct application import and the app factory pattern, assigning the Flask app instance to a variable named `application`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#_snippet_1

LANGUAGE: python
CODE:
```
from hello import app

application = app
```

LANGUAGE: python
CODE:
```
from hello import create_app

application = create_app()
```

----------------------------------------

TITLE: Logging Messages in Flask Applications
DESCRIPTION: Flask provides a preconfigured logger accessible via `app.logger` for recording various levels of messages. This allows developers to log debugging information, warnings, and errors within their application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_31

LANGUAGE: python
CODE:
```
app.logger.debug('A value for debugging')
app.logger.warning('A warning occurred (%d apples)', 42)
app.logger.error('An error occurred')
```

----------------------------------------

TITLE: Basic Flask Application with Message Flashing
DESCRIPTION: This Python code demonstrates a complete Flask application setup for message flashing. It includes routes for the index and a login page, handling POST requests to validate credentials, flashing success messages, and redirecting users. A secret key is set for session management.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from flask import Flask, flash, redirect, render_template, \
         request, url_for

    app = Flask(__name__)
    app.secret_key = b'_5#y2L"F4Q8z\n\xec]/'

    @app.route('/')
    def index():
        return render_template('index.html')

    @app.route('/login', methods=['GET', 'POST'])
    def login():
        error = None
        if request.method == 'POST':
            if request.form['username'] != 'admin' or \
                    request.form['password'] != 'secret':
                error = 'Invalid credentials'
            else:
                flash('You were successfully logged in')
                return redirect(url_for('index'))
        return render_template('login.html', error=error)
```

----------------------------------------

TITLE: Basic Flask Application Setup and Configuration
DESCRIPTION: This snippet demonstrates the initial setup of a Flask application by creating an instance of the Flask class. It shows how to configure the application using `app.config.from_mapping` for default settings and `app.config.from_prefixed_env()` for environment-based configuration. A basic route is also included to illustrate a simple 'Hello, World!' endpoint.
SOURCE: https://github.com/pallets/flask/blob/main/docs/lifecycle.rst#_snippet_0

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)
app.config.from_mapping(
    SECRET_KEY="dev",
)
app.config.from_prefixed_env()

@app.route("/")
def index():
    return "Hello, World!"
```

----------------------------------------

TITLE: Send GET Request and Assert Response with Flask Test Client
DESCRIPTION: This Python example illustrates how to use Flask's test client to simulate a GET request to a specified route (`/posts`). It then asserts that a particular byte string (`<h2>Hello, World!</h2>`) is present within the response data, verifying the expected output from the application's view.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_2

LANGUAGE: python
CODE:
```
def test_request_example(client):
    response = client.get("/posts")
    assert b"<h2>Hello, World!</h2>" in response.data
```

----------------------------------------

TITLE: Handle Flask HTTP Errors with Custom Pages
DESCRIPTION: This snippet demonstrates how to implement custom error handlers for 404 (Not Found) and 405 (Method Not Allowed) HTTP errors in Flask. It shows how to return different HTML templates based on the request path for web applications, and how to return a JSON response for API endpoints.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_16

LANGUAGE: Python
CODE:
```
    def page_not_found(e):
        # if a request is in our blog URL space
        if request.path.startswith('/blog/'):
            # we return a custom blog 404 page
            return render_template("blog/404.html"), 404
        else:
            # otherwise we return our generic site-wide 404 page
            return render_template("404.html"), 404

    @app.errorhandler(405)
    def method_not_allowed(e):
        # if a request has the wrong method to our API
        if request.path.startswith('/api/'):
            # we return a json saying so
            return jsonify(message="Method Not Allowed"), 405
        else:
            # otherwise we return a generic site-wide 405 page
            return render_template("405.html"), 405
```

----------------------------------------

TITLE: Register Flask Error Handler with Decorator
DESCRIPTION: Define a custom error handler for a specific HTTP exception (e.g., BadRequest) using the `@app.errorhandler` decorator. Ensure the response includes the appropriate HTTP status code.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_2

LANGUAGE: python
CODE:
```
@app.errorhandler(werkzeug.exceptions.BadRequest)
def handle_bad_request(e):
    return 'bad request!', 400
```

----------------------------------------

TITLE: Test Blog Post Creation and Update in Flask with Pytest
DESCRIPTION: Tests the functionality of creating and updating blog posts. `test_create` verifies that the create page renders correctly on a GET request and that a POST request with valid data successfully inserts a new post into the database. `test_update` (partially shown) would similarly test the modification of existing post data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_17

LANGUAGE: python
CODE:
```
def test_create(client, auth, app):
    auth.login()
    assert client.get('/create').status_code == 200
    client.post('/create', data={'title': 'created', 'body': ''})

    with app.app_context():
        db = get_db()
        count = db.execute('SELECT COUNT(id) FROM post').fetchone()[0]
        assert count == 2


def test_update(client, auth, app):
    auth.login()
```

----------------------------------------

TITLE: Run basic uWSGI HTTP server for Flask app
DESCRIPTION: This snippet demonstrates the fundamental `uwsgi` command to start an HTTP server for a Flask application. It configures the server to listen on a specific IP and port, manages worker processes, and specifies the application entry point.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#_snippet_2

LANGUAGE: text
CODE:
```
$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w hello:app

*** Starting uWSGI 2.0.20 (64bit) on [x] ***
*** Operational MODE: preforking ***
mounting hello:app on /
spawned uWSGI master process (pid: x)
spawned uWSGI worker 1 (pid: x, cores: 1)
spawned uWSGI worker 2 (pid: x, cores: 1)
spawned uWSGI worker 3 (pid: x, cores: 1)
spawned uWSGI worker 4 (pid: x, cores: 1)
spawned uWSGI http 1 (pid: x)
```

----------------------------------------

TITLE: Werkzeug Test Client and Flask Response API Reference
DESCRIPTION: Reference for key methods and attributes of Werkzeug's test client and Flask's Response object, commonly used in Flask application testing to simulate requests and inspect responses.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_12

LANGUAGE: APIDOC
CODE:
```
werkzeug.test.Client:
  get(): Makes a GET request to the application. Returns a Flask Response object.
  post(data: dict): Makes a POST request to the application, converting the 'data' dictionary into form data. Returns a Flask Response object.

flask.Response:
  status_code: int - The HTTP status code of the response (e.g., 200 OK, 500 Internal Server Error).
  headers: dict - HTTP headers of the response. Useful for checking redirects via the 'Location' header.
  data: bytes - The raw body of the response as bytes.
  get_data(as_text: bool = False): bytes | str - Returns the response body. If 'as_text' is True, returns the body as a string; otherwise, returns as bytes.
```

----------------------------------------

TITLE: Generic Flask SQLite Query Function
DESCRIPTION: Provides a reusable `query_db` function that handles getting a cursor, executing a query with arguments, fetching results, and closing the cursor. It supports fetching single or multiple results and is designed for safer parameter passing.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#_snippet_6

LANGUAGE: Python
CODE:
```
def query_db(query, args=(), one=False):
    cur = get_db().execute(query, args)
    rv = cur.fetchall()
    cur.close()
    return (rv[0] if rv else None) if one else rv
```

----------------------------------------

TITLE: Logging User Actions in a Flask Route
DESCRIPTION: Demonstrates how to use `app.logger` within a Flask route to log user login attempts, both successful and failed, providing context about the user and the outcome of the authentication process.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#_snippet_0

LANGUAGE: python
CODE:
```
@app.route('/login', methods=['POST'])
def login():
    user = get_user(request.form['username'])

    if user.check_password(request.form['password']):
        login_user(user)
        app.logger.info('%s logged in successfully', user.username)
        return redirect(url_for('index'))
    else:
        app.logger.info('%s failed to log in', user.username)
        abort(401)
```

----------------------------------------

TITLE: Jinja2 Template for Flask Blog Post Listing
DESCRIPTION: This Jinja2 template renders a list of blog posts. It extends a base template, sets the page title to 'Posts', and conditionally displays a 'New' post link if a user is logged in. For each post, it shows the title, author, creation date, and body. An 'Edit' link is displayed next to a post if the logged-in user is the author. A horizontal rule separates posts.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/flaskr/templates/blog/index.html#_snippet_0

LANGUAGE: Jinja2
CODE:
```
{% extends 'base.html' %}
{% block header %}

{% block title %}Posts{% endblock %}
====================================

{% if g.user %} [New]({{ url_for('blog.create') }}) {% endif %}
{% endblock %}
{% block content %}
{% for post in posts %}

{{ post['title'] }}
=====================

by {{ post['username'] }} on {{ post['created'].strftime('%Y-%m-%d') }}

{% if g.user['id'] == post['author_id'] %} [Edit]({{ url_for('blog.update', id=post['id']) }}) {% endif %}

{{ post['body'] }}

{% if not loop.last %}

* * *

{% endif %}
{% endfor %}
{% endblock %}
```

----------------------------------------

TITLE: Flaskr Base HTML Layout Template
DESCRIPTION: This Jinja2 template defines the foundational HTML structure for the Flaskr application. It includes a dynamic title, a navigation bar that adapts based on user login status (displaying username or login/register links), and a section for displaying flashed messages. It establishes three key blocks (title, header, content) that child templates can extend and override to customize page-specific content.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/templates.rst#_snippet_0

LANGUAGE: html+jinja
CODE:
```
<!doctype html>
<title>{% block title %}{% endblock %} - Flaskr</title>
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
<nav>
  <h1>Flaskr</h1>
  <ul>
    {% if g.user %}
      <li><span>{{ g.user['username'] }}</span>
      <li><a href="{{ url_for('auth.logout') }}">Log Out</a>
    {% else %}
      <li><a href="{{ url_for('auth.register') }}">Register</a>
      <li><a href="{{ url_for('auth.login') }}">Log In</a>
    {% endif %}
  </ul>
</nav>
<section class="content">
  <header>
    {% block header %}{% endblock %}
  </header>
  {% for message in get_flashed_messages() %}
    <div class="flash">{{ message }}</div>
  {% endfor %}
  {% block content %}{% endblock %}
</section>
```

----------------------------------------

TITLE: Mitigating Clickjacking with X-Frame-Options in Flask
DESCRIPTION: Sets the X-Frame-Options header to prevent external sites from embedding the application in an iframe, protecting against clickjacking attacks. 'SAMEORIGIN' allows embedding only by pages from the same origin.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_7

LANGUAGE: Python
CODE:
```
response.headers['X-Frame-Options'] = 'SAMEORIGIN'
```

----------------------------------------

TITLE: Loading Flask Config from Python Object and Env Var - Python
DESCRIPTION: Demonstrates loading configuration from a default Python module (`yourapplication.default_settings`) and then overriding those settings with values from a configuration file specified by the `YOURAPPLICATION_SETTINGS` environment variable.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_5

LANGUAGE: Python
CODE:
```
app = Flask(__name__)
app.config.from_object('yourapplication.default_settings')
app.config.from_envvar('YOURAPPLICATION_SETTINGS')
```

----------------------------------------

TITLE: Render Jinja2 Templates in Flask
DESCRIPTION: Shows how to use Flask's `render_template` function to serve dynamic HTML pages. It demonstrates passing Python variables as keyword arguments to a Jinja2 template, enabling personalized content based on URL parameters or other application data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_12

LANGUAGE: python
CODE:
```
from flask import render_template

@app.route('/hello/')
@app.route('/hello/<name>')
def hello(name=None):
    return render_template('hello.html', person=name)
```

----------------------------------------

TITLE: Pass Minimal Data to Celery Tasks (User ID Example)
DESCRIPTION: This snippet illustrates the best practice for passing data to Celery tasks: pass only the minimal, serializable data required to re-fetch or recreate complex objects within the task itself. Instead of passing a non-serializable SQLAlchemy user object, the example passes only the `user_id`, allowing the task to query the database for the user object independently. This prevents serialization issues and ensures task robustness.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#_snippet_12

LANGUAGE: python
CODE:
```
@shared_task
def generate_user_archive(user_id: str) -> None:
    user = db.session.get(User, user_id)
    ...

generate_user_archive.delay(current_user.id)
```

----------------------------------------

TITLE: Flask Cookies: Reading from Request
DESCRIPTION: Shows how to read cookies sent by the client using `request.cookies.get()`. It emphasizes using `.get()` to avoid `KeyError` if the cookie is missing.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_22

LANGUAGE: python
CODE:
```
from flask import request

@app.route('/')
def index():
    username = request.cookies.get('username')
    # use cookies.get(key) instead of cookies[key] to not get a
    # KeyError if the cookie is missing.
```

----------------------------------------

TITLE: Flask Cookies: Storing on Response
DESCRIPTION: Demonstrates how to set a cookie on the client's browser by using `make_response` and `resp.set_cookie()`. Cookies are set on the response object before it's returned.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_23

LANGUAGE: python
CODE:
```
from flask import make_response

@app.route('/')
def index():
    resp = make_response(render_template(...))
    resp.set_cookie('username', 'the username')
    return resp
```

----------------------------------------

TITLE: Flask Request Handling Lifecycle Steps and API References
DESCRIPTION: A detailed, numbered breakdown of the 27 steps involved in Flask's request processing, including the creation and popping of application and request contexts, URL routing, session management, signal dispatching, and error handling, with explicit references to relevant Flask methods, classes, attributes, and signals.
SOURCE: https://github.com/pallets/flask/blob/main/docs/lifecycle.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
1. WSGI server calls Flask object:
   - Method: Flask.wsgi_app()
2. Context Creation:
   - Class: RequestContext (converts WSGI environ to Request object)
   - Class: Request
   - Class: AppContext
3. App Context Pushed:
   - Data: current_app (available)
   - Data: g (available)
4. Signal: appcontext_pushed sent
5. Request Context Pushed:
   - Attribute: request (available)
   - Class: session (available)
6. Session Opened:
   - Attribute: Flask.session_interface (instance of SessionInterface)
   - Class: SessionInterface
7. URL Matching:
   - Method: Flask.route() (decorator for URL rules)
   - Error handling for no match (404, 405, redirect)
8. Signal: request_started sent
9. URL Value Preprocessors:
   - Method: Flask.url_value_preprocessor() (decorated functions called)
10. Before Request Functions:
    - Method: Flask.before_request() (decorated functions called; can return response)
11. Error Raising (if URL didn't match)
12. View Function Called:
    - Method: Flask.route() (decorated view function)
13. Error Handling (if exception raised):
    - Method: Flask.errorhandler() (decorated functions called)
14. Response Conversion:
    - Class: Response (value converted to Response object)
15. After This Request Functions:
    - Function: after_this_request() (decorated functions called, then cleared)
16. After Request Functions:
    - Method: Flask.after_request() (decorated functions called; can modify response)
17. Session Saved:
    - Attribute: Flask.session_interface (used for persisting data)
18. Signal: request_finished sent
19. Unhandled Exception Handling:
    - HTTP exceptions -> corresponding status code
    - Other exceptions -> generic 500 response
    - Signal: got_request_exception sent
20. Response Returned to WSGI Server (status, headers, body)
21. Teardown Request Functions:
    - Method: Flask.teardown_request() (decorated functions called)
22. Signal: request_tearing_down sent
23. Request Context Popped:
    - Attribute: request (no longer available)
    - Class: session (no longer available)
24. Teardown App Context Functions:
    - Method: Flask.teardown_appcontext() (decorated functions called)
25. Signal: appcontext_tearing_down sent
26. App Context Popped:
    - Data: current_app (no longer available)
    - Data: g (no longer available)
27. Signal: appcontext_popped sent
```

----------------------------------------

TITLE: Testing Flask Request Context with Manual Preprocessing
DESCRIPTION: This Python snippet demonstrates how to use `app.test_request_context` to simulate a request for testing. It shows that `before_request` functions are not automatically called, and how `app.preprocess_request()` can be manually invoked to run these functions, allowing access to context-dependent variables like `g.user`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_11

LANGUAGE: python
CODE:
```
def test_auth_token(app):
    with app.test_request_context("/user/2/edit", headers={"X-Auth-Token": "1"}):
        app.preprocess_request()
        assert g.user.name == "Flask"
```

----------------------------------------

TITLE: Receive JSON Data in Flask Views
DESCRIPTION: This Python Flask view demonstrates how to access incoming JSON data from a client request. It uses the `request.json` property to automatically parse the request body as JSON. This requires the client to send the `Content-Type: application/json` header, otherwise a 400 Bad Request error will be raised.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_12

LANGUAGE: python
CODE:
```
from flask import request

@app.post("/user/<int:id>")
def user_update(id):
    user = User.query.get_or_404(id)
    user.update_from_json(request.json)
    db.session.commit()
    return user.to_json()
```

----------------------------------------

TITLE: Flask: Custom 404 Page Not Found Error Handler
DESCRIPTION: This Python snippet shows how to define a custom error handler for 404 Not Found errors at the application level using the `@app.errorhandler` decorator. It renders a specific '404.html' template and explicitly sets the HTTP status code to 404.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_8

LANGUAGE: python
CODE:
```
from flask import render_template

@app.errorhandler(404)
def page_not_found(e):
    # note that we set the 404 status explicitly
    return render_template('404.html'), 404
```

----------------------------------------

TITLE: Test Flask Post Deletion
DESCRIPTION: This Python test verifies the deletion of a blog post. It logs in, sends a POST request to the delete endpoint for post ID 1, asserts that the response redirects to the index URL, and then confirms the post is no longer present in the database.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_20

LANGUAGE: python
CODE:
```
def test_delete(client, auth, app):
    auth.login()
    response = client.post('/1/delete')
    assert response.headers["Location"] == "/"

    with app.app_context():
        db = get_db()
        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()
        assert post is None
```

----------------------------------------

TITLE: Test Flask Application Configuration and Hello Route
DESCRIPTION: Tests the Flask application's configuration, ensuring the 'TESTING' flag works correctly, and verifies a basic 'hello' route returns the expected 'Hello, World!' response using the test client.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_7

LANGUAGE: python
CODE:
```
from flaskr import create_app


def test_config():
    assert not create_app().testing
    assert create_app({'TESTING': True}).testing


def test_hello(client):
    response = client.get('/hello')
    assert response.data == b'Hello, World!'
```

----------------------------------------

TITLE: Enable Debug Mode for Flask Application
DESCRIPTION: This command shows how to run the Flask application in debug mode using the '--debug' option. Debug mode automatically reloads the server on code changes and provides an interactive debugger in the browser for errors. It also displays a debugger PIN. Debug mode should never be used in a production environment due to security vulnerabilities.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_3

LANGUAGE: text
CODE:
```
$ flask --app hello run --debug
 * Serving Flask app 'hello'
 * Debug mode: on
 * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: nnn-nnn-nnn
```

----------------------------------------

TITLE: Initialize Flask database on production
DESCRIPTION: Command to run the 'init-db' function of the Flask application, which creates the necessary database tables in the instance folder on the production server. This step is crucial for applications requiring a database.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#_snippet_3

LANGUAGE: shell
CODE:
```
$ flask --app flaskr init-db
```

----------------------------------------

TITLE: Test Blog Post Access Control in Flask with Pytest
DESCRIPTION: This set of tests validates access control for blog post management. `test_login_required` ensures unauthenticated users are redirected to the login page for create, update, and delete actions. `test_author_required` verifies that only the post's author can modify or delete it, returning a 403 Forbidden status otherwise. `test_exists_required` checks that a 404 Not Found status is returned if an attempt is made to access or modify a non-existent post.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_16

LANGUAGE: python
CODE:
```
@pytest.mark.parametrize('path', (
    '/create',
    '/1/update',
    '/1/delete',
))
def test_login_required(client, path):
    response = client.post(path)
    assert response.headers["Location"] == "/auth/login"


def test_author_required(app, client, auth):
    # change the post author to another user
    with app.app_context():
        db = get_db()
        db.execute('UPDATE post SET author_id = 2 WHERE id = 1')
        db.commit()

    auth.login()
    # current user can't modify other user's post
    assert client.post('/1/update').status_code == 403
    assert client.post('/1/delete').status_code == 403
    # current user doesn't see edit link
    assert b'href="/1/update"' not in client.get('/').data


@pytest.mark.parametrize('path', (
    '/2/update',
    '/2/delete',
))
def test_exists_required(client, auth, path):
    auth.login()
    assert client.post(path).status_code == 404
```

----------------------------------------

TITLE: Configure uWSGI with Flask app factory pattern
DESCRIPTION: This snippet illustrates how to run uWSGI with a Flask application that uses the app factory pattern. It includes a Python file (`wsgi.py`) to create the application instance and the corresponding `uwsgi` command to point to this file.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/uwsgi.rst#_snippet_3

LANGUAGE: python
CODE:
```
from hello import create_app

app = create_app()
```

LANGUAGE: text
CODE:
```
$ uwsgi --http 127.0.0.1:8000 --master -p 4 -w wsgi:app
```

----------------------------------------

TITLE: Initialize Celery application with Flask context
DESCRIPTION: Defines a `celery_init_app` function that creates and configures a Celery app, integrating it with Flask's application context and configuration. This ensures Flask services like database connections are available within Celery tasks.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#_snippet_1

LANGUAGE: python
CODE:
```
from celery import Celery, Task

def celery_init_app(app: Flask) -> Celery:
    class FlaskTask(Task):
        def __call__(self, *args: object, **kwargs: object) -> object:
            with app.app_context():
                return self.run(*args, **kwargs)

    celery_app = Celery(app.name, task_cls=FlaskTask)
    celery_app.config_from_object(app.config["CELERY"])
    celery_app.set_default()
    app.extensions["celery"] = celery_app
    return celery_app
```

----------------------------------------

TITLE: Bind Gunicorn to all external IPs
DESCRIPTION: Illustrates how to configure Gunicorn to listen on all available network interfaces (0.0.0.0) on a non-privileged port (e.g., 8000). This is useful when Gunicorn is not behind a reverse proxy, but generally not recommended for production if a proxy is used, to prevent bypassing the proxy.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#_snippet_2

LANGUAGE: shell
CODE:
```
$ gunicorn -w 4 -b 0.0.0.0 'hello:create_app()'
```

----------------------------------------

TITLE: Flaskr Jinja2 Base Template with User Authentication and Messages
DESCRIPTION: This Jinja2 template defines the core structure for Flaskr web pages. It includes conditional rendering for user login status (displaying username, logout, register, or login links) and iterates through `get_flashed_messages()` to show system notifications. It also sets up extensible blocks for `title`, `header`, and `content`.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/flaskr/templates/base.html#_snippet_0

LANGUAGE: Jinja2
CODE:
```
{% block title %}{% endblock %} - Flaskr 

[Flaskr]({{ url_for\('index'\) }})
==================================

{% if g.user %}*   {{ g.user\['username'\] }}
*   [Log Out]({{ url_for\('auth.logout'\) }}) {% else %}
*   [Register]({{ url_for\('auth.register'\) }})
*   [Log In]({{ url_for\('auth.login'\) }}) {% endif %}

{% block header %}{% endblock %}

{% for message in get\_flashed\_messages() %}

{{ message }}

{% endfor %} {% block content %}{% endblock %}
```

----------------------------------------

TITLE: Flashing Messages with Specific Categories in Flask
DESCRIPTION: This Python snippet demonstrates how to use the `flash` function to associate a category with a message. By providing a second argument, such as 'error', messages can be categorized for different styling or handling in the template.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/flashing.rst#_snippet_4

LANGUAGE: Python
CODE:
```
flash('Invalid password provided', 'error')
```

----------------------------------------

TITLE: Flask Class-based View Handling URL Variables
DESCRIPTION: Shows a `DetailView` class designed to handle URL variables. The `id` captured from the URL is passed as a keyword argument to the `dispatch_request` method, allowing the view to fetch a specific item based on its ID.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#_snippet_4

LANGUAGE: python
CODE:
```
class DetailView(View):
    def __init__(self, model):
        self.model = model
        self.template = f"{model.__name__.lower()}/detail.html"

    def dispatch_request(self, id):
        item = self.model.query.get_or_404(id)
        return render_template(self.template, item=item)

app.add_url_rule(
    "/users/<int:id>",
    view_func=DetailView.as_view("user_detail", User)
)
```

----------------------------------------

TITLE: Run Flask with External Debugger (Python)
DESCRIPTION: This Python snippet demonstrates how to configure the Flask application for use with an external debugger. It enables debug mode but disables the built-in debugger and reloader to avoid interference, providing a cleaner debugging experience.
SOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#_snippet_3

LANGUAGE: python
CODE:
```
app.run(debug=True, use_debugger=False, use_reloader=False)
```

----------------------------------------

TITLE: Query User Data from SQLAlchemy Declarative Database
DESCRIPTION: This interactive Python snippet demonstrates basic querying operations on the User model using SQLAlchemy's declarative approach. It shows how to retrieve all users and how to filter users based on a specific condition, such as the user's name.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_5

LANGUAGE: Python
CODE:
```
User.query.all()
User.query.filter(User.name == 'admin').first()
```

----------------------------------------

TITLE: Insert New User Data into SQLAlchemy Declarative Database
DESCRIPTION: This interactive Python example shows the process of adding new data to the database using SQLAlchemy's declarative models. It creates a User instance, adds it to the db_session, and then commits the session to persist the changes to the database.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from yourapplication.database import db_session
from yourapplication.models import User
u = User('admin', 'admin@localhost')
db_session.add(u)
db_session.commit()
```

----------------------------------------

TITLE: Install Sentry SDK for Flask
DESCRIPTION: Install the `sentry-sdk` client with its Flask-specific dependencies using pip to enable error reporting.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_0

LANGUAGE: text
CODE:
```
$ pip install sentry-sdk[flask]
```

----------------------------------------

TITLE: Run Flask Development Server in Debug Mode (CLI)
DESCRIPTION: This command-line snippet demonstrates how to start the Flask development server with debug mode enabled, which activates the built-in Werkzeug debugger. This setup is intended for development environments only due to security implications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#_snippet_0

LANGUAGE: text
CODE:
```
$ flask --app hello run --debug
```

----------------------------------------

TITLE: Running Flask App with Debug Mode - Shell
DESCRIPTION: Command line example showing how to start a Flask development server with debug mode enabled using the `flask run` command.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_3

LANGUAGE: text
CODE:
```
$ flask --app hello run --debug
```

----------------------------------------

TITLE: Flask RuntimeError: Working Outside Application Context
DESCRIPTION: This traceback illustrates the common `RuntimeError` encountered when attempting to access Flask functionality that requires an active application context outside of one. It advises setting up a context using `app.app_context()` to resolve the issue.
SOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#_snippet_0

LANGUAGE: pytb
CODE:
```
RuntimeError: Working outside of application context.

    This typically means that you attempted to use functionality that
    needed to interface with the current application object in some way.
    To solve this, set up an application context with app.app_context().
```

----------------------------------------

TITLE: Run Gunicorn with Flask application module or app factory
DESCRIPTION: Demonstrates how to start Gunicorn, specifying the Flask application entry point. You can use either a module and app variable (e.g., 'hello:app') or an app factory function (e.g., 'hello:create_app()'). The '-w' option sets the number of worker processes, typically 'CPU * 2'.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#_snippet_1

LANGUAGE: shell
CODE:
```
# equivalent to 'from hello import app'
$ gunicorn -w 4 'hello:app'
```

LANGUAGE: shell
CODE:
```
# equivalent to 'from hello import create_app; create_app()'
$ gunicorn -w 4 'hello:create_app()'
```

----------------------------------------

TITLE: APIDOC: Flask `TESTING` Configuration Flag
DESCRIPTION: Documentation for the `TESTING` configuration flag in Flask. When set to `True`, it indicates that the application is running in test mode, which can alter internal Flask behavior and affect how extensions operate to facilitate testing.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
app.config['TESTING'] = True
  Description: A boolean flag that enables test mode for the Flask application.
  Effect: Modifies Flask's internal behavior and can be used by extensions to simplify testing.
```

----------------------------------------

TITLE: Examples of Templating Decorator Usage in Flask
DESCRIPTION: Illustrates the usage of a templating decorator that automatically renders a template based on the view function's return value (a dictionary). It shows three equivalent ways to render a template: direct `render_template`, using `@templated('index.html')`, and using `@templated()` which infers the template name from the endpoint.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#_snippet_4

LANGUAGE: python
CODE:
```
@app.route('/')
def index():
    return render_template('index.html', value=42)

@app.route('/')
@templated('index.html')
def index():
    return dict(value=42)

@app.route('/')
@templated()
def index():
    return dict(value=42)
```

----------------------------------------

TITLE: Run Flask Development Server in Debug Mode (Python)
DESCRIPTION: This Python code snippet shows how to enable debug mode for the Flask application when running it programmatically. Setting 'debug=True' activates the built-in debugger and other development features, suitable only for development environments.
SOURCE: https://github.com/pallets/flask/blob/main/docs/debugging.rst#_snippet_1

LANGUAGE: python
CODE:
```
app.run(debug=True)
```

----------------------------------------

TITLE: Apply Login Required Decorator to Flask View
DESCRIPTION: Demonstrates how to apply the `login_required` decorator to a Flask view function. It shows that `login_required` should be the innermost decorator when multiple decorators are used, with `@app.route` being the outermost.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#_snippet_1

LANGUAGE: python
CODE:
```
@app.route('/secret_page')
@login_required
def secret_page():
    pass
```

----------------------------------------

TITLE: Incorrect Flask Extension Initialization in Factory
DESCRIPTION: Shows an example of an incorrect way to initialize a Flask extension (Flask-SQLAlchemy) within an application factory. Binding the extension directly to the app (`SQLAlchemy(app)`) prevents the extension object from being reusable across multiple application instances.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#_snippet_2

LANGUAGE: python
CODE:
```
db = SQLAlchemy(app)
```

----------------------------------------

TITLE: Flask Endpoint for Serving Uploaded Files
DESCRIPTION: This code defines a Flask route (/uploads/<name>) to serve uploaded files from the configured UPLOAD_FOLDER. It utilizes the flask.send_from_directory function to safely send files, which is crucial for preventing directory traversal attacks when users request files by name, ensuring only files within the designated upload directory are accessible.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from flask import send_from_directory

@app.route('/uploads/<name>')
def download_file(name):
    return send_from_directory(app.config["UPLOAD_FOLDER"], name)
```

----------------------------------------

TITLE: Jinja2 Template for Editing a Post
DESCRIPTION: This Jinja2 template defines the HTML structure for an 'edit post' page within a Flask application. It extends a base layout, dynamically sets the page title using the post's current title, and provides form fields for the post's title and body. The body field is pre-populated with either submitted form data or the existing post's body.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/flaskr/templates/blog/update.html#_snippet_0

LANGUAGE: Jinja2
CODE:
```
{% extends 'base.html' %} {% block header %}

{% block title %}Edit "{{ post['title'] }}"{% endblock %}
===========================================================

{% endblock %} {% block content %}

Title  Body {{ request.form['body'] or post['body'] }} 

* * *

{% endblock %}
```

----------------------------------------

TITLE: Remove SQLAlchemy Session in Flask Application Teardown
DESCRIPTION: This Flask application snippet demonstrates how to properly manage SQLAlchemy sessions by integrating session removal into the application's teardown context. The @app.teardown_appcontext decorator ensures that the database session is automatically closed at the end of each request or when the application shuts down, preventing resource leaks.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from yourapplication.database import db_session

@app.teardown_appcontext
def shutdown_session(exception=None):
    db_session.remove()
```

----------------------------------------

TITLE: Define a Celery Shared Task to Add Numbers
DESCRIPTION: This snippet demonstrates how to define a simple Celery task using the `@shared_task` decorator. The `add_together` task takes two integers, adds them, and returns the sum. The `ignore_result=False` setting ensures that the task's return value can be retrieved later, overriding the default Celery configuration.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#_snippet_9

LANGUAGE: python
CODE:
```
from celery import shared_task

@shared_task(ignore_result=False)
def add_together(a: int, b: int) -> int:
    return a + b
```

----------------------------------------

TITLE: Nginx Reverse Proxy Configuration for WSGI
DESCRIPTION: This Nginx server block configures a reverse proxy. It listens on port 80 and forwards all incoming requests to a WSGI application running on `http://127.0.0.1:8000`. Essential `X-Forwarded-*` headers are set to pass client information to the backend application, which is crucial for correct request processing and logging.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/nginx.rst#_snippet_1

LANGUAGE: nginx
CODE:
```
server {
    listen 80;
    server_name _;

    location / {
        proxy_pass http://127.0.0.1:8000/;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Prefix /;
    }
}
```

----------------------------------------

TITLE: Run Flask Application with Flask CLI
DESCRIPTION: This command uses the Flask command-line interface to run the application. The '--app yourapplication' option tells Flask where to find the application instance within the 'yourapplication' package, allowing it to start the development server.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#_snippet_2

LANGUAGE: text
CODE:
```
$ flask --app yourapplication run
```

----------------------------------------

TITLE: Generate Test Coverage Report for Flaskr
DESCRIPTION: Commands to run tests with coverage, generate a summary report, and produce an HTML report for detailed analysis of code coverage.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#_snippet_7

LANGUAGE: bash
CODE:
```
$ coverage run -m pytest
$ coverage report
$ coverage html
```

----------------------------------------

TITLE: Define Flask Blog Blueprint
DESCRIPTION: This snippet defines the 'blog' Blueprint in `flaskr/blog.py`, importing necessary Flask modules like Blueprint, flash, g, redirect, render_template, request, url_for, and werkzeug.exceptions.abort. It also imports `login_required` from `auth` and `get_db` for database interaction, setting up the blueprint object for blog-related views.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_0

LANGUAGE: python
CODE:
```
from flask import (
    Blueprint, flash, g, redirect, render_template, request, url_for
)
from werkzeug.exceptions import abort

from flaskr.auth import login_required
from flaskr.db import get_db

bp = Blueprint('blog', __name__)
```

----------------------------------------

TITLE: Jinja Template Example for JSON Data Rendering
DESCRIPTION: This example demonstrates how to safely render Python data as JSON within an HTML `<script>` tag using Jinja's `|tojson` filter. The filter ensures proper escaping for JavaScript consumption.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_12

LANGUAGE: HTML+Jinja
CODE:
```
<script>
    const names = {{ names|tojson }};
    renderChart(names, {{ axis_data|tojson }});
</script>
```

----------------------------------------

TITLE: Create Jinja2 Macro for WTForms Field Rendering
DESCRIPTION: This Jinja2 macro, `render_field`, simplifies rendering individual WTForms fields in templates. It generates the field's label, the field itself (with optional HTML attributes via `kwargs`), and a list of validation errors if present, ensuring proper HTML escaping.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#_snippet_2

LANGUAGE: html+jinja
CODE:
```
{% macro render_field(field) %}
  <dt>{{ field.label }}
  <dd>{{ field(**kwargs)|safe }}
  {% if field.errors %}
    <ul class=errors>
    {% for error in field.errors %}
      <li>{{ error }}</li>
    {% endfor %}
    </ul>
  {% endif %}
  </dd>
{% endmacro %}
```

----------------------------------------

TITLE: Define Flask Authentication Helper Class and Pytest Fixture
DESCRIPTION: Defines an `AuthActions` class to encapsulate common authentication operations like login and logout using a Flask test client. A Pytest fixture `auth` is provided to easily access these actions in tests, simplifying authentication setup.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_10

LANGUAGE: python
CODE:
```
class AuthActions(object):
    def __init__(self, client):
        self._client = client

    def login(self, username='test', password='test'):
        return self._client.post(
            '/auth/login',
            data={'username': username, 'password': password}
        )

    def logout(self):
        return self._client.get('/auth/logout')


@pytest.fixture
def auth(client):
    return AuthActions(client)
```

----------------------------------------

TITLE: Define WTForms Registration Form Class
DESCRIPTION: This Python class defines a registration form using WTForms, specifying fields like username, email, password, and terms of service acceptance, along with validators for length, data presence, and password matching.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#_snippet_0

LANGUAGE: python
CODE:
```
from wtforms import Form, BooleanField, StringField, PasswordField, validators

class RegistrationForm(Form):
    username = StringField('Username', [validators.Length(min=4, max=25)])
    email = StringField('Email Address', [validators.Length(min=6, max=35)])
    password = PasswordField('New Password', [
        validators.DataRequired(),
        validators.EqualTo('confirm', message='Passwords must match')
    ])
    confirm = PasswordField('Repeat Password')
    accept_tos = BooleanField('I accept the TOS', [validators.DataRequired()])
```

----------------------------------------

TITLE: Access Flask Session in Tests
DESCRIPTION: This Python snippet shows how to access Flask's session object within a test using the client in a `with` statement. The application and request contexts remain active throughout the block, allowing session inspection after a request.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_6

LANGUAGE: python
CODE:
```
from flask import session

def test_access_session(client):
    with client:
        client.post("/auth/login", data={"username": "flask"})
        # session is still accessible
        assert session["user_id"] == 1

    # session is no longer accessible
```

----------------------------------------

TITLE: Identify Process Using Port 5000
DESCRIPTION: Commands to identify the process ID (PID) that is currently using port 5000, which can cause an `OSError` when the Flask development server tries to start. This helps in troubleshooting 'Address already in use' errors.
SOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#_snippet_1

LANGUAGE: text
CODE:
```
$ netstat -nlp | grep 5000
```

LANGUAGE: text
CODE:
```
$ lsof -P -i :5000
```

LANGUAGE: text
CODE:
```
> netstat -ano | findstr 5000
```

----------------------------------------

TITLE: Implement Caching Decorator for Flask Views
DESCRIPTION: This decorator caches the results of an expensive view function for a specified timeout. It generates a cache key based on the request path, retrieves cached data if available, or calls the original function and stores its result in the cache. It assumes an instantiated `cache` object is available.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#_snippet_3

LANGUAGE: python
CODE:
```
from functools import wraps
from flask import request

def cached(timeout=5 * 60, key='view/{}'):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            cache_key = key.format(request.path)
            rv = cache.get(cache_key)
            if rv is not None:
                return rv
            rv = f(*args, **kwargs)
            cache.set(cache_key, rv, timeout=timeout)
            return rv
        return decorated_function
    return decorator
```

----------------------------------------

TITLE: Generate URLs in JavaScript using Flask url_for
DESCRIPTION: This JavaScript snippet demonstrates how to generate a URL on the server-side using Flask's `url_for` function within a Jinja template. The generated URL is then made available to client-side JavaScript for use with `fetch` requests.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_3

LANGUAGE: javascript
CODE:
```
const user_url = {{ url_for("user", id=current_user.id)|tojson }}
fetch(user_url).then(...)
```

----------------------------------------

TITLE: Test Flask User Registration View and Input Validation
DESCRIPTION: Tests the user registration view, verifying successful rendering on GET requests, redirection to login on valid POST data, and proper storage of user data in the database. It also includes parameterized tests for invalid input scenarios and expected error messages.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_11

LANGUAGE: python
CODE:
```
import pytest
from flask import g, session
from flaskr.db import get_db


def test_register(client, app):
    assert client.get('/auth/register').status_code == 200
    response = client.post(
        '/auth/register', data={'username': 'a', 'password': 'a'}
    )
    assert response.headers["Location"] == "/auth/login"

    with app.app_context():
        assert get_db().execute(
            "SELECT * FROM user WHERE username = 'a'",
        ).fetchone() is not None


@pytest.mark.parametrize(('username', 'password', 'message'), (
    ('', '', b'Username is required.'),
    ('a', '', b'Password is required.'),
    ('test', 'test', b'already registered'),
))
def test_register_validate_input(client, username, password, message):
    response = client.post(
        '/auth/register',
        data={'username': username, 'password': password}
    )
    assert message in response.data
```

----------------------------------------

TITLE: Generate Terminal Code Coverage Report
DESCRIPTION: This command displays a concise code coverage report directly in the terminal. It provides statistics for each file, including the number of statements, missed lines, branches, and the overall coverage percentage, offering a quick overview of test coverage.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_25

LANGUAGE: none
CODE:
```
$ coverage report
```

----------------------------------------

TITLE: Flask: Helper Function to Get Blog Post by ID
DESCRIPTION: This Python function retrieves a blog post from the database by its ID. It includes error handling to abort with a 404 status if the post doesn't exist and a 403 status if `check_author` is true and the logged-in user is not the post's author. This function is designed to be reusable across update and delete views.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_7

LANGUAGE: python
CODE:
```
def get_post(id, check_author=True):
        post = get_db().execute(
            'SELECT p.id, title, body, created, author_id, username'
            ' FROM post p JOIN user u ON p.author_id = u.id'
            ' WHERE p.id = ?',
            (id,)
        ).fetchone()

        if post is None:
            abort(404, f"Post id {id} doesn't exist.")

        if check_author and post['author_id'] != g.user['id']:
            abort(403)

        return post
```

----------------------------------------

TITLE: Applying WSGI Middleware to Flask Applications
DESCRIPTION: To integrate WSGI middleware, such as Werkzeug's `ProxyFix`, wrap the `app.wsgi_app` attribute. This approach ensures that the original `app` object remains accessible for direct configuration, while the middleware processes requests.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_32

LANGUAGE: python
CODE:
```
from werkzeug.middleware.proxy_fix import ProxyFix
app.wsgi_app = ProxyFix(app.wsgi_app)
```

----------------------------------------

TITLE: Initialize SQLAlchemy Declarative Base and Session in Flask
DESCRIPTION: This Python snippet sets up the core SQLAlchemy components for a Flask application using the declarative style. It initializes the database engine, creates a scoped session for thread-safe database access, and defines a declarative base class for models. The init_db function is provided to create all defined tables in the database.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker, declarative_base

engine = create_engine('sqlite:////tmp/test.db')
db_session = scoped_session(sessionmaker(autocommit=False,
                                             autoflush=False,
                                             bind=engine))
Base = declarative_base()
Base.query = db_session.query_property()

def init_db():
    # import all modules here that might define models so that
    # they will be registered properly on the metadata.  Otherwise
    # you will have to import them first before calling init_db()
    import yourapplication.models
    Base.metadata.create_all(bind=engine)
```

----------------------------------------

TITLE: Configure Apache httpd as Reverse Proxy for WSGI
DESCRIPTION: This configuration snippet for `httpd.conf` sets up Apache httpd to act as a reverse proxy for a WSGI application. It loads necessary proxy modules (`mod_proxy`, `mod_proxy_http`), forwards all requests to a local WSGI server running on `http://127.0.0.1:8000`, and sets `X-Forwarded` headers for proper application handling.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/apache-httpd.rst#_snippet_1

LANGUAGE: apache
CODE:
```
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
ProxyPass / http://127.0.0.1:8000/
RequestHeader set X-Forwarded-Proto http
RequestHeader set X-Forwarded-Prefix /
```

----------------------------------------

TITLE: Flask send_from_directory Function
DESCRIPTION: Documentation for the flask.send_from_directory function, used to safely serve files from a specified directory. This function is essential for creating download endpoints while mitigating security risks by ensuring only files within the designated directory are accessible.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
flask.send_from_directory(directory: str, path: str, **options) -> flask.Response
  directory: str - The directory from which to send the file.
  path: str - The filename or path relative to the directory to send.
  options: dict - Additional options for sending the file (e.g., as_attachment=True, mimetype='image/png').
  Returns: flask.Response - A response object that serves the file.
  Description: Sends a file from a given directory, ensuring security by preventing access to files outside the specified directory.
```

----------------------------------------

TITLE: Creating and Pushing a Flask Request Context
DESCRIPTION: Demonstrates how to initialize a Flask request context using `app.test_request_context()` and then manually push it onto the context stack with `ctx.push()`. This allows access to request-dependent objects like `flask.request` and `flask.g` within an interactive shell session.
SOURCE: https://github.com/pallets/flask/blob/main/docs/shell.rst#_snippet_0

LANGUAGE: Python
CODE:
```
ctx = app.test_request_context()
ctx.push()
```

----------------------------------------

TITLE: Run Pytest Tests from Terminal
DESCRIPTION: This command executes all discovered pytest tests in the project. It automatically finds and runs test functions, providing a summary of test results, including the number of passed tests and their distribution across test files.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_22

LANGUAGE: none
CODE:
```
$ pytest
```

----------------------------------------

TITLE: Define a Simple Jinja2 Macro for Greetings
DESCRIPTION: This Jinja2 macro, named 'hello', accepts a single argument 'name'. It generates a personalized greeting string, demonstrating how to create reusable components in templates to reduce code repetition and improve maintainability in Flask applications.
SOURCE: https://github.com/pallets/flask/blob/main/tests/templates/_macro.html#_snippet_0

LANGUAGE: Jinja2
CODE:
```
{% macro hello(name) %}Hello {{ name }}!{% endmacro %}
```

----------------------------------------

TITLE: Implement Blog Index View in Flask
DESCRIPTION: This Python snippet defines the `index` view for the blog blueprint, accessible at the root URL '/'. It queries the database to fetch all posts, performing a JOIN with the user table to include author information, and orders them by creation date. The fetched posts are then passed to the `blog/index.html` template for rendering.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_2

LANGUAGE: python
CODE:
```
@bp.route('/')
def index():
    db = get_db()
    posts = db.execute(
        'SELECT p.id, title, body, created, author_id, username'
        ' FROM post p JOIN user u ON p.author_id = u.id'
        ' ORDER BY created DESC'
    ).fetchall()
    return render_template('blog/index.html', posts=posts)
```

----------------------------------------

TITLE: Run Flask Application with Waitress WSGI Server
DESCRIPTION: These commands illustrate how to launch a Flask application using `waitress-serve`. The first example shows serving a direct application object, while the second demonstrates using an app factory pattern with the `--call` option. Both examples bind the server to the local loopback address `127.0.0.1`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/waitress.rst#_snippet_1

LANGUAGE: text
CODE:
```
# equivalent to 'from hello import app'
$ waitress-serve --host 127.0.0.1 hello:app

# equivalent to 'from hello import create_app; create_app()'
$ waitress-serve --host 127.0.0.1 --call hello:create_app

Serving on http://127.0.0.1:8080
```

----------------------------------------

TITLE: Flask Application with Repetitive Language Code Handling
DESCRIPTION: Demonstrates a Flask application where each route explicitly handles a language code parameter, leading to repetitive code for assigning it to the global `g` object.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from flask import Flask, g

app = Flask(__name__)

@app.route('/<lang_code>/')
def index(lang_code):
    g.lang_code = lang_code
    ...

@app.route('/<lang_code>/about')
def about(lang_code):
    g.lang_code = lang_code
    ...
```

----------------------------------------

TITLE: Flask: Application-level 404 Handler for Blueprint URL Errors
DESCRIPTION: This Python snippet highlights that 404/405 error handlers defined on blueprints are only triggered by explicit `raise` or `abort` calls within the blueprint's views. For invalid URLs not owned by a blueprint, the handler must be defined at the application level to catch all such errors.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_15

LANGUAGE: python
CODE:
```
from flask import jsonify, render_template

# at the application level
# not the blueprint level
@app.errorhandler(404)
```

----------------------------------------

TITLE: Flask Project Directory Structure
DESCRIPTION: This snippet illustrates the complete recommended directory layout for a larger Flask project. It includes the application package (`flaskr/`), test modules (`tests/`), virtual environment (`.venv/`), and project configuration files.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#_snippet_2

LANGUAGE: none
CODE:
```
/home/user/Projects/flask-tutorial
├── flaskr/
│   ├── __init__.py
│   ├── db.py
│   ├── schema.sql
│   ├── auth.py
│   ├── blog.py
│   ├── templates/
│   │   ├── base.html
│   │   ├── auth/
│   │   │   ├── login.html
│   │   │   └── register.html
│   │   └── blog/
│   │       ├── create.html
│   │       ├── index.html
│   │       └── update.html
│   └── static/
│       └── style.css
├── tests/
│   ├── conftest.py
│   ├── data.sql
│   ├── test_factory.py
│   ├── test_db.py
│   ├── test_auth.py
│   └── test_blog.py
├── .venv/
├── pyproject.toml
└── MANIFEST.in
```

----------------------------------------

TITLE: Define Project Metadata with pyproject.toml
DESCRIPTION: The `pyproject.toml` file is used to describe a Python project and define how it should be built. This example specifies the project's name, version, description, and runtime dependencies, along with the build system requirements for `flit_core`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/install.rst#_snippet_0

LANGUAGE: toml
CODE:
```
[project]
name = "flaskr"
version = "1.0.0"
description = "The basic blog app built in the Flask tutorial."
dependencies = [
    "flask",
]

[build-system]
requires = ["flit_core<4"]
build-backend = "flit_core.buildapi"
```

----------------------------------------

TITLE: Emailing Flask Errors with SMTPHandler
DESCRIPTION: Provides an example of setting up a `logging.handlers.SMTPHandler` to send email notifications for log messages at the ERROR level or higher. This configuration is beneficial for production environments, enabling proactive discovery and resolution of application bugs by alerting administrators via email.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#_snippet_3

LANGUAGE: python
CODE:
```
import logging
from logging.handlers import SMTPHandler

mail_handler = SMTPHandler(
    mailhost='127.0.0.1',
    fromaddr='server-error@example.com',
    toaddrs=['admin@example.com'],
    subject='Application Error'
)
mail_handler.setLevel(logging.ERROR)
mail_handler.setFormatter(logging.Formatter(
    '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'
))

if not app.debug:
    app.logger.addHandler(mail_handler)
```

----------------------------------------

TITLE: Git Ignore Configuration for Flask Project (.gitignore)
DESCRIPTION: This `.gitignore` file snippet provides a list of common files and directories that should be ignored by Git in a Flask project. These typically include generated files, virtual environments, and build artifacts to keep the repository clean.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/layout.rst#_snippet_3

LANGUAGE: none
CODE:
```
.venv/

*.pyc
__pycache__/

instance/

.pytest_cache/
.coverage
htmlcov/

dist/
build/
*.egg-info/
```

----------------------------------------

TITLE: Modify Flask Session Before Request in Tests
DESCRIPTION: This Python example demonstrates how to pre-populate or modify the Flask session before making a request using `client.session_transaction()`. The session object returned by the context manager can be altered, and changes are saved when the block exits.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_7

LANGUAGE: python
CODE:
```
from flask import session

def test_modify_session(client):
    with client.session_transaction() as session:
        # set a user id without going through the login route
        session["user_id"] = 1

    # session is saved now

    response = client.get("/users/me")
    assert response.json["username"] == "flask"
```

----------------------------------------

TITLE: Ensure application context for Flask CLI commands
DESCRIPTION: This snippet demonstrates how to explicitly push an application context for a Click command using the '@with_appcontext' decorator. Commands added via 'app.cli' or 'FlaskGroup' automatically get this behavior, but it can be manually applied for other Click commands added to the Flask CLI.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_14

LANGUAGE: Python
CODE:
```
import click
from flask.cli import with_appcontext

@click.command()
@with_appcontext
def do_work():
    ...

app.cli.add_command(do_work)
```

----------------------------------------

TITLE: Register Flask Blueprint in Application Factory (Python)
DESCRIPTION: This Python snippet demonstrates how to integrate a Flask Blueprint (auth.bp) into the main application. It shows importing the blueprint module and registering it using `app.register_blueprint()` within the `create_app` factory function, ensuring the blueprint's routes are active.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/views.rst#_snippet_1

LANGUAGE: python
CODE:
```
def create_app():
    app = ...
    # existing code omitted

    from . import auth
    app.register_blueprint(auth.bp)

    return app
```

----------------------------------------

TITLE: Flask: Registering 500 Error Handler in App Factory
DESCRIPTION: This Python example shows how to register a custom 500 Internal Server Error handler within a Flask application factory. The `app.register_error_handler` method is used to associate the `internal_server_error` function with the 500 HTTP status code, ensuring consistent error handling in factory-based applications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_13

LANGUAGE: python
CODE:
```
from flask import Flask, render_template

def internal_server_error(e):
  return render_template('500.html'), 500

def create_app():
    app = Flask(__name__)
    app.register_error_handler(500, internal_server_error)
    return app
```

----------------------------------------

TITLE: SQL Script for Populating Flask Test Database
DESCRIPTION: SQL statements to insert initial user and post data into the temporary database used for testing. This script ensures a consistent state for tests that interact with the database.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_1

LANGUAGE: sql
CODE:
```
INSERT INTO user (username, password)
VALUES
  ('test', 'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f'),
  ('other', 'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79');

INSERT INTO post (title, body, author_id, created)
VALUES
  ('test title', 'test' || x'0a' || 'body', 1, '2018-01-01 00:00:00');
```

----------------------------------------

TITLE: Modifying Flask Response Object with make_response
DESCRIPTION: Shows how to use `make_response` to explicitly create a response object from a view's return value, allowing modification of headers or other properties before returning it.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_27

LANGUAGE: python
CODE:
```
from flask import make_response

@app.errorhandler(404)
def not_found(error):
    resp = make_response(render_template('error.html'), 404)
    resp.headers['X-Something'] = 'A value'
    return resp
```

----------------------------------------

TITLE: Query Data from SQLAlchemy Table by ID
DESCRIPTION: This example demonstrates how to query data from a SQLAlchemy table using a `select` statement with a filter condition. It retrieves the first matching row, which is returned as a dict-like tuple, allowing access to column values.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_12

LANGUAGE: Python
CODE:
```
users.select(users.c.id == 1).execute().first()
```

----------------------------------------

TITLE: Test Flask Template Rendering with Captured Templates
DESCRIPTION: This example shows how to use the `captured_templates` context manager with a Flask test client. It performs a GET request to the root URL and then asserts that exactly one template was rendered, verifying its name and the number of items in its context. This pattern is useful for unit testing template interactions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/signals.rst#_snippet_1

LANGUAGE: Python
CODE:
```
with captured_templates(app) as templates:
    rv = app.test_client().get('/')
    assert rv.status_code == 200
    assert len(templates) == 1
    template, context = templates[0]
    assert template.name == 'index.html'
    assert len(context['items']) == 10
```

----------------------------------------

TITLE: Install Python Project in Editable Development Mode
DESCRIPTION: This command uses `pip` to install the current project in 'editable' or 'development' mode. This allows local code changes to be reflected immediately without needing to re-install, unless project metadata like dependencies are altered.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/install.rst#_snippet_1

LANGUAGE: none
CODE:
```
$ pip install -e .
```

----------------------------------------

TITLE: Initialize Database and Run Flaskr Application
DESCRIPTION: Commands to initialize the Flaskr database and then run the Flask application in debug mode, making it accessible via a web browser at http://127.0.0.1:5000.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#_snippet_4

LANGUAGE: bash
CODE:
```
$ flask --app flaskr init-db
$ flask --app flaskr run --debug
```

----------------------------------------

TITLE: Jinja2 Template Block Definitions
DESCRIPTION: Defines empty Jinja2 template blocks named 'intro' and 'script'. These blocks serve as placeholders for content that can be injected or overridden by child templates, facilitating modular page design in Flask applications.
SOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/js_example/templates/base.html#_snippet_1

LANGUAGE: Jinja2
CODE:
```
{% block intro %}{% endblock %}

{% block script %}{% endblock %}
```

----------------------------------------

TITLE: Register Flask CLI commands with a Blueprint
DESCRIPTION: This snippet demonstrates how to define CLI commands directly within a Flask Blueprint. When the blueprint is registered with the application, its commands become available, typically nested under a group matching the blueprint's name (e.g., 'flask students create').
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_11

LANGUAGE: Python
CODE:
```
from flask import Blueprint

bp = Blueprint('students', __name__)

@bp.cli.command('create')
@click.argument('name')
def create(name):
    ...

app.register_blueprint(bp)
```

LANGUAGE: Shell
CODE:
```
$ flask students create alice
```

----------------------------------------

TITLE: Creating Flask App with Instance Relative Config (Python)
DESCRIPTION: Shows how to create a Flask application instance (`app`) and configure it to load configuration files with paths relative to the instance folder by setting `instance_relative_config` to `True`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_28

LANGUAGE: Python
CODE:
```
app = Flask(__name__, instance_relative_config=True)
```

----------------------------------------

TITLE: Flask Error Handler with Tuple Return
DESCRIPTION: Demonstrates how to define a custom error handler in Flask that returns a tuple containing the response and status code, overriding the default status.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_26

LANGUAGE: python
CODE:
```
from flask import render_template

@app.errorhandler(404)
def not_found(error):
    return render_template('error.html'), 404
```

----------------------------------------

TITLE: Flask Application Configuration API Reference
DESCRIPTION: Detailed API documentation for key components and methods used in configuring a Flask application, including the Flask class constructor, configuration methods, and routing decorators.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/factory.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Flask Class Constructor:
  Flask(__name__, instance_relative_config=True)
    __name__: The name of the current Python module, used by Flask to locate paths.
    instance_relative_config: bool - If True, configuration files are relative to the instance folder, which is outside the package and holds local data (e.g., secrets, database).

Config Object Methods and Attributes:
  app.config.from_mapping(mapping: dict)
    Purpose: Sets default configuration values for the application.
    Parameters:
      mapping: A dictionary of configuration key-value pairs.
    Attributes:
      SECRET_KEY: Used by Flask and extensions for data safety. Default 'dev' for development; should be overridden in production.
      DATABASE: Path where the SQLite database file will be saved, typically under app.instance_path.

  app.config.from_pyfile(filename: str, silent: bool = False)
    Purpose: Overrides default configuration with values from a Python file in the instance folder.
    Parameters:
      filename: The name of the Python file (e.g., 'config.py').
      silent: bool - If True, errors are ignored if the file doesn't exist.

Flask Instance Attributes:
  app.instance_path: The path Flask has chosen for the instance folder. This folder is not created automatically and must be ensured to exist (e.g., using os.makedirs).

Routing Decorators:
  @app.route(rule: str, **options)
    Purpose: Creates a connection between a URL rule and a function that returns a response.
    Parameters:
      rule: The URL rule string (e.g., '/hello').
    Usage: Applied as a decorator to a Python function, making that function handle requests to the specified URL.
```

----------------------------------------

TITLE: Handle Non-HTTP Exceptions and Pass Through HTTP Exceptions in Flask
DESCRIPTION: This example shows how to register a very generic error handler for 'Exception' to catch all otherwise unhandled errors. It includes logic to pass through HTTP exceptions directly, ensuring they are handled by more specific HTTPException handlers or Flask's default behavior, while custom rendering is applied only to non-HTTP exceptions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_6

LANGUAGE: python
CODE:
```
from werkzeug.exceptions import HTTPException

@app.errorhandler(Exception)
def handle_exception(e):
    # pass through HTTP errors
    if isinstance(e, HTTPException):
        return e

    # now you're handling non-HTTP exceptions only
    return render_template("500_generic.html", e=e), 500
```

----------------------------------------

TITLE: Configure Flask and Celery with Redis backend
DESCRIPTION: A basic `example.py` demonstrating how to configure a Flask application and initialize Celery to use Redis as both broker and result backend. It sets `task_ignore_result` to true by default, allowing results to be stored only for tasks where they are explicitly needed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#_snippet_2

LANGUAGE: python
CODE:
```
from flask import Flask

app = Flask(__name__)
app.config.from_mapping(
    CELERY=dict(
        broker_url="redis://localhost",
        result_backend="redis://localhost",
        task_ignore_result=True,
    ),
)
celery_app = celery_init_app(app)
```

----------------------------------------

TITLE: Initialize Flask Database with Schema and CLI Command
DESCRIPTION: This Python snippet provides functions to initialize the SQLite database. The `init_db` function reads and executes the SQL schema from `schema.sql` using the database connection. The `init_db_command` is a Click command-line function that wraps `init_db`, allowing the database to be initialized via a CLI command. It also registers a converter for 'timestamp' types.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#_snippet_2

LANGUAGE: python
CODE:
```
def init_db():
    db = get_db()

    with current_app.open_resource('schema.sql') as f:
        db.executescript(f.read().decode('utf8'))


@click.command('init-db')
def init_db_command():
    """Clear the existing data and create new tables."""
    init_db()
    click.echo('Initialized the database.')


sqlite3.register_converter(
    "timestamp", lambda v: datetime.fromisoformat(v.decode())
)
```

----------------------------------------

TITLE: Flask: Registering 404 Error Handler in App Factory
DESCRIPTION: This Python example illustrates how to register a custom 404 error handler within a Flask application factory function. The `app.register_error_handler` method is used to associate the `page_not_found` function with the 404 HTTP status code during application creation.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_9

LANGUAGE: python
CODE:
```
from flask import Flask, render_template

def page_not_found(e):
  return render_template('404.html'), 404

def create_app(config_filename):
    app = Flask(__name__)
    app.register_error_handler(404, page_not_found)
    return app
```

----------------------------------------

TITLE: Manually Push Flask Application Context for Initialization
DESCRIPTION: This Python snippet demonstrates how to manually push an application context using `app.app_context()` within a `with` block. This is useful during application configuration, such as initializing a database, especially when using the app factory pattern where the `app` instance is not globally imported.
SOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#_snippet_1

LANGUAGE: python
CODE:
```
def create_app():
        app = Flask(__name__)

        with app.app_context():
            init_db()

        return app
```

----------------------------------------

TITLE: Werkzeug FileStorage.save Method
DESCRIPTION: Documentation for the save method of the werkzeug.datastructures.FileStorage object. This method is used to save an uploaded file to a specified destination on the filesystem, which can be a path or a file-like object.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
werkzeug.datastructures.FileStorage.save(dst, buffer_size=16384)
  dst: str | file-like object - The destination path or file-like object where the file should be saved.
  buffer_size: int (default: 16384) - The size of the buffer to use for copying.
  Description: Saves the uploaded file permanently to the filesystem.
```

----------------------------------------

TITLE: Accessing Underlying Object from Flask Proxy
DESCRIPTION: Illustrates how to retrieve the actual object behind a Flask proxy (e.g., `current_app`) using the `_get_current_object` method, which is necessary for operations like sending signals or passing data to background threads.
SOURCE: https://github.com/pallets/flask/blob/main/docs/reqcontext.rst#_snippet_2

LANGUAGE: python
CODE:
```
app = current_app._get_current_object()
my_signal.send(app)
```

----------------------------------------

TITLE: Create Context Local Proxy with Werkzeug LocalProxy
DESCRIPTION: This snippet demonstrates using `werkzeug.local.LocalProxy` to create a context-local proxy for a resource, such as a database connection. Accessing the `db` proxy internally calls `get_db()`, providing a convenient way to access context-bound resources similar to `current_app`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/appcontext.rst#_snippet_3

LANGUAGE: python
CODE:
```
from werkzeug.local import LocalProxy
db = LocalProxy(get_db)
```

----------------------------------------

TITLE: Install Flask Application in Editable Mode
DESCRIPTION: This command installs the Flask application package in 'editable' mode. This allows for live code changes to be reflected without reinstallation, which is ideal for development. The '.' indicates the current directory as the package source.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#_snippet_1

LANGUAGE: text
CODE:
```
$ pip install -e .
```

----------------------------------------

TITLE: Registering Reusable Flask ListView for Multiple Models
DESCRIPTION: Demonstrates how to register the generic `ListView` class for different models (e.g., `User` and `Story`) using `app.add_url_rule`. Extra arguments passed to `as_view` are forwarded to the class's `__init__` method, enabling dynamic view behavior.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#_snippet_3

LANGUAGE: python
CODE:
```
app.add_url_rule(
    "/users/",
    view_func=ListView.as_view("user_list", User, "users.html"),
)
app.add_url_rule(
    "/stories/",
    view_func=ListView.as_view("story_list", Story, "stories.html"),
)
```

----------------------------------------

TITLE: Link Static CSS File in Flask Template
DESCRIPTION: This Jinja template snippet demonstrates how to link a static CSS file, `style.css`, using Flask's `url_for` function. Flask automatically serves files from the `flaskr/static` directory, making them accessible via this method.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/static.rst#_snippet_0

LANGUAGE: html+jinja
CODE:
```
{{ url_for('static', filename='style.css') }}
```

----------------------------------------

TITLE: Initialize SQLAlchemy Manual ORM Base and Session in Flask
DESCRIPTION: This Python snippet sets up the core SQLAlchemy components for a Flask application using the manual object relational mapping style. It initializes the database engine, creates a MetaData object for table definitions, and establishes a scoped session for thread-safe database access. The init_db function is provided to create all defined tables.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_6

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine, MetaData
from sqlalchemy.orm import scoped_session, sessionmaker

engine = create_engine('sqlite:////tmp/test.db')
metadata = MetaData()
db_session = scoped_session(sessionmaker(autocommit=False,
                                             autoflush=False,
                                             bind=engine))
def init_db():
    metadata.create_all(bind=engine)
```

----------------------------------------

TITLE: Preventing XSS with Jinja Attribute Quoting
DESCRIPTION: Demonstrates the importance of quoting attributes when using Jinja expressions in HTML to prevent Cross-Site Scripting (XSS) vulnerabilities. Unquoted attributes can allow attackers to inject malicious JavaScript handlers.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_1

LANGUAGE: html+jinja
CODE:
```
<input value="{{ value }}">
```

----------------------------------------

TITLE: Run Pytest with Coverage Measurement
DESCRIPTION: This command executes pytest tests while simultaneously measuring code coverage using the `coverage` tool. It's used to determine which parts of the codebase are exercised by the tests, providing data for a detailed coverage report.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_24

LANGUAGE: none
CODE:
```
$ coverage run -m pytest
```

----------------------------------------

TITLE: Define SQLite Database Schema for Flaskr Application
DESCRIPTION: This SQL snippet defines the database schema for the Flaskr application, creating `user` and `post` tables. It includes commands to drop existing tables to ensure a clean slate, and then creates new tables with specified columns, primary keys, auto-incrementing IDs, unique constraints, and a foreign key relationship between posts and users.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#_snippet_1

LANGUAGE: sql
CODE:
```
DROP TABLE IF EXISTS user;
DROP TABLE IF EXISTS post;

CREATE TABLE user (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL
);

CREATE TABLE post (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  author_id INTEGER NOT NULL,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title TEXT NOT NULL,
  body TEXT NOT NULL,
  FOREIGN KEY (author_id) REFERENCES user (id)
);
```

----------------------------------------

TITLE: Render WTForms in Jinja2 Template with Helper Macro
DESCRIPTION: This Jinja2 template demonstrates how to render a WTForms form by importing and utilizing the `render_field` macro. It iterates through the form fields, displaying each one within a definition list, and includes a submit button.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/wtforms.rst#_snippet_3

LANGUAGE: html+jinja
CODE:
```
{% from "_formhelpers.html" import render_field %}
<form method=post>
  <dl>
    {{ render_field(form.username) }}
    {{ render_field(form.email) }}
    {{ render_field(form.password) }}
    {{ render_field(form.confirm) }}
    {{ render_field(form.accept_tos) }}
  </dl>
  <p><input type=submit value=Register>
</form>
```

----------------------------------------

TITLE: Accessing File in Flask Instance Folder Using os.path (Python)
DESCRIPTION: Shows how to construct the full path to a file (`application.cfg`) within the Flask application's instance folder by joining the `app.instance_path` with the filename using `os.path.join`, and then opening the file using standard Python file operations. Requires the `os` module.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_30

LANGUAGE: Python
CODE:
```
filename = os.path.join(app.instance_path, 'application.cfg')
with open(filename) as f:
    config = f.read()
```

----------------------------------------

TITLE: Define a simple Flask CLI command with Click
DESCRIPTION: This snippet demonstrates how to define a basic command-line interface command, 'create-user', for a Flask application using the '@app.cli.command' decorator and Click's '@click.argument' to accept a name argument. The command is directly attached to the Flask application's CLI.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_9

LANGUAGE: Python
CODE:
```
import click
from flask import Flask

app = Flask(__name__)

@app.cli.command("create-user")
@click.argument("name")
def create_user(name):
    ...
```

LANGUAGE: Shell
CODE:
```
$ flask create-user admin
```

----------------------------------------

TITLE: Enable Debug Mode for Flask Development Server
DESCRIPTION: Shows how to activate debug mode for the Flask development server using the `--debug` option. Debug mode enables the interactive debugger and the reloader by default, making errors easier to see and debug. The `--debug` option can be passed to `flask run` or the top-level `flask` command.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_2

LANGUAGE: console
CODE:
```
$ flask --app hello run --debug
 * Serving Flask app "hello"
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with inotify reloader
 * Debugger is active!
 * Debugger PIN: 223-456-919
```

LANGUAGE: console
CODE:
```
$ flask --app hello --debug run
$ flask --app hello run --debug
```

----------------------------------------

TITLE: HTML+Jinja: Example 404 Page Template
DESCRIPTION: This Jinja2 template provides a basic structure for a custom 404 'Page Not Found' error page. It extends a base layout, sets the page title, displays a user-friendly message, and includes a link to navigate back to the home page.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_10

LANGUAGE: html+jinja
CODE:
```
{% extends "layout.html" %}
{% block title %}Page Not Found{% endblock %}
{% block body %}
  <h1>Page Not Found</h1>
  <p>What you were looking for is just not there.
  <p><a href="{{ url_for('index') }}">go somewhere nice</a>
{% endblock %}
```

----------------------------------------

TITLE: Activate Virtual Environment (Windows) - Shell
DESCRIPTION: Command to activate the previously created virtual environment named .venv on Windows using the script in the Scripts directory.
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#_snippet_3

LANGUAGE: Shell
CODE:
```
> .venv\Scripts\activate
```

----------------------------------------

TITLE: Activate Virtual Environment (macOS/Linux) - Shell
DESCRIPTION: Command to activate the previously created virtual environment named .venv on macOS or Linux using the source command (represented by .).
SOURCE: https://github.com/pallets/flask/blob/main/docs/installation.rst#_snippet_2

LANGUAGE: Shell
CODE:
```
$ . .venv/bin/activate
```

----------------------------------------

TITLE: Define HTTP Methods for Flask View Class
DESCRIPTION: Demonstrates how to specify allowed HTTP methods (e.g., GET, POST) for a Flask `View` class by setting the `methods` attribute, which is equivalent to passing them to `add_url_rule`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#_snippet_10

LANGUAGE: python
CODE:
```
class MyView(View):
    methods = ["GET", "POST"]

    def dispatch_request(self):
        if request.method == "POST":
            ...
        ...

app.add_url_rule('/my-view', view_func=MyView.as_view('my-view'))
```

----------------------------------------

TITLE: Using Flask Extension with Application Factory (Python)
DESCRIPTION: Demonstrates how to initialize a Flask extension instance outside of the application factory function and then apply it to the app instance within the factory using init_app. This allows the extension instance to be imported elsewhere before the app is created.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#_snippet_1

LANGUAGE: python
CODE:
```
hello = HelloExtension()

def create_app():
    app = Flask(__name__)
    hello.init_app(app)
    return app
```

----------------------------------------

TITLE: Flask Application with Decorator-based Routing
DESCRIPTION: Demonstrates a typical Flask application using `@app.route` decorators for URL routing, where all view functions are imported upfront. This approach can lead to slower startup times for large applications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from flask import Flask
app = Flask(__name__)

@app.route('/')
def index():
    pass

@app.route('/user/<username>')
def user(username):
    pass
```

----------------------------------------

TITLE: Flask: Handling 400 Bad Request and 404 Not Found with abort
DESCRIPTION: This Python snippet demonstrates how to use `flask.abort` within a route to signal HTTP errors. It aborts with a 400 Bad Request if a required username is missing from query arguments, and a 404 Not Found if the provided username does not correspond to an existing user.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_7

LANGUAGE: python
CODE:
```
from flask import abort, render_template, request

# a username needs to be supplied in the query args
# a successful request would be like /profile?username=jack
@app.route("/profile")
def user_profile():
    username = request.arg.get("username")
    # if a username isn't supplied in the request, return a 400 bad request
    if username is None:
        abort(400)

    user = get_user(username=username)
    # if a user can't be found by their username, return 404 not found
    if user is None:
        abort(404)

    return render_template("profile.html", user=user)
```

----------------------------------------

TITLE: Install Flaskr in Editable Mode
DESCRIPTION: Command to install the Flaskr application in editable mode using pip, allowing local changes to be reflected without reinstallation.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#_snippet_2

LANGUAGE: bash
CODE:
```
$ pip install -e .
```

----------------------------------------

TITLE: Flaskr User Registration HTML Template
DESCRIPTION: This Jinja2 template defines the user registration form for the Flaskr application. It extends the base.html template, overriding the header block to set the page title to 'Register' and the content block to include a form. The form contains input fields for 'username' and 'password' (both required) and a 'Register' submit button, using the POST method for submission.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/templates.rst#_snippet_1

LANGUAGE: html+jinja
CODE:
```
{% extends 'base.html' %}

{% block header %}
  <h1>{% block title %}Register{% endblock %}</h1>
{% endblock %}

{% block content %}
  <form method="post">
    <label for="username">Username</label>
    <input name="username" id="username" required>
    <label for="password">Password</label>
    <input type="password" name="password" id="password" required>
    <input type="submit" value="Register">
  </form>
{% endblock %}
```

----------------------------------------

TITLE: Send Form Data with File Upload using Flask Test Client
DESCRIPTION: This Python snippet demonstrates sending form data, including a file upload, via a POST request using the Flask test client. It utilizes `pathlib` to access a local resource file and shows how to pass file objects for upload, asserting a successful HTTP status code (200) upon completion.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_3

LANGUAGE: python
CODE:
```
from pathlib import Path

# get the resources folder in the tests folder
resources = Path(__file__).parent / "resources"

def test_edit_user(client):
    response = client.post("/user/2/edit", data={
        "name": "Flask",
        "theme": "dark",
        "picture": (resources / "picture.png").open("rb"),
    })
    assert response.status_code == 200
```

----------------------------------------

TITLE: Jinja2 Login Page Template Structure
DESCRIPTION: This snippet illustrates the fundamental structure of a Jinja2 template for a login page. It extends a 'base.html' template and defines 'header' and 'content' blocks, including a title and placeholders for username and password fields.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/flaskr/templates/auth/login.html#_snippet_0

LANGUAGE: Jinja2
CODE:
```
{% extends 'base.html' %} {% block header %}

{% block title %}Log In{% endblock %}
=====================================

{% endblock %} {% block content %}

Username  Password  

{% endblock %}
```

----------------------------------------

TITLE: Configure Root Logger in Flask
DESCRIPTION: This snippet demonstrates how to configure the root logger in a Flask application by adding `default_handler` and `mail_handler`. This approach applies logging settings globally to all log messages that propagate to the root logger.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#_snippet_5

LANGUAGE: python
CODE:
```
from flask.logging import default_handler

root = logging.getLogger()
root.addHandler(default_handler)
root.addHandler(mail_handler)
```

----------------------------------------

TITLE: Creating a Reusable Flask ListView with Initialization
DESCRIPTION: Illustrates how to create a generic `ListView` class that accepts `model` and `template` arguments during its `__init__` method. This allows the view to be reused for different data models and templates, making it more flexible than hard-coded views.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#_snippet_2

LANGUAGE: python
CODE:
```
class ListView(View):
    def __init__(self, model, template):
        self.model = model
        self.template = template

    def dispatch_request(self):
        items = self.model.query.all()
        return render_template(self.template, items=items)
```

----------------------------------------

TITLE: Flask Request Lifecycle Method Execution Order
DESCRIPTION: Documents the sequence of Flask method calls during a request, including `before_request`, view function, `after_request`, and teardown functions, along with exception handling behavior.
SOURCE: https://github.com/pallets/flask/blob/main/docs/reqcontext.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Flask Request Lifecycle:
  1. before_request:
     - Called before each request.
     - If a function returns a value, others are skipped.
     - Return value is treated as response; view function not called.
  2. View Function:
     - Called if before_request functions did not return a response.
     - Returns a response.
  3. after_request:
     - Receives the response object from the view.
     - Each function returns a modified or new response object.
  4. teardown_request:
     - Called after response is returned, when contexts are popped.
     - Called even if unhandled exception was raised.
     - Passed the exception object if an exception occurred.
  5. teardown_appcontext:
     - Called after response is returned, when contexts are popped.
     - Called even if unhandled exception was raised.
     - Passed the exception object if an exception occurred.
  6. errorhandler:
     - Flask tries to match if exception raised before teardown.
     - Handles exception and returns a response.
     - If no handler or handler raises exception, Flask returns generic 500.
     - In debug mode, unhandled exceptions propagate to WSGI server.
```

----------------------------------------

TITLE: Configure Pytest and Coverage in pyproject.toml
DESCRIPTION: This TOML configuration snippet for `pyproject.toml` sets up pytest to look for test files within the 'tests' directory. It also configures the coverage tool to track branch coverage and include source files from the 'flaskr' package during test runs.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_21

LANGUAGE: toml
CODE:
```
[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["flaskr"]
```

----------------------------------------

TITLE: Manually Escape HTML in Flask Responses
DESCRIPTION: When returning raw HTML from Flask, it's crucial to escape any user-provided input to prevent injection attacks. This Python snippet demonstrates using 'markupsafe.escape' to sanitize input from a URL parameter before rendering it in the HTML response. While Jinja templates handle this automatically, manual escaping is necessary when directly embedding untrusted data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_4

LANGUAGE: python
CODE:
```
from markupsafe import escape

@app.route("/<name>")
def hello(name):
    return f"Hello, {escape(name)}!"
```

----------------------------------------

TITLE: Flask File Upload: Basic Save
DESCRIPTION: Demonstrates how to handle file uploads in Flask using `request.files` and save the uploaded file directly to the server's filesystem. It shows a basic POST request handler for file saving.
SOURCE: https://github.com/pallets/flask/blob/main/docs/quickstart.rst#_snippet_20

LANGUAGE: python
CODE:
```
from flask import request

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        f = request.files['the_file']
        f.save('/var/www/uploads/uploaded_file.txt')
    ...
```

----------------------------------------

TITLE: Configuring Static Files for a Blueprint
DESCRIPTION: Illustrates how to expose a folder with static files for a Blueprint by providing the `static_folder` argument during Blueprint initialization. The path can be absolute or relative.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_10

LANGUAGE: python
CODE:
```
admin = Blueprint('admin', __name__, static_folder='static')
```

----------------------------------------

TITLE: Loading Flask Config from TOML File - Python
DESCRIPTION: Demonstrates loading configuration from a TOML file using `app.config.from_file`. It requires the `tomllib` module (or `toml` for Python < 3.11) and specifies the loader function.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_11

LANGUAGE: Python
CODE:
```
import tomllib
app.config.from_file("config.toml", load=tomllib.load, text=False)
```

----------------------------------------

TITLE: Setting an Expiring Cookie in Flask
DESCRIPTION: Shows how to set a cookie that expires after a specified duration (e.g., 10 minutes) using the `max_age` parameter. If neither `Expires` nor `Max-Age` is set, the cookie will be removed when the browser is closed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_10

LANGUAGE: python
CODE:
```
# cookie expires after 10 minutes
response.set_cookie('snakes', '3', max_age=600)
```

----------------------------------------

TITLE: Flask MethodView REST API Endpoints
DESCRIPTION: Documents the standard REST API endpoints generated by the `register_api` function using Flask's `MethodView`, detailing the URL, HTTP method, and a brief description for each resource.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#_snippet_13

LANGUAGE: APIDOC
CODE:
```
URL               Method     Description
----------------- ---------- -------------------
/users/           GET        List all users
/users/           POST       Create a new user
/users/<id>       GET        Show a single user
/users/<id>       PATCH      Update a user
```

----------------------------------------

TITLE: XSS Attack Example: Malicious Attribute Injection
DESCRIPTION: Illustrates a potential Cross-Site Scripting (XSS) attack where an attacker injects a malicious JavaScript handler into an unquoted HTML attribute. This code snippet shows how onmouseover=alert(document.cookie) could be injected to execute arbitrary JavaScript.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_2

LANGUAGE: html
CODE:
```
onmouseover=alert(document.cookie)
```

----------------------------------------

TITLE: Fetching Single Result with query_db
DESCRIPTION: Example of using the `query_db` function to fetch a single row based on a condition, demonstrating safe parameter passing using question marks to prevent SQL injection.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#_snippet_8

LANGUAGE: Python
CODE:
```
user = query_db('select * from users where username = ?',
                [the_username], one=True)
if user is None:
    print('No such user')
else:
    print(the_username, 'has the id', user['user_id'])
```

----------------------------------------

TITLE: Define SQLAlchemy Declarative User Model
DESCRIPTION: This Python code defines a User model using SQLAlchemy's declarative base. It specifies table name, primary key, and unique string columns for name and email. The __init__ method provides a constructor, and __repr__ defines a string representation for easy debugging.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from sqlalchemy import Column, Integer, String
from yourapplication.database import Base

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String(50), unique=True)
    email = Column(String(120), unique=True)

    def __init__(self, name=None, email=None):
        self.name = name
        self.email = email

    def __repr__(self):
        return f'<User {self.name!r}>'
```

----------------------------------------

TITLE: Running Flask Shell and Initial Output
DESCRIPTION: Displays the interactive Python shell launched by the `flask shell` command, showing system details, app context, and instance path. It also notes the use of `Flask.shell_context_processor` for custom imports.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_4

LANGUAGE: console
CODE:
```
$ flask shell
Python 3.10.0 (default, Oct 27 2021, 06:59:51) [GCC 11.1.0] on linux
App: example [production]
Instance: /home/david/Projects/pallets/flask/instance
>>>
```

----------------------------------------

TITLE: Initialize Database Tables with SQLAlchemy Declarative
DESCRIPTION: This interactive Python snippet demonstrates how to call the init_db function, previously defined in yourapplication.database, to create all tables associated with the SQLAlchemy declarative models. This step is crucial for setting up the database schema before inserting any data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from yourapplication.database import init_db
init_db()
```

----------------------------------------

TITLE: Flask Blueprint URL Generation (Relative)
DESCRIPTION: Shows how to generate a relative URL for an endpoint within the same Flask Blueprint, useful when linking between views of the same blueprint without explicitly naming it.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_15

LANGUAGE: python
CODE:
```
url_for('.index')
```

----------------------------------------

TITLE: Apply stream_with_context as a Decorator
DESCRIPTION: Demonstrates an alternative way to use `stream_with_context` as a decorator directly on the generator function, simplifying its application.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#_snippet_3

LANGUAGE: python
CODE:
```
@stream_with_context
def generate():
    ...

return generate()
```

----------------------------------------

TITLE: Calling an Injected Function in Jinja2 Template
DESCRIPTION: Illustrates the syntax for calling a Python function, such as `format_price`, that has been made available in the Jinja2 template context via a Flask context processor.
SOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#_snippet_8

LANGUAGE: jinja2
CODE:
```
{{ format_price(0.33) }}
```

----------------------------------------

TITLE: Retrieve Celery Task Result from Flask Route
DESCRIPTION: This Flask GET route (`/result/<id>`) allows clients to poll for the status and result of a previously started Celery task. It uses `celery.result.AsyncResult` with the task ID to check if the task is `ready()`, if it was `successful()`, and to retrieve its `result` (or error) once completed. This enables asynchronous result fetching without blocking the initial request.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#_snippet_11

LANGUAGE: python
CODE:
```
from celery.result import AsyncResult

@app.get("/result/<id>")
def task_result(id: str) -> dict[str, object]:
    result = AsyncResult(id)
    return {
        "ready": result.ready(),
        "successful": result.successful(),
        "value": result.result if result.ready() else None
    }
```

----------------------------------------

TITLE: Injecting Variables with Flask Context Processor
DESCRIPTION: Explains how to use a Flask context processor to automatically inject variables into the template context. This example makes the `g.user` object available as `user` in all templates.
SOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#_snippet_6

LANGUAGE: python
CODE:
```
@app.context_processor
def inject_user():
    return dict(user=g.user)
```

----------------------------------------

TITLE: Example Flask Python Config File Content
DESCRIPTION: Provides an example of the content for a Python configuration file that can be loaded by Flask's config object using `from_object` or `from_envvar`. Only uppercase variables are loaded.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_10

LANGUAGE: Python
CODE:
```
# Example configuration
SECRET_KEY = '192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'
```

----------------------------------------

TITLE: Run Gunicorn with eventlet asynchronous worker
DESCRIPTION: Shows how to start Gunicorn using the 'eventlet' worker type for asynchronous processing. This requires eventlet to be installed and your application code to utilize eventlet for any performance benefits. Ensure greenlet>=1.0 is installed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/gunicorn.rst#_snippet_4

LANGUAGE: shell
CODE:
```
$ gunicorn -k eventlet 'hello:create_app()'
```

----------------------------------------

TITLE: Flask `url_value_preprocessor` to Extract Language Code
DESCRIPTION: Shows how to use `@app.url_value_preprocessor` to extract the `lang_code` from the URL values and assign it to `g.lang_code`, removing the need for manual assignment in view functions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/urlprocessors.rst#_snippet_2

LANGUAGE: Python
CODE:
```
@app.url_value_preprocessor
def pull_lang_code(endpoint, values):
    g.lang_code = values.pop('lang_code', None)
```

----------------------------------------

TITLE: Define Flask View Functions
DESCRIPTION: This Python code snippet for 'views.py' illustrates how to define a simple view function within a Flask application package. It imports the 'app' instance from the parent package and uses the '@app.route('/')' decorator to associate the 'index' function with the root URL, returning a 'Hello World!' string.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#_snippet_4

LANGUAGE: python
CODE:
```
from yourapplication import app

@app.route('/')
def index():
    return 'Hello World!'
```

----------------------------------------

TITLE: Defining a Basic Flask Extension Class (Python)
DESCRIPTION: Defines a basic Flask extension class with an __init__ method that optionally takes an app and calls init_app, and an init_app method to register behavior with the application. This pattern supports the application factory.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#_snippet_0

LANGUAGE: python
CODE:
```
class HelloExtension:
    def __init__(self, app=None):
        if app is not None:
            self.init_app(app)

    def init_app(self, app):
        app.before_request(...)
```

----------------------------------------

TITLE: Generate Large CSV with Flask Streaming
DESCRIPTION: Demonstrates how to stream large CSV data directly to the client using a generator function within a Flask view. Each `yield` expression sends data incrementally to the browser. Be aware that some WSGI middlewares might interfere with streaming.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#_snippet_0

LANGUAGE: python
CODE:
```
@app.route('/large.csv')
def generate_large_csv():
    def generate():
        for row in iter_all_rows():
            yield f"{','.join(row)}\n"
    return generate(), {"Content-Type": "text/csv"}
```

----------------------------------------

TITLE: Stream with Request Context using stream_with_context
DESCRIPTION: Illustrates how to use `stream_with_context` to keep the Flask request context active while a generator function is running. This allows the generator to safely access `request` data without encountering a `RuntimeError`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/streaming.rst#_snippet_2

LANGUAGE: python
CODE:
```
from flask import stream_with_context, request
from markupsafe import escape

@app.route('/stream')
def streamed_response():
    def generate():
        yield '<p>Hello '
        yield escape(request.args['name'])
        yield '!</p>'
    return stream_with_context(generate())
```

----------------------------------------

TITLE: Configuring Flask Logging with dictConfig
DESCRIPTION: Shows how to set up a comprehensive logging configuration for a Flask application using `logging.config.dictConfig`. This example defines custom formatters, handlers, and sets the root log level to 'INFO' before the application object is created, ensuring early and consistent logging behavior.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#_snippet_1

LANGUAGE: python
CODE:
```
from logging.config import dictConfig

dictConfig({
    'version': 1,
    'formatters': {'default': {
        'format': '[%(asctime)s] %(levelname)s in %(module)s: %(message)s',
    }},
    'handlers': {'wsgi': {
        'class': 'logging.StreamHandler',
        'stream': 'ext://flask.logging.wsgi_errors_stream',
        'formatter': 'default'
    }},
    'root': {
        'level': 'INFO',
        'handlers': ['wsgi']
    }
})

app = Flask(__name__)
```

----------------------------------------

TITLE: Accessing Nested Config from Flask App (Python)
DESCRIPTION: Shows how to access a nested configuration value within a Flask application's config object after it has been loaded from environment variables using the double underscore convention.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_19

LANGUAGE: python
CODE:
```
app.config["MYAPI"]["credentials"]["username"]  # Is "user123"
```

----------------------------------------

TITLE: Flask Templated Decorator for View Functions
DESCRIPTION: This Python decorator, `templated`, simplifies Flask view functions by automatically rendering a template. If the decorated function returns a dictionary, it's used as template context; otherwise, the return value is passed through. It can infer the template name from the endpoint or use a specified one.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from functools import wraps
from flask import request, render_template

def templated(template=None):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            template_name = template
            if template_name is None:
                template_name = f"{request.endpoint.replace('.', '/')}.html"
            ctx = f(*args, **kwargs)
            if ctx is None:
                ctx = {}
            elif not isinstance(ctx, dict):
                return ctx
            return render_template(template_name, **ctx)
        return decorated_function
    return decorator
```

----------------------------------------

TITLE: Query MongoEngine Documents with Operators and Iteration
DESCRIPTION: This example showcases more advanced querying techniques in MongoEngine. It demonstrates using query operators (e.g., `__in` for list containment, `__gte` for greater than or equal to) by concatenating them with field names, and iterating over the results of a query.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#_snippet_6

LANGUAGE: python
CODE:
```
some_theron_movie = Movie.objects(actors__in=["Charlize Theron"]).first()

for recents in Movie.objects(year__gte=2017):
    print(recents.title)
```

----------------------------------------

TITLE: Accessing Flask current_app in Blueprints
DESCRIPTION: Illustrates how to access the application's configuration via `current_app` within a blueprint's view function. This is necessary because the application object is not available at import time when using factories, but `current_app` provides access during a request.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#_snippet_1

LANGUAGE: python
CODE:
```
from flask import current_app, Blueprint, render_template
admin = Blueprint('admin', __name__, url_prefix='/admin')

@admin.route('/')
def index():
    return render_template(current_app.config['INDEX_TEMPLATE'])
```

----------------------------------------

TITLE: Updating Multiple Flask Config Values - Python
DESCRIPTION: Illustrates using the `update` method of the Flask config object to set multiple configuration values simultaneously.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_2

LANGUAGE: python
CODE:
```
app.config.update(
    TESTING=True,
    SECRET_KEY='192b9bdd22ab9ed4d12e236c78afcb9a393ec15f71bbf5dc987d54727823bcbf'
)
```

----------------------------------------

TITLE: Install Test Dependencies and Run Tests with Coverage
DESCRIPTION: This snippet outlines the steps to install testing dependencies, run tests using pytest, and generate a code coverage report. It ensures the project's functionality and code quality are verified.
SOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/README.rst#_snippet_2

LANGUAGE: text
CODE:
```
$ pip install -e '.[test]'
$ coverage run -m pytest
$ coverage report
```

----------------------------------------

TITLE: Run Celery beat with Flask factory pattern
DESCRIPTION: Command to start the Celery beat scheduler when using the Flask application factory pattern, pointing to the `make_celery.py` file to access the Celery application instance for scheduling tasks.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#_snippet_8

LANGUAGE: text
CODE:
```
$ celery -A make_celery beat --loglevel INFO
```

----------------------------------------

TITLE: Configuring Template Folder for a Blueprint
DESCRIPTION: Shows how to specify a template folder for a Blueprint using the `template_folder` parameter in the Blueprint constructor. Templates in this folder are added to the search path with lower priority than the application's templates.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_12

LANGUAGE: python
CODE:
```
admin = Blueprint('admin', __name__, template_folder='templates')
```

----------------------------------------

TITLE: Loading Config from Class String (Python)
DESCRIPTION: Demonstrates loading configuration into a Flask application directly from a configuration class specified as a string path, using the `from_object` method.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_22

LANGUAGE: python
CODE:
```
app.config.from_object('configmodule.ProductionConfig')
```

----------------------------------------

TITLE: Install Flask application wheel on production server
DESCRIPTION: Demonstrates how to install the previously built Flask application wheel file (.whl) on a target machine using pip. This command installs the application along with its declared dependencies.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/deploy.rst#_snippet_2

LANGUAGE: shell
CODE:
```
$ pip install flaskr-1.0.0-py3-none-any.whl
```

----------------------------------------

TITLE: Setting Flask Command Options with Environment Variables
DESCRIPTION: Demonstrates how to configure Flask command options, such as the server port, by setting environment variables like `FLASK_RUN_PORT` before executing `flask run`. Examples are provided for Bash, Fish, CMD, and Powershell.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_5

LANGUAGE: Bash
CODE:
```
$ export FLASK_RUN_PORT=8000
$ flask run
 * Running on http://127.0.0.1:8000/
```

LANGUAGE: Fish
CODE:
```
$ set -x FLASK_RUN_PORT 8000
$ flask run
 * Running on http://127.0.0.1:8000/
```

LANGUAGE: CMD
CODE:
```
> set FLASK_RUN_PORT=8000
> flask run
 * Running on http://127.0.0.1:8000/
```

LANGUAGE: Powershell
CODE:
```
> $env:FLASK_RUN_PORT = 8000
> flask run
 * Running on http://127.0.0.1:8000/
```

----------------------------------------

TITLE: Initializing Flask SQLite Database Schema
DESCRIPTION: A function `init_db` to create the database schema by executing SQL commands from a `schema.sql` file. It ensures the database is initialized within an application context, making it suitable for setup scripts.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#_snippet_9

LANGUAGE: Python
CODE:
```
def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()
```

----------------------------------------

TITLE: Registering Database Functions with Flask App Context (Python)
DESCRIPTION: This Python snippet demonstrates how to register database cleanup and command-line initialization functions (`close_db`, `init_db_command`) with a Flask application instance. It utilizes `app.teardown_appcontext` to ensure cleanup after responses and `app.cli.add_command` to make `init_db_command` available via the Flask CLI.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#_snippet_3

LANGUAGE: python
CODE:
```
def init_app(app):
    app.teardown_appcontext(close_db)
    app.cli.add_command(init_db_command)
```

----------------------------------------

TITLE: Setting FLASK_ Prefixed Env Vars - Bash
DESCRIPTION: Shows how to set environment variables with a `FLASK_` prefix in a Bash shell. These variables can be automatically loaded into the Flask config using `from_prefixed_env`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_13

LANGUAGE: Text
CODE:
```
$ export FLASK_SECRET_KEY="5f352379324c22463451387a0aec5d2f"
$ export FLASK_MAIL_ENABLED=false
$ flask run
 * Running on http://127.0.0.1:5000/
```

----------------------------------------

TITLE: Flask Application-Level Conditional Error Handler
DESCRIPTION: Illustrates an application-wide error handler for 404 and 405 errors that conditionally responds based on the request path. This is useful for distinguishing API errors (e.g., returning JSON) from regular web errors (e.g., returning an HTML page).
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_17

LANGUAGE: python
CODE:
```
@app.errorhandler(404)
@app.errorhandler(405)
def _handle_api_error(ex):
    if request.path.startswith('/api/'):
        return jsonify(error=str(ex)), ex.code
    else:
        return ex
```

----------------------------------------

TITLE: Test Blog Index View in Flask with Pytest
DESCRIPTION: Tests the blog index page's display logic. It verifies that the page correctly shows 'Log In' and 'Register' links when unauthenticated, and 'Log Out' when authenticated. Additionally, it asserts that post data (title, author, body, and an edit link for the author) is properly rendered.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_15

LANGUAGE: python
CODE:
```
import pytest
from flaskr.db import get_db


def test_index(client, auth):
    response = client.get('/')
    assert b"Log In" in response.data
    assert b"Register" in response.data

    auth.login()
    response = client.get('/')
    assert b'Log Out' in response.data
    assert b'test title' in response.data
    assert b'by test on 2018-01-01' in response.data
    assert b'test\nbody' in response.data
    assert b'href="/1/update"' in response.data
```

----------------------------------------

TITLE: Using Flask Database Connection in Python Shell
DESCRIPTION: Shows how to manually create an application context to use `get_db()` outside of a typical request context, for example, when interacting with the application from a Python shell.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#_snippet_2

LANGUAGE: Python
CODE:
```
with app.app_context():
    # now you can use get_db()
```

----------------------------------------

TITLE: Initialize SQLAlchemy Engine and Metadata
DESCRIPTION: This snippet demonstrates how to create a SQLAlchemy engine for connecting to a database (e.g., SQLite) and initialize metadata bound to that engine. The engine is the primary interface for database interaction, allowing for connections and execution of SQL.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from sqlalchemy import create_engine, MetaData, Table

engine = create_engine('sqlite:////tmp/test.db')
metadata = MetaData(bind=engine)
```

----------------------------------------

TITLE: Manually Running Flask Pre-request Callbacks
DESCRIPTION: Shows how to explicitly call `app.preprocess_request()` within a faked request context. This is crucial for executing code that normally runs before a request, such as database connections or user loading, which might be necessary for the code you want to test in the shell.
SOURCE: https://github.com/pallets/flask/blob/main/docs/shell.rst#_snippet_2

LANGUAGE: Python
CODE:
```
ctx = app.test_request_context()
ctx.push()
app.preprocess_request()
```

----------------------------------------

TITLE: Define and Register Custom Flask HTTPException
DESCRIPTION: Create a custom HTTP exception by subclassing `werkzeug.exceptions.HTTPException` with a specific code and description. Then, register an error handler for this custom exception class to manage its behavior.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_4

LANGUAGE: python
CODE:
```
class InsufficientStorage(werkzeug.exceptions.HTTPException):
    code = 507
    description = 'Not enough storage space.'

app.register_error_handler(InsufficientStorage, handle_507)

raise InsufficientStorage()
```

----------------------------------------

TITLE: Run Celery worker with Flask factory pattern
DESCRIPTION: Command to start the Celery worker when using the Flask application factory pattern, pointing to the `make_celery.py` file to locate the Celery application instance.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/celery.rst#_snippet_7

LANGUAGE: text
CODE:
```
$ celery -A make_celery worker --loglevel INFO
```

----------------------------------------

TITLE: Running Flask Application with Default Factory
DESCRIPTION: Provides the command-line instruction to run a Flask application that uses an application factory. Flask automatically detects factories named `create_app` or `make_app` in the specified module.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#_snippet_4

LANGUAGE: text
CODE:
```
$ flask --app hello run
```

----------------------------------------

TITLE: Setting Flask Config Value (Attribute Style) - Python
DESCRIPTION: Shows how certain configuration values can be set directly as attributes on the Flask application object for convenience.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_1

LANGUAGE: python
CODE:
```
app.testing = True
```

----------------------------------------

TITLE: Inspect Flask Application URL Map After Blueprint Registration
DESCRIPTION: This snippet illustrates how to inspect the URL routing map of a Flask application after a blueprint has been registered. It shows that blueprint-defined routes are prefixed with the blueprint's name (e.g., `simple_page.show`), distinguishing them from application-level routes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_2

LANGUAGE: Python
CODE:
```
>>> app.url_map
Map([<Rule '/static/<filename>' (HEAD, OPTIONS, GET) -> static>,
     <Rule '/<page>' (HEAD, OPTIONS, GET) -> simple_page.show>,
     <Rule '/' (HEAD, OPTIONS, GET) -> simple_page.show>])
```

----------------------------------------

TITLE: Configure Specific Loggers in Flask
DESCRIPTION: This snippet shows how to configure specific loggers, such as the application's logger (`app.name`), 'sqlalchemy', and 'other_package', by adding `default_handler` and `mail_handler` to each. This provides more granular control over logging for different parts of the application, which can be more useful depending on the project's needs.
SOURCE: https://github.com/pallets/flask/blob/main/docs/logging.rst#_snippet_6

LANGUAGE: python
CODE:
```
for logger in (
    logging.getLogger(app.name),
    logging.getLogger('sqlalchemy'),
    logging.getLogger('other_package'),
):
    logger.addHandler(default_handler)
    logger.addHandler(mail_handler)
```

----------------------------------------

TITLE: Test Flask Application Context Activation
DESCRIPTION: This Python example demonstrates how to manually push an application context using `with app.app_context()`. This is useful for testing functions or database interactions that require an active application context without making a full request.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_9

LANGUAGE: python
CODE:
```
def test_db_post_model(app):
    with app.app_context():
        post = db.session.query(Post).get(1)
```

----------------------------------------

TITLE: Initializing Flask Database via CLI
DESCRIPTION: This shell command demonstrates how to execute the `init-db` command, which was registered with the Flask application, using the Flask command-line interface. Running this command initializes the `flaskr.sqlite` database file within the project's `instance` folder.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/database.rst#_snippet_5

LANGUAGE: none
CODE:
```
$ flask --app flaskr init-db
Initialized the database.
```

----------------------------------------

TITLE: Flask Method-Based View Class (flask.views.MethodView)
DESCRIPTION: A class-based view that dispatches requests to different methods based on the HTTP request method (e.g., `get()`, `post()`). The `:members:` directive indicates that all public members of this class are documented.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_35

LANGUAGE: APIDOC
CODE:
```
class flask.views.MethodView:
  # All public members are documented.
```

----------------------------------------

TITLE: Add Favicon Link Tag in HTML with Jinja
DESCRIPTION: This HTML snippet demonstrates how to include a favicon in your web page using a <link> tag. It uses Flask's url_for function within Jinja2 templating to dynamically generate the URL to the favicon.ico file located in the static directory. This is the standard and recommended way for most modern browsers.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/favicon.rst#_snippet_0

LANGUAGE: html+jinja
CODE:
```
<link rel="shortcut icon" href="{{ url_for('static', filename='favicon.ico') }}">
```

----------------------------------------

TITLE: Run Flask Application
DESCRIPTION: This command starts the Flask development server for the 'js_example' application. It makes the application accessible via a web browser at the specified local address.
SOURCE: https://github.com/pallets/flask/blob/main/examples/javascript/README.rst#_snippet_1

LANGUAGE: text
CODE:
```
$ flask --app js_example run
```

----------------------------------------

TITLE: Registering Flask Template Filter with Decorator
DESCRIPTION: Demonstrates how to register a custom Jinja2 template filter in Flask using the `@app.template_filter` decorator. This example defines a filter named 'reverse' that reverses a string or sequence.
SOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#_snippet_3

LANGUAGE: python
CODE:
```
@app.template_filter('reverse')
def reverse_filter(s):
    return s[::-1]
```

----------------------------------------

TITLE: Generate Dynamic URLs in JavaScript with SCRIPT_ROOT
DESCRIPTION: When `url_for` cannot be used directly in JavaScript, this snippet shows how to pass the application's root URL (`request.script_root`) as a global JavaScript variable. This allows for dynamic URL construction on the client-side based on known IDs or other JavaScript variables.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_4

LANGUAGE: javascript
CODE:
```
const SCRIPT_ROOT = {{ request.script_root|tojson }}
let user_id = ...  // do something to get a user id from the page
let user_url = `${SCRIPT_ROOT}/user/${user_id}`
fetch(user_url).then(...)
```

----------------------------------------

TITLE: Flask request.files Attribute
DESCRIPTION: Documentation for the flask.request.files attribute, which provides access to uploaded files in a dictionary-like format. Each entry in this collection is a FileStorage object, allowing interaction with the uploaded file data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/fileuploads.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
flask.request.files: werkzeug.datastructures.FileStorage dictionary
  Description: A dictionary-like object containing uploaded files. Each entry is a FileStorage object, accessible by the input field's name.
```

----------------------------------------

TITLE: Define Flask Application Project with TOML
DESCRIPTION: This TOML configuration defines the project metadata for a Flask application, including its name and dependencies. It specifies 'flask' as a required dependency and configures 'flit_core' for the build system, enabling the application to be packaged and installed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/packages.rst#_snippet_0

LANGUAGE: toml
CODE:
```
[project]
name = "yourapplication"
dependencies = [
    "flask",
]

[build-system]
requires = ["flit_core<4"]
build-backend = "flit_core.buildapi"
```

----------------------------------------

TITLE: Register Flask Error Handler with Method
DESCRIPTION: Register a custom error handler for a specific HTTP status code (e.g., 400) using the `app.register_error_handler` method. This provides an alternative to the decorator syntax.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_3

LANGUAGE: python
CODE:
```
app.register_error_handler(400, handle_bad_request)
```

----------------------------------------

TITLE: Defining a Testing Configuration Class in Flask (Python)
DESCRIPTION: Defines a configuration class `TestingConfig` that inherits from `Config`. It sets the database server to 'localhost' and uses an in-memory SQLite database for testing purposes.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_26

LANGUAGE: Python
CODE:
```
class TestingConfig(Config):
    DB_SERVER = 'localhost'
    DATABASE_URI = 'sqlite:///:memory:'
```

----------------------------------------

TITLE: Flask: Custom 500 Error Handler for Blueprints
DESCRIPTION: This Python snippet demonstrates how to define and register a custom 500 Internal Server Error handler specifically for a Flask Blueprint. It shows both the decorator (`@blog.errorhandler(500)`) and the `register_error_handler` method for associating the handler with the blueprint.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_14

LANGUAGE: python
CODE:
```
from flask import Blueprint

blog = Blueprint('blog', __name__)

# as a decorator
@blog.errorhandler(500)
def internal_server_error(e):
    return render_template('500.html'), 500

# or with register_error_handler
blog.register_error_handler(500, internal_server_error)
```

----------------------------------------

TITLE: Set Flask App Entry Point (Shell)
DESCRIPTION: Demonstrates how to set the FLASK_APP environment variable using a shell command. This variable tells the `flask` command where to find the application instance or factory function.
SOURCE: https://github.com/pallets/flask/blob/main/CHANGES.rst#_snippet_0

LANGUAGE: Shell
CODE:
```
FLASK_APP=foobar/__init__.py
```

----------------------------------------

TITLE: Verify Installed Python Packages with pip list
DESCRIPTION: The `pip list` command displays all installed Python packages and their versions, including the location for editable installations. This helps confirm that the project has been successfully installed in the virtual environment and shows its current path.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/install.rst#_snippet_2

LANGUAGE: none
CODE:
```
$ pip list

Package        Version   Location
-------------- --------- ----------------------------------
click          6.7
Flask          1.0
flaskr         1.0.0     /home/user/Projects/flask-tutorial
itsdangerous   0.24
Jinja2         2.10
MarkupSafe     1.0
pip            9.0.3
Werkzeug       0.14.1
```

----------------------------------------

TITLE: Install Waitress for Flask Application
DESCRIPTION: This snippet demonstrates the steps to set up a Python virtual environment, install your Flask application, and then install the Waitress WSGI server using pip, preparing your project for deployment.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/waitress.rst#_snippet_0

LANGUAGE: text
CODE:
```
$ cd hello-app
$ python -m venv .venv
$ . .venv/bin/activate
$ pip install .  # install your application
$ pip install waitress
```

----------------------------------------

TITLE: Generating URLs for Blueprint Static Files
DESCRIPTION: Demonstrates how to use `url_for` to generate URLs for static files exposed by a Blueprint, using the `blueprint_name.static` endpoint.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_11

LANGUAGE: python
CODE:
```
url_for('admin.static', filename='style.css')
```

----------------------------------------

TITLE: Jinja2 Template for New Post Page
DESCRIPTION: This Jinja2 template defines the structure for a new post page. It extends a `base.html` template, sets the page title to 'New Post', and includes a content block that displays a 'Title' and 'Body' field, specifically showing the value of `request.form['body']`.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/flaskr/templates/blog/create.html#_snippet_0

LANGUAGE: Jinja2
CODE:
```
{% extends 'base.html' %} {% block header %}

{% block title %}New Post{% endblock %}
=======================================

{% endblock %} {% block content %}

Title  Body {{ request.form['body'] }} 

{% endblock %}
```

----------------------------------------

TITLE: Execute Raw SQL Statement with SQLAlchemy Engine
DESCRIPTION: This example demonstrates how to execute a raw SQL string directly using the SQLAlchemy engine's `execute` method. It supports parameterized queries for security and flexibility, allowing direct interaction with the database when ORM is not preferred.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_14

LANGUAGE: Python
CODE:
```
engine.execute('select * from users where id = :1', [1]).first()
```

----------------------------------------

TITLE: Test Flask Request Context Activation
DESCRIPTION: This Python snippet shows how to activate a request context directly using `with app.test_request_context()`. This allows testing functions that access `request`, `session`, or `current_app` by simulating a request environment with specific URL, method, and data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_10

LANGUAGE: python
CODE:
```
def test_validate_user_edit(app):
    with app.test_request_context(
        "/user/2/edit", method="POST", data={"name": ""}
    ):
        # call a function that accesses `request`
        messages = validate_edit_user()
```

----------------------------------------

TITLE: Defining Config Classes with Inheritance (Python)
DESCRIPTION: Shows how to define different configuration sets using Python classes and inheritance, providing a structured way to manage settings for various environments like development, testing, and production.
SOURCE: https://github.com/pallets/flask/blob/main/docs/config.rst#_snippet_21

LANGUAGE: python
CODE:
```
class Config(object):
    TESTING = False

class ProductionConfig(Config):
    DATABASE_URI = 'mysql://user@localhost/foo'

class DevelopmentConfig(Config):
    DATABASE_URI = "sqlite:////tmp/foo.db"

class TestingConfig(Config):
    DATABASE_URI = 'sqlite:///:memory:'
    TESTING = True
```

----------------------------------------

TITLE: Test Flask Database Connection and Closure
DESCRIPTION: Verifies that `get_db` returns the same database connection within an application context and that the connection is properly closed after the context exits, preventing further database operations.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_8

LANGUAGE: python
CODE:
```
import sqlite3

import pytest
from flaskr.db import get_db


def test_get_close_db(app):
    with app.app_context():
        db = get_db()
        assert db is get_db()

    with pytest.raises(sqlite3.ProgrammingError) as e:
        db.execute('SELECT 1')

    assert 'closed' in str(e.value)
```

----------------------------------------

TITLE: Install Testing Dependencies for Flask
DESCRIPTION: Instructions to install the `pytest` and `coverage` libraries using pip, which are essential for writing and measuring unit tests in Flask applications.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/tests.rst#_snippet_0

LANGUAGE: none
CODE:
```
$ pip install pytest coverage
```

----------------------------------------

TITLE: Clean Up with Flask appcontext_tearing_down Signal
DESCRIPTION: Demonstrates how to use the `appcontext_tearing_down` signal for application context cleanup. This signal is always called, even on exceptions, and can be used for tasks like closing database sessions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_27

LANGUAGE: python
CODE:
```
def close_db_connection(sender, **extra):
    session.close()

from flask import appcontext_tearing_down
appcontext_tearing_down.connect(close_db_connection, app)
```

----------------------------------------

TITLE: Flask Response.set_cookie Method
DESCRIPTION: Sets a cookie on the response object. Allows specifying various attributes to control cookie behavior and security.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_13

LANGUAGE: APIDOC
CODE:
```
response.set_cookie(
  key: str,
  value: str = '',
  max_age: Optional[int] = None, # Cookie expiration in seconds
  expires: Optional[Union[int, datetime]] = None, # Cookie expiration date/time
  path: str = '/',
  domain: Optional[str] = None,
  secure: bool = False, # Transmit cookie only over HTTPS
  httponly: bool = False, # Prevent client-side script access
  samesite: Optional[str] = None, # 'Lax', 'Strict', or 'None'
  **kwargs # Additional cookie attributes
)
```

----------------------------------------

TITLE: HTML+Jinja: Update Blog Post Template
DESCRIPTION: This Jinja2 template provides the HTML form for editing an existing blog post. It pre-fills the title and body fields with the current post data, allowing users to modify them. Additionally, it includes a separate form with a confirmation prompt for deleting the post.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_9

LANGUAGE: html+jinja
CODE:
```
{% extends 'base.html' %}

{% block header %}
  <h1>{% block title %}Edit "{{ post['title'] }}"{% endblock %}</h1>
{% endblock %}

{% block content %}
  <form method="post">
    <label for="title">Title</label>
    <input name="title" id="title"
          value="{{ request.form['title'] or post['title'] }}" required>
    <label for="body">Body</label>
    <textarea name="body" id="body">{{ request.form['body'] or post['body'] }}</textarea>
    <input type="submit" value="Save">
  </form>
  <hr>
  <form action="{{ url_for('blog.delete', id=post['id']) }}" method="post">
    <input class="danger" type="submit" value="Delete" onclick="return confirm('Are you sure?');">
  </form>
{% endblock %}
```

----------------------------------------

TITLE: Install mod_wsgi and application in a virtual environment
DESCRIPTION: This snippet provides the shell commands to set up a Python virtual environment, install your Flask application, and then install the `mod_wsgi` package within that environment, preparing it for deployment.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/mod_wsgi.rst#_snippet_0

LANGUAGE: text
CODE:
```
$ cd hello-app
$ python -m venv .venv
$ . .venv/bin/activate
$ pip install .
$ pip install mod_wsgi
```

----------------------------------------

TITLE: Install Flask-MongoEngine
DESCRIPTION: This snippet provides the command to install the Flask-MongoEngine library, which is a required dependency for integrating MongoDB with Flask applications using MongoEngine.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/mongoengine.rst#_snippet_0

LANGUAGE: bash
CODE:
```
pip install flask-mongoengine
```

----------------------------------------

TITLE: HTML+Jinja: Create New Blog Post Template
DESCRIPTION: This Jinja2 template defines the HTML form for creating a new blog post. It extends a base template, provides input fields for the post title and body, and pre-fills the title field with any previously submitted value from `request.form`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/tutorial/blog.rst#_snippet_6

LANGUAGE: html+jinja
CODE:
```
{% extends 'base.html' %}

{% block header %}
  <h1>{% block title %}New Post{% endblock %}</h1>
{% endblock %}

{% block content %}
  <form method="post">
    <label for="title">Title</label>
    <input name="title" id="title" value="{{ request.form['title'] }}" required>
    <label for="body">Body</label>
    <textarea name="body" id="body">{{ request.form['body'] }}</textarea>
    <input type="submit" value="Save">
  </form>
{% endblock %}
```

----------------------------------------

TITLE: Test Flask CLI Commands with Runner
DESCRIPTION: This Python snippet illustrates how to test Flask CLI commands using `Flask.test_cli_runner()`. It defines a simple CLI command and then uses the runner's `invoke` method to execute it with different arguments, asserting the command's output.
SOURCE: https://github.com/pallets/flask/blob/main/docs/testing.rst#_snippet_8

LANGUAGE: python
CODE:
```
import click

@app.cli.command("hello")
@click.option("--name", default="World")
def hello_command(name):
    click.echo(f"Hello, {name}!")

def test_hello_command(runner):
    result = runner.invoke(args="hello")
    assert "World" in result.output

    result = runner.invoke(args=["hello", "--name", "Flask"])
    assert "Flask" in result.output
```

----------------------------------------

TITLE: Serve ASGI Application with Hypercorn
DESCRIPTION: This shell command demonstrates how to serve an ASGI-wrapped Flask application using the Hypercorn ASGI server. The `module:asgi_app` syntax specifies the Python module containing the `asgi_app` instance to be served.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/asgi.rst#_snippet_1

LANGUAGE: text
CODE:
```
$ hypercorn module:asgi_app
```

----------------------------------------

TITLE: Converting to Basic Flask Class-based View
DESCRIPTION: Shows the initial conversion of a function-based view to a `flask.views.View` subclass. The `dispatch_request` method handles the request logic, and the view is registered using `app.add_url_rule` with `UserList.as_view("user_list")`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#_snippet_1

LANGUAGE: python
CODE:
```
from flask.views import View

class UserList(View):
    def dispatch_request(self):
        users = User.query.all()
        return render_template("users.html", objects=users)

app.add_url_rule("/users/", view_func=UserList.as_view("user_list"))
```

----------------------------------------

TITLE: Run Flask Development Server from Python Code
DESCRIPTION: Start the Flask development server programmatically using the `app.run()` method. It's recommended to place this call within an `if __name__ == "__main__":` block to prevent interference when importing the application for production servers. Note that the server will crash on reload errors when run this way.
SOURCE: https://github.com/pallets/flask/blob/main/docs/server.rst#_snippet_2

LANGUAGE: python
CODE:
```
if __name__ == "__main__":
    app.run(debug=True)
```

----------------------------------------

TITLE: Flask Session.permanent Attribute
DESCRIPTION: A boolean attribute of the Flask session object. If set to `True`, the session cookie will persist for the duration specified by `PERMANENT_SESSION_LIFETIME`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_14

LANGUAGE: APIDOC
CODE:
```
session.permanent: bool
```

----------------------------------------

TITLE: Flask Jinja2 Standard Context Variables
DESCRIPTION: This API documentation lists the global variables and functions that are available within Jinja2 templates by default when using Flask. It includes configuration, request, session, and global objects, as well as utility functions like url_for and get_flashed_messages.
SOURCE: https://github.com/pallets/flask/blob/main/docs/templating.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
config:
  Description: The current configuration object (flask.Flask.config)
  Version Added: 0.6
  Version Changed: 0.10 (Always available, even in imported templates)
request:
  Description: The current request object (flask.request)
  Availability: Unavailable if the template was rendered without an active request context
session:
  Description: The current session object (flask.session)
  Availability: Unavailable if the template was rendered without an active request context
g:
  Description: The request-bound object for global variables (flask.g)
  Availability: Unavailable if the template was rendered without an active request context
url_for:
  Description: The flask.url_for function
get_flashed_messages:
  Description: The flask.get_flashed_messages function
```

----------------------------------------

TITLE: Combine Flask Applications with DispatcherMiddleware
DESCRIPTION: Shows how to use Werkzeug's DispatcherMiddleware to combine multiple Flask applications (or any WSGI apps) under different URL prefixes, such as a frontend app on '/' and a backend app on '/backend'. This allows entirely separated applications to work next to each other in the same Python interpreter process.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appdispatch.rst#_snippet_1

LANGUAGE: python
CODE:
```
from werkzeug.middleware.dispatcher import DispatcherMiddleware
from frontend_app import application as frontend
from backend_app import application as backend

application = DispatcherMiddleware(frontend, {
    '/backend': backend
})
```

----------------------------------------

TITLE: SQLAlchemy Connection.execute Method
DESCRIPTION: Documents the `execute` method of SQLAlchemy's `Connection` object, which allows direct execution of SQL statements. It supports both raw SQL strings and SQLAlchemy expression constructs, providing a versatile interface for database operations.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlalchemy.rst#_snippet_15

LANGUAGE: APIDOC
CODE:
```
sqlalchemy.engine.base.Connection.execute(statement, *multiparams, **params)

Parameters:
  statement: The SQL statement to be executed. This can be a plain string of SQL or a SQLAlchemy ClauseElement (e.g., Select, Insert, Update, Delete).
  *multiparams: A list of parameter sets for the statement. Used for executemany.
  **params: Keyword parameters for the statement. Used for single execution.

Returns:
  sqlalchemy.engine.ResultProxy: An object representing the results of the executed statement.
```

----------------------------------------

TITLE: Handle Exceptions with Flask got_request_exception Signal
DESCRIPTION: Shows how to use the `got_request_exception` signal to log or handle unhandled exceptions during request processing. It demonstrates filtering for specific exception types like `SecurityException`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_23

LANGUAGE: python
CODE:
```
from flask import got_request_exception

def log_security_exception(sender, exception, **extra):
    if not isinstance(exception, SecurityException):
        return

    security_logger.exception(
        f"SecurityException at {request.url!r}",
        exc_info=exception,
    )

got_request_exception.connect(log_security_exception, app)
```

----------------------------------------

TITLE: Flask Route and add_url_rule Parameters
DESCRIPTION: Documents the available parameters for Flask's `route` decorator and `add_url_rule` function, including `rule`, `endpoint`, `view_func`, `defaults`, `subdomain`, and `**options` (e.g., `methods`).
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_39

LANGUAGE: APIDOC
CODE:
```
Parameters for flask.Flask.route and flask.Flask.add_url_rule:

rule (string):
  The URL rule as string.

endpoint (string):
  The endpoint for the registered URL rule. Flask assumes the view function's name is the endpoint if not explicitly stated.

view_func (function):
  The function to call when serving a request to the provided endpoint. If not provided, it can be specified later by storing it in the `flask.Flask.view_functions` dictionary with the endpoint as key.

defaults (dict):
  A dictionary with defaults for this rule.

subdomain (string):
  Specifies the rule for the subdomain in case subdomain matching is in use. If not specified, the default subdomain is assumed.

**options (keyword arguments):
  Options to be forwarded to the underlying `werkzeug.routing.Rule` object. Includes `methods` (list of HTTP methods like GET, POST) to which this rule should be limited. By default, a rule listens for GET (and implicitly HEAD). Starting with Flask 0.6, OPTIONS is implicitly added and handled by standard request handling. These must be specified as keyword arguments.
```

----------------------------------------

TITLE: Organize Flask CLI commands into a group
DESCRIPTION: This example shows how to group related commands under a common parent, 'user', using 'flask.cli.AppGroup'. The 'create' command is nested under 'user', allowing for better organization of multiple commands. The group is then added to the application's CLI.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_10

LANGUAGE: Python
CODE:
```
import click
from flask import Flask
from flask.cli import AppGroup

app = Flask(__name__)
user_cli = AppGroup('user')

@user_cli.command('create')
@click.argument('name')
def create_user(name):
    ...

app.cli.add_command(user_cli)
```

LANGUAGE: Shell
CODE:
```
$ flask user create demo
```

----------------------------------------

TITLE: Customizing Flask URL Rules with View Function Attributes
DESCRIPTION: Demonstrates how to set 'provide_automatic_options' and 'methods' attributes directly on a view function to control HTTP OPTIONS responses and allowed methods. The example then registers this customized function with 'app.add_url_rule'.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_40

LANGUAGE: Python
CODE:
```
def index():
    if request.method == 'OPTIONS':
        # custom options handling here
        ...
    return 'Hello World!'
index.provide_automatic_options = False
index.methods = ['GET', 'OPTIONS']

app.add_url_rule('/', index)
```

----------------------------------------

TITLE: Registering a Child Blueprint on a Parent Blueprint
DESCRIPTION: Demonstrates how to register a child Blueprint on a parent Blueprint in Flask. The child's name and URLs will automatically gain the parent's prefix.
SOURCE: https://github.com/pallets/flask/blob/main/docs/blueprints.rst#_snippet_5

LANGUAGE: python
CODE:
```
parent = Blueprint('parent', __name__, url_prefix='/parent')
child = Blueprint('child', __name__, url_prefix='/child')
parent.register_blueprint(child)
app.register_blueprint(parent)
```

----------------------------------------

TITLE: Storing Request-Local Data in Flask g (Python)
DESCRIPTION: This snippet demonstrates two methods for storing extension-specific data within the request-local `flask.g` object. It shows using a simple prefix or a namespace object to avoid potential naming collisions with user data or other extensions.
SOURCE: https://github.com/pallets/flask/blob/main/docs/extensiondev.rst#_snippet_2

LANGUAGE: python
CODE:
```
# an internal prefix with the extension name
g._hello_user_id = 2

# or an internal prefix as a namespace
from types import SimpleNamespace
g._hello = SimpleNamespace()
g._hello.user_id = 2
```

----------------------------------------

TITLE: Using the Generic Query Function (Multiple Results)
DESCRIPTION: Example of using the `query_db` function to fetch multiple rows and iterate through them, accessing data by dictionary keys (assuming a row factory is set for dictionary or Row objects).
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#_snippet_7

LANGUAGE: Python
CODE:
```
for user in query_db('select * from users'):
    print(user['username'], 'has the id', user['user_id'])
```

----------------------------------------

TITLE: Wrap Flask WSGI App for ASGI with asgiref
DESCRIPTION: This Python snippet demonstrates how to convert a standard Flask WSGI application into an ASGI-compatible application using the `WsgiToAsgi` adapter from the `asgiref` library. This allows Flask applications to be served by ASGI servers like Hypercorn, integrating with Flask's async/await support.
SOURCE: https://github.com/pallets/flask/blob/main/docs/deploying/asgi.rst#_snippet_0

LANGUAGE: python
CODE:
```
from asgiref.wsgi import WsgiToAsgi
from flask import Flask

app = Flask(__name__)

...

asgi_app = WsgiToAsgi(app)
```

----------------------------------------

TITLE: HTML Hidden Input for Redirect 'next' Parameter
DESCRIPTION: Provides an HTML snippet for a hidden input field to pass the 'next' URL parameter from a GET request to a POST request on the login form. This allows redirecting the user back to their original page after successful login.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/viewdecorators.rst#_snippet_2

LANGUAGE: html
CODE:
```
<input type="hidden" value="{{ request.args.get('next', '') }}"/>
```

----------------------------------------

TITLE: Flask Application with LazyView for Deferred Loading
DESCRIPTION: Shows how to integrate the `LazyView` class with `app.add_url_rule` to defer the loading of view functions until they are actually needed. This significantly improves application startup time by avoiding upfront imports.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/lazyloading.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from flask import Flask
from yourapplication.helpers import LazyView
app = Flask(__name__)
app.add_url_rule('/',
                     view_func=LazyView('yourapplication.views.index'))
app.add_url_rule('/user/<username>',
                     view_func=LazyView('yourapplication.views.user'))
```

----------------------------------------

TITLE: Run Pytest for Flaskr
DESCRIPTION: Command to execute the test suite for the Flaskr application using pytest, verifying application functionality.
SOURCE: https://github.com/pallets/flask/blob/main/examples/tutorial/README.rst#_snippet_6

LANGUAGE: bash
CODE:
```
$ pytest
```

----------------------------------------

TITLE: Prepare Server-Side Data for JavaScript in Flask
DESCRIPTION: This Python snippet demonstrates how to prepare data on the server-side using Flask and pass it to a Jinja template. This data can then be safely embedded into client-side JavaScript.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/javascript.rst#_snippet_0

LANGUAGE: python
CODE:
```
data = generate_report()
return render_template("report.html", chart_data=data)
```

----------------------------------------

TITLE: Flask Test Client API Reference
DESCRIPTION: Documents the `FlaskClient` class, which provides an interface for testing Flask applications programmatically, including its members.
SOURCE: https://github.com/pallets/flask/blob/main/docs/api.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
FlaskClient:
  Type: Class
  Description: Provides an interface for testing Flask applications.
  Members: All members are documented.
```

----------------------------------------

TITLE: itsdangerous.TimedSerializer Class
DESCRIPTION: A class from the `itsdangerous` library used to sign and validate values with a time-based signature. It is suitable for securing cookie values or other data that requires integrity and expiration.
SOURCE: https://github.com/pallets/flask/blob/main/docs/web-security.rst#_snippet_16

LANGUAGE: APIDOC
CODE:
```
itsdangerous.TimedSerializer
```

----------------------------------------

TITLE: Running Flask Application with Factory Arguments
DESCRIPTION: Illustrates how to pass keyword arguments to a Flask application factory directly from the command line. This allows for dynamic configuration of the application instance at runtime.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/appfactories.rst#_snippet_5

LANGUAGE: text
CODE:
```
$ flask --app 'hello:create_app(local_auth=True)' run
```

----------------------------------------

TITLE: HTML+Jinja: Example 500 Internal Server Error Page Template
DESCRIPTION: This Jinja2 template defines a custom page for 500 'Internal Server Error'. It extends a base layout, provides a clear title and message indicating a server-side issue, and offers a link for the user to navigate away.
SOURCE: https://github.com/pallets/flask/blob/main/docs/errorhandling.rst#_snippet_11

LANGUAGE: html+jinja
CODE:
```
{% extends "layout.html" %}
{% block title %}Internal Server Error{% endblock %}
{% block body %}
  <h1>Internal Server Error</h1>
  <p>Oops... we seem to have made a mistake, sorry!</p>
  <p><a href="{{ url_for('index') }}">Go somewhere nice instead</a>
{% endblock %}
```

----------------------------------------

TITLE: Using sqlite3.Row for Query Results
DESCRIPTION: Illustrates how to set `db.row_factory` to `sqlite3.Row` to get namedtuple-like objects for query results, allowing access by both index and key, providing a convenient way to handle fetched data.
SOURCE: https://github.com/pallets/flask/blob/main/docs/patterns/sqlite3.rst#_snippet_4

LANGUAGE: Python
CODE:
```
db.row_factory = sqlite3.Row
```

----------------------------------------

TITLE: Define a Flask CLI command for a plugin
DESCRIPTION: This snippet shows the Python code for a Click command that would be exposed via a Flask plugin entry point. The 'cli' function is a simple Click command that can be invoked via 'flask my-command' once the plugin is installed.
SOURCE: https://github.com/pallets/flask/blob/main/docs/cli.rst#_snippet_16

LANGUAGE: Python
CODE:
```
import click

@click.command()
def cli():
    ...
```

----------------------------------------

TITLE: Apply Decorators to Flask View Class
DESCRIPTION: Demonstrates how to apply multiple decorators to a Flask `View` class by setting the `decorators` attribute, ensuring they are applied to the view function returned by `as_view`.
SOURCE: https://github.com/pallets/flask/blob/main/docs/views.rst#_snippet_7

LANGUAGE: python
CODE:
```
class UserList(View):
    decorators = [cache(minutes=2), login_required]

app.add_url_rule('/users/', view_func=UserList.as_view())
```