TITLE: Opening a Document from File (Python)
DESCRIPTION: Illustrates the primary method to open an existing document file using `pymupdf.open()`, which returns a `Document` object. The input `filename` can be a string or `pathlib.Path`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/tutorial.rst#_snippet_1

LANGUAGE: Python
CODE:
```
doc = pymupdf.open(filename)  # or pymupdf.Document(filename)
```

----------------------------------------

TITLE: Converting Office to PDF (Python)
DESCRIPTION: This example illustrates converting an Office document (here, an .xlsx file) to PDF format using PyMuPDF Pro. After unlocking the library, the document is opened, converted to PDF data using `convert_to_pdf()`, and then saved to a local file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf-pro.rst#_snippet_2

LANGUAGE: python
CODE:
```
import pymupdf.pro
pymupdf.pro.unlock()

doc = pymupdf.open("my-office-doc.xlsx")

pdfdata = doc.convert_to_pdf()
with open('output.pdf', 'wb') as f:
    f.write(pdfdata)
```

----------------------------------------

TITLE: Converting PDF to Markdown with PyMuPDF4LLM (Python)
DESCRIPTION: This Python snippet utilizes the 'pymupdf4llm' helper package to convert an input PDF document into a Markdown-formatted string. It then demonstrates how to write this generated Markdown text to an output file, ensuring proper UTF-8 encoding.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/rag.rst#_snippet_3

LANGUAGE: python
CODE:
```
# convert the document to markdown
import pymupdf4llm
md_text = pymupdf4llm.to_markdown("input.pdf")

# Write the text to some file in UTF8-encoding
import pathlib
pathlib.Path("output.md").write_bytes(md_text.encode())
```

----------------------------------------

TITLE: Installing PyMuPDF with pip
DESCRIPTION: This command installs the PyMuPDF library using pip, the Python package installer. It is the standard and recommended way to set up PyMuPDF, requiring Python 3.9 or later.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
pip install PyMuPDF
```

----------------------------------------

TITLE: Loading Documents with LlamaIndex PyMuPDFReader (Python)
DESCRIPTION: This snippet shows how to use the PyMuPDFReader from LlamaIndex to manage document loading for a PDF file. It instantiates the reader and then uses its 'load()' method, providing the file path to retrieve the document objects.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/rag.rst#_snippet_2

LANGUAGE: python
CODE:
```
from llama_index.readers.file import PyMuPDFReader
loader = PyMuPDFReader()
documents = loader.load(file_path="example.pdf")
```

----------------------------------------

TITLE: Loading Documents with LangChain PyMuPDFLoader (Python)
DESCRIPTION: This snippet demonstrates how to load a PDF document using LangChain's dedicated PyMuPDFLoader. It initializes the loader with the path to the PDF file and then calls the 'load()' method to retrieve the document data.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/rag.rst#_snippet_1

LANGUAGE: python
CODE:
```
from langchain_community.document_loaders import PyMuPDFLoader
loader = PyMuPDFLoader("example.pdf")
data = loader.load()
```

----------------------------------------

TITLE: Cleaning Corrupt PDFs with PyMuPDF and pdfrw (Python)
DESCRIPTION: This snippet provides a Python function `reader` that attempts to open a PDF using `pdfrw`. If `pdfrw` fails (e.g., due to corruption or encryption), it uses PyMuPDF to repair, decompress, or decrypt the PDF, then retries opening the cleaned version with `pdfrw`. It handles password-protected PDFs.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-common-issues-and-their-solutions.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import sys
from io import BytesIO
from pdfrw import PdfReader
import pymupdf

#---------------------------------------
# 'Tolerant' PDF reader
#---------------------------------------
def reader(fname, password = None):
    idata = open(fname, "rb").read()  # read the PDF into memory and
    ibuffer = BytesIO(idata)  # convert to stream
    if password is None:
        try:
            return PdfReader(ibuffer)  # if this works: fine!
        except:
            pass

    # either we need a password or it is a problem-PDF
    # create a repaired / decompressed / decrypted version
    doc = pymupdf.open("pdf", ibuffer)
    if password is not None:  # decrypt if password provided
        rc = doc.authenticate(password)
        if not rc > 0:
            raise ValueError("wrong password")
    c = doc.tobytes(garbage=3, deflate=True)
    del doc  # close & delete doc
    return PdfReader(BytesIO(c))  # let pdfrw retry
#---------------------------------------
# Main program
#---------------------------------------
pdf = reader("pymupdf.pdf", password = None) # include a password if necessary
print pdf.Info
# do further processing
```

----------------------------------------

TITLE: Basic Document Processing with PyMuPDF in Python
DESCRIPTION: This Python snippet demonstrates the fundamental steps to open a PDF document, iterate through its pages, and extract plain text content using the PyMuPDF library. It illustrates basic document loading and text extraction functionality.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/README.md#_snippet_1

LANGUAGE: Python
CODE:
```
import pymupdf # imports the pymupdf library
doc = pymupdf.open("example.pdf") # open a document
for page in doc: # iterate the document pages
  text = page.get_text() # get plain text encoded as UTF-8
```

----------------------------------------

TITLE: Adding Redaction Annotation - PyMuPDF Python
DESCRIPTION: Adds a redaction annotation to a PDF, marking an area for content removal. This is the first step before applying the redaction with `Page.apply_redactions`. It takes a `quad_like` or `rect_like` object for the area and supports optional text to be placed after redaction, along with styling parameters like font, size, alignment, fill, and text color.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_8

LANGUAGE: Python
CODE:
```
add_redact_annot(quad, text=None, fontname=None, fontsize=11, align=TEXT_ALIGN_LEFT, fill=(1, 1, 1), text_color=(0, 0, 0), cross_out=True)
```

----------------------------------------

TITLE: Extract PDF as Markdown using PyMuPDF4LLM
DESCRIPTION: This Python snippet demonstrates how to use PyMuPDF4LLM to convert a PDF file into a Markdown formatted string. It imports the library and calls the `to_markdown` function with the input filename.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf4llm/index.rst#_snippet_1

LANGUAGE: python
CODE:
```
import pymupdf4llm
md_text = pymupdf4llm.to_markdown("input.pdf")
```

----------------------------------------

TITLE: Initializing PyMuPDF Document Object
DESCRIPTION: This snippet defines the constructor for the `Document` class, used to create new empty PDF documents or open existing documents from a file path or a memory stream. It supports various parameters for specifying the document type, page dimensions (for reflowable documents), and a default font size.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_1

LANGUAGE: Python
CODE:
```
__init__(self, filename=None, stream=None, *, filetype=None, rect=None, width=0, height=0, fontsize=11)
```

----------------------------------------

TITLE: Opening a Document in PyMuPDF
DESCRIPTION: This snippet demonstrates the basic way to open a document file using the `pymupdf.open()` function. It takes the file path as input and returns a `Document` object.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_0

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open("a.pdf") # open a document
```

----------------------------------------

TITLE: Converting Documents to PDF with PyMuPDF (Python)
DESCRIPTION: This script converts any document supported by PyMuPDF (XPS, EPUB, FB2, CBZ, images) to a PDF. It preserves the table of contents and metadata from the source document and attempts to transfer links, skipping `LINK_NAMED` types. It requires PyMuPDF v1.14.0+.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-common-issues-and-their-solutions.rst#_snippet_1

LANGUAGE: Python
CODE:
```
"""
Demo script: Convert input file to a PDF
-----------------------------------------
Intended for multi-page input files like XPS, EPUB etc.

Features:
---------
Recovery of table of contents and links of input file.
While this works well for bookmarks (outlines, table of contents),
links will only work if they are not of type "LINK_NAMED".
This link type is skipped by the script.

For XPS and EPUB input, internal links however **are** of type "LINK_NAMED".
Base library MuPDF does not resolve them to page numbers.

So, for anyone expert enough to know the internal structure of these
document types, can further interpret and resolve these link types.

Dependencies
--------------
PyMuPDF v1.14.0+
"""
import sys
import pymupdf
if not (list(map(int, pymupdf.VersionBind.split("."))) >= [1,14,0]):
    raise SystemExit("need PyMuPDF v1.14.0+")
fn = sys.argv[1]

print("Converting '%s' to '%s.pdf'" % (fn, fn))

doc = pymupdf.open(fn)

b = doc.convert_to_pdf()  # convert to pdf
pdf = pymupdf.open("pdf", b)  # open as pdf

toc= doc.get_toc()  # table of contents of input
pdf.set_toc(toc)  # simply set it for output
meta = doc.metadata  # read and set metadata
if not meta["producer"]:
    meta["producer"] = "PyMuPDF v" + pymupdf.VersionBind

if not meta["creator"]:
    meta["creator"] = "PyMuPDF PDF converter"
meta["modDate"] = pymupdf.get_pdf_now()
meta["creationDate"] = meta["modDate"]
pdf.set_metadata(meta)

# now process the links
link_cnti = 0
link_skip = 0
for pinput in doc:  # iterate through input pages
    links = pinput.get_links()  # get list of links
    link_cnti += len(links)  # count how many
    pout = pdf[pinput.number]  # read corresp. output page
    for l in links:  # iterate though the links
        if l["kind"] == pymupdf.LINK_NAMED:  # we do not handle named links
            print("named link page", pinput.number, l)
            link_skip += 1  # count them
            continue
        pout.insert_link(l)  # simply output the others

# save the conversion result
pdf.save(fn + ".pdf", garbage=4, deflate=True)
# say how many named links we skipped
if link_cnti > 0:
```

----------------------------------------

TITLE: Using TocHeaders Class for Headers in pymupdf4llm (Python)
DESCRIPTION: This snippet demonstrates the use of the built-in `pymupdf4llm.TocHeaders` class to handle header identification. An instance of `TocHeaders` is created with the document object and passed to the `hdr_info` parameter of `pymupdf4llm.to_markdown`. This method uses the document's TOC directly.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf4llm/api.rst#_snippet_3

LANGUAGE: Python
CODE:
```
import pymupdf, pymupdf4llm

filename = "input.pdf"

doc = pymupdf.open(filename)  # use a Document for subsequent processing
my_headers = pymupdf4llm.TocHeaders(doc)  # use the table of contents for determining headers
    
# this will *NOT* scan the document for font sizes!
md_text = pymupdf4llm.to_markdown(doc, hdr_info=my_headers)
```

----------------------------------------

TITLE: Opening Documents with PyMuPDF in Python
DESCRIPTION: This snippet demonstrates various ways to open documents using `pymupdf.open()`. It covers opening from a file path, specifying `filetype` for incorrect extensions, opening from a memory stream, and creating new empty PDF documents. The `open` function is a synonym for the `Document` class constructor.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_2

LANGUAGE: Python
CODE:
```
# from a file
doc = pymupdf.open("some.xps")
# handle wrong extension
doc = pymupdf.open("some.file", filetype="xps")  # assert expected type
doc = pymupdf.open("some.file", filetype="txt")  # treat as plain text
# from memory
doc = pymupdf.open(stream=mem_area)  # works for any supported type
doc = pymupdf.open(stream=unknown-type, filetype="txt")  # treat as plain text
# new empty PDF
doc = pymupdf.open()
doc = pymupdf.open(None)
doc = pymupdf.open("")
```

----------------------------------------

TITLE: Merging Two PDF Files in PyMuPDF
DESCRIPTION: This example demonstrates how to merge the content of one PDF document into another using the `insert_pdf()` method. It opens two documents, merges the second into the first, and saves the result to a new file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_5

LANGUAGE: python
CODE:
```
import pymupdf

doc_a = pymupdf.open("a.pdf") # open the 1st document
doc_b = pymupdf.open("b.pdf") # open the 2nd document

doc_a.insert_pdf(doc_b) # merge the docs
doc_a.save("a+b.pdf") # save the merged document with a new filename
```

----------------------------------------

TITLE: Extracting All Document Text using PyMuPDF (Python)
DESCRIPTION: This script extracts all text from a given document filename using PyMuPDF. It opens the document, iterates through its pages to collect text, and then writes the combined text to a new file named 'filename.txt'. The output is a plain text file, with pages separated by a form feed character, and supports non-ASCII characters by writing as binary.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import sys, pathlib, pymupdf
fname = sys.argv[1]  # get document filename
with pymupdf.open(fname) as doc:  # open document
    text = chr(12).join([page.get_text() for page in doc])
# write as a binary file to support non-ASCII characters
pathlib.Path(fname + ".txt").write_bytes(text.encode())
```

----------------------------------------

TITLE: Saving Document with Optimization in PyMuPDF (Python)
DESCRIPTION: Demonstrates how to save a PyMuPDF document (`doc`) to a specified `filename` using optimization options. `garbage=4` performs aggressive garbage collection and object merging, while `deflate=True` compresses streams. This corresponds to the `mutool clean -ggggz` command.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/tutorial.rst#_snippet_5

LANGUAGE: Python
CODE:
```
doc.save(filename, garbage=4, deflate=True)
```

----------------------------------------

TITLE: Applying Redactions to Page Content in PyMuPDF
DESCRIPTION: This snippet shows the signature of the `apply_redactions` method, which processes and removes content within redaction annotations on a PDF page. It highlights the default values for redacting images, graphics, and text, using predefined constants to control the redaction behavior for each content type.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_9

LANGUAGE: Python
CODE:
```
page.apply_redactions(images=fitz.PDF_REDACT_IMAGE_PIXELS, graphics=fitz.PDF_REDACT_LINE_ART_REMOVE_IF_TOUCHED, text=fitz.PDF_REDACT_TEXT_REMOVE)
```

----------------------------------------

TITLE: Opening a Local File with PyMuPDF
DESCRIPTION: Demonstrates the basic method to open a local file using `pymupdf.open()`. This function is an alias for `pymupdf.Document()` and creates a Document object from the specified file path.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/how-to-open-a-file.rst#_snippet_0

LANGUAGE: python
CODE:
```
doc = pymupdf.open("a.pdf")
```

----------------------------------------

TITLE: Install or Upgrade PyMuPDF via Pip
DESCRIPTION: Use pip to install or upgrade the PyMuPDF library. This command will install from a pre-built wheel if available for the platform, otherwise it will attempt to build from source.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/installation.rst#_snippet_2

LANGUAGE: Shell
CODE:
```
pip install --upgrade pymupdf
```

----------------------------------------

TITLE: Extracting All Images from a Document in PyMuPDF
DESCRIPTION: This code iterates through document pages, retrieves a list of images on each page using `page.get_images()`, creates a `Pixmap` for each image (handling CMYK conversion), and saves the image as a PNG file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_3

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open a document

for page_index in range(len(doc)): # iterate over pdf pages
    page = doc[page_index] # get the page
    image_list = page.get_images()

    # print the number of images found on the page
    if image_list:
        print(f"Found {len(image_list)} images on page {page_index}")
    else:
        print("No images found on page", page_index)

    for image_index, img in enumerate(image_list, start=1): # enumerate the image list
        xref = img[0] # get the XREF of the image
        pix = pymupdf.Pixmap(doc, xref) # create a Pixmap

        if pix.n - pix.alpha > 3: # CMYK: convert to RGB first
            pix = pymupdf.Pixmap(pymupdf.csRGB, pix)

        pix.save("page_%s-image_%s.png" % (page_index, image_index)) # save the image as png
        pix = None
```

----------------------------------------

TITLE: Initializing a Document Object in PyMuPDF
DESCRIPTION: This snippet demonstrates how to instantiate a `Document` object in PyMuPDF. It shows both the direct use of the `pymupdf.Document` constructor and its convenient alias, `pymupdf.open`, highlighting that both achieve the same result of opening a document from a specified path.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_0

LANGUAGE: python
CODE:
```
import pymupdf

# Open a document using the Document class constructor
doc_from_document = pymupdf.Document("path/to/your/document.pdf")

# Open a document using the 'open' alias (recommended for brevity)
doc_from_open = pymupdf.open("path/to/your/document.pdf")

# Remember to close documents when done
doc_from_document.close()
doc_from_open.close()
```

----------------------------------------

TITLE: Example: Join Multiple PDFs with PyMuPDF (Shell)
DESCRIPTION: Provides a concrete example of using the `pymupdf join` command to merge three PDF files. It demonstrates specifying different page ranges (including reverse order and ranges), passwords, and the output filename in a single command.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_7

LANGUAGE: Shell
CODE:
```
pymupdf join -o output.pdf file1.pdf,,N-1 file2.pdf,secret,N,1 file3.pdf,,5-N
```

----------------------------------------

TITLE: Retrieving Text from Search Results using PyMuPDF
DESCRIPTION: This Python snippet demonstrates how to use `Page.search_for` to find occurrences of a string (e.g., "currency:") and then `Page.get_textbox` to extract the text from the bounding box of the first found occurrence. It illustrates a common workflow for verifying search results by retrieving the exact text found.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_31

LANGUAGE: Python
CODE:
```
>>> rl = page.search_for("currency:")
>>> page.get_textbox(rl[0])
'Currency:'
```

----------------------------------------

TITLE: Updating PyMuPDF Annotations Safely (Python)
DESCRIPTION: This snippet demonstrates the safe way to update annotations on a PyMuPDF page. Due to the requirement of reloading the page after most annotation updates, direct modification within the `annots()` generator is unsafe. Instead, collect annotation xref numbers first, then iterate and update each annotation individually, reloading the page after each update.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_23

LANGUAGE: Python
CODE:
```
xrefs = [annot.xref for annot in page.annots(types=[...])]
for xref in xrefs:
    annot = page.load_annot(xref)
    annot.update()
    page = doc.reload_page(page)
```

----------------------------------------

TITLE: Extracting Text from Image-Based Content using OCR in PyMuPDF
DESCRIPTION: This snippet demonstrates how to utilize OCR to extract text from pages that contain image-based content. It obtains an OCR text page representation using `page.get_textpage_ocr()` and then extracts text from it.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_2

LANGUAGE: python
CODE:
```
tp = page.get_textpage_ocr()
text = page.get_text(textpage=tp)
```

----------------------------------------

TITLE: Outputting HTML Tables and Images with PyMuPDF
DESCRIPTION: This example illustrates how to render HTML tables and embedded images within a PDF using `pymupdf.insert_htmlbox`. It includes CSS directly in the HTML for styling and uses `pymupdf.Archive('.')` to specify the base directory for image resolution, allowing `img` tags to correctly load local images.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_12

LANGUAGE: Python
CODE:
```
import pymupdf
import os

filedir = os.path.dirname(__file__)


text = """
<style>
body {
    font-family: sans-serif;
}

td,
th {
    border: 1px solid blue;
    border-right: none;
    border-bottom: none;
    padding: 5px;
    text-align: center;
}

table {
    border-right: 1px solid blue;
    border-bottom: 1px solid blue;
    border-spacing: 0;
}
</style>

<body>
<p><b>Some Colors</b></p>
<table>
    <tr>
    <th>Lime</th>
    <th>Lemon</th>
    <th>Image</th>
    <th>Mauve</th>
    </tr>
    <tr>
    <td>Green</td>
    <td>Yellow</td>
    <td><img src="img-cake.png" width=50></td>
    <td>Between<br>Gray and Purple</td>
    </tr>
</table>
</body>
"""

doc = pymupdf.Document()

page = doc.new_page()
rect = page.rect + (36, 36, -36, -36)

# we must specify an Archive because of the image
page.insert_htmlbox(rect, text, archive=pymupdf.Archive("."))

doc.ez_save(__file__.replace(".py", ".pdf"))
```

----------------------------------------

TITLE: Appending Text Horizontally with PyMuPDF TextWriter
DESCRIPTION: Adds a string of text to the TextWriter in horizontal writing mode, starting at a specified position. Allows customization of font, fontsize, language, right-to-left direction, and small caps.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/textwriter.rst#_snippet_2

LANGUAGE: Python
CODE:
```
append(pos, text, font=None, fontsize=11, language=None, right_to_left=False, small_caps=0)
```

----------------------------------------

TITLE: Chunking Markdown with LangChain MarkdownTextSplitter (Python)
DESCRIPTION: This snippet illustrates how to take Markdown output, previously generated by 'pymupdf4llm', and then use LangChain's 'MarkdownTextSplitter' to chunk the text. It initializes the splitter with specified chunk size and overlap, and then processes the Markdown text into smaller, manageable documents.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/rag.rst#_snippet_4

LANGUAGE: python
CODE:
```
import pymupdf4llm
from langchain.text_splitter import MarkdownTextSplitter

# Get the MD text
md_text = pymupdf4llm.to_markdown("input.pdf")  # get markdown for all pages

splitter = MarkdownTextSplitter(chunk_size=40, chunk_overlap=0)

splitter.create_documents([md_text])
```

----------------------------------------

TITLE: Redrawing Extracted PDF Drawings with PyMuPDF
DESCRIPTION: This comprehensive script demonstrates how to extract all vector drawing paths from a specified PDF page using `page.get_drawings()` and then recreate them on a new PDF page. It iterates through each path's drawing commands and properties, using the `Shape` object to render lines, rectangles, quads, and Bézier curves, finally saving the new PDF.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-drawing-and-graphics.rst#_snippet_3

LANGUAGE: Python
CODE:
```
import pymupdf
doc = pymupdf.open("some.file")
page = doc[0]
paths = page.get_drawings()  # extract existing drawings
# this is a list of "paths", which can directly be drawn again using Shape
# -------------------------------------------------------------------------
#
# define some output page with the same dimensions
outpdf = pymupdf.open()
outpage = outpdf.new_page(width=page.rect.width, height=page.rect.height)
shape = outpage.new_shape()  # make a drawing canvas for the output page
# --------------------------------------
# loop through the paths and draw them
# --------------------------------------
for path in paths:
    # ------------------------------------
    # draw each entry of the 'items' list
    # ------------------------------------
    for item in path["items"]:  # these are the draw commands
        if item[0] == "l":  # line
            shape.draw_line(item[1], item[2])
        elif item[0] == "re":  # rectangle
            shape.draw_rect(item[1])
        elif item[0] == "qu":  # quad
            shape.draw_quad(item[1])
        elif item[0] == "c":  # curve
            shape.draw_bezier(item[1], item[2], item[3], item[4])
        else:
            raise ValueError("unhandled drawing", item)
    # ------------------------------------------------------
    # all items are drawn, now apply the common properties
    # to finish the path
    # ------------------------------------------------------
    shape.finish(
        fill=path["fill"],  # fill color
        color=path["color"],  # line color
        dashes=path["dashes"],  # line dashing
        even_odd=path.get("even_odd", True),  # control color of overlaps
        closePath=path["closePath"],  # whether to connect last and first point
        lineJoin=path["lineJoin"],  # how line joins should look like
        lineCap=max(path["lineCap"]),  # how line ends should look like
        width=path["width"],  # line width
        stroke_opacity=path.get("stroke_opacity", 1),  # same value for both
        fill_opacity=path.get("fill_opacity", 1),  # opacity parameters
        )
# all paths processed - commit the shape to its page
shape.commit()
outpdf.save("drawings-page-0.pdf")
```

----------------------------------------

TITLE: Comparing PyMuPDF Image Extraction Performance (JPEG)
DESCRIPTION: This snippet highlights the significant performance and size advantages of `doc.extract_image(xref)` over `pymupdf.Pixmap(doc, xref).tobytes()` when extracting JPEG images. `extract_image` is shown to be orders of magnitude faster and produces a much smaller output file, making it the preferred method for non-PNG images.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_62

LANGUAGE: python
CODE:
```
In [27]: %timeit pix = pymupdf.Pixmap(doc, 1186);pix.tobytes()
341 ms ± 2.86 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
In [28]: len(pix.tobytes())
Out[28]: 2599433

In [29]: %timeit img = doc.extract_image(1186)
15.7 µs ± 116 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
In [30]: len(img["image"])
Out[30]: 371177
```

----------------------------------------

TITLE: Extract PDF as LlamaIndex Document using PyMuPDF4LLM
DESCRIPTION: This Python snippet illustrates how to use PyMuPDF4LLM's integration with LlamaIndex. It initializes a `LlamaMarkdownReader` and uses it to load data from a PDF file, returning a list of LlamaIndex Document objects.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf4llm/index.rst#_snippet_3

LANGUAGE: python
CODE:
```
import pymupdf4llm
llama_reader = pymupdf4llm.LlamaMarkdownReader()
llama_docs = llama_reader.load_data("input.pdf")
```

----------------------------------------

TITLE: Extracting All Text from a Document in PyMuPDF
DESCRIPTION: This example shows how to iterate through all pages of a document, extract the plain text content from each page using `page.get_text()`, encode it to UTF-8, and write it to an output file, including a form feed character as a page delimiter.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_1

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open("a.pdf") # open a document
out = open("output.txt", "wb") # create a text output
for page in doc: # iterate the document pages
    text = page.get_text().encode("utf8") # get plain text (is in UTF-8)
    out.write(text) # write text of page
    out.write(bytes((12,))) # write page delimiter (form feed 0x0C)
out.close()
```

----------------------------------------

TITLE: Getting All Annotations from a Document (PyMuPDF, Python)
DESCRIPTION: This snippet illustrates how to iterate through all pages of a document and retrieve all annotations present on each page using the `page.annots()` method. It then prints details about each annotation, including its page number, type, and bounding rectangle.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_33

LANGUAGE: python
CODE:
```
import pymupdf

for page in doc:
        for annot in page.annots():
            print(f'Annotation on page: {page.number} with type: {annot.type} and rect: {annot.rect}')
```

----------------------------------------

TITLE: Adding Formatted Text with HTML Source using PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to create a PyMuPDF Story from an HTML string, apply basic styling (font-family and color) defined within the HTML, and then write the content to a PDF document. It outlines the process of defining page dimensions, placing the story content within a specified area, and iterating to handle multi-page output.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-stories.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import pymupdf

HTML = """
<p style="font-family: sans-serif;color: blue">Hello World!</p>
"""

MEDIABOX = pymupdf.paper_rect("letter")  # output page format: Letter
WHERE = MEDIABOX + (36, 36, -36, -36)  # leave borders of 0.5 inches

story = pymupdf.Story(html=HTML)  # create story from HTML
writer = pymupdf.DocumentWriter("output.pdf")  # create the writer

more = 1  # will indicate end of input once it is set to 0

while more:  # loop outputting the story
    device = writer.begin_page(MEDIABOX)  # make new page
    more, _ = story.place(WHERE)  # layout into allowed rectangle
    story.draw(device)  # write on page
    writer.end_page()  # finish page

writer.close()  # close output file
```

----------------------------------------

TITLE: Create New PDF with Blank Page in PyMuPDF Python
DESCRIPTION: Creates a completely new PDF document containing a single blank page with default dimensions (A4 portrait) using `pymupdf.open()` and `Document.new_page()`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_26

LANGUAGE: python
CODE:
```
doc = pymupdf.open()
doc.new_page()
doc.save("A4.pdf")
```

----------------------------------------

TITLE: Converting Multiple Images to a Single PDF in PyMuPDF (Python)
DESCRIPTION: This snippet illustrates how to create a new PDF document and populate it with multiple image files, where each image becomes a separate page. It iterates through a list of image file names, opens each image as a temporary document, converts it to a single-page PDF, and then inserts that PDF into the main document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_12

LANGUAGE: python
CODE:
```
doc = pymupdf.open()                     # new PDF
imglist = [ ... image file names ...] # e.g. a directory listing
for img in imglist:
    imgdoc=pymupdf.open(img)           # open image as a document
    pdfbytes=imgdoc.convert_to_pdf()  # make a 1-page PDF of it
    imgpdf=pymupdf.open("pdf", pdfbytes)
    doc.insert_pdf(imgpdf)             # insert the image PDF
doc.save("allmyimages.pdf")
```

----------------------------------------

TITLE: Inserting Fonts in PyMuPDF (Python)
DESCRIPTION: Adds a new font to a PDF document for use by text output methods, returning its xref. If the font is not already present, its definition is added. It supports built-in Base14 Fonts, CJK fonts, and custom fonts via file paths or memory buffers. The 'fontname' parameter specifies how the font will be referenced; if it matches a reserved name, 'fontfile' and 'fontbuffer' are ignored, meaning custom fonts cannot use reserved names.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_29

LANGUAGE: Python
CODE:
```
insert_font(fontname="helv", fontfile=None, fontbuffer=None, set_simple=False, encoding=TEXT_ENCODING_LATIN)
```

----------------------------------------

TITLE: Add Blank Page to PDF in PyMuPDF Python
DESCRIPTION: Adds a new blank page to an existing or new PyMuPDF document at a specified insertion point (e.g., the end), setting its dimensions using `Document.new_page`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_24

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open(...) # some new or existing PDF document
page = doc.new_page(-1, # insertion point: end of document
                        width = 595, # page dimension: A4 portrait
                        height = 842)
doc.save("doc-with-new-blank-page.pdf") # save the document
```

----------------------------------------

TITLE: Creating PDF with Internal Links using PyMuPDF Story (Python)
DESCRIPTION: This snippet illustrates the use of `Story.write_stabilized_links()` to convert HTML content, including internal links, into a PDF document. Unlike `write_stabilized()`, this method directly returns a PDF `Document` instance and is specifically designed for PDF output with link preservation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-stories.rst#_snippet_6

LANGUAGE: Python
CODE:
```
import fitz # PyMuPDF
from fitz.story import Story

def create_stabilized_links_pdf(html_content: str, output_path: str):
    story = Story(html_content) # Initialize Story with HTML content
    
    # write_stabilized_links returns a Document instance directly
    doc = story.write_stabilized_links()
    
    doc.save(output_path) # Save the generated PDF
    doc.close()
    print(f"PDF with links saved to {output_path}")

if __name__ == "__main__":
    sample_html_with_links = """
    <h1>Document with Links</h1>
    <p>This is the <a href="#section1">first section</a> of the document.</p>
    <p>Some more text here.</p>
    <h2 id="section1">Section One</h2>
    <p>Content for section one. This section is linked from the top.</p>
    <p>Go back to the <a href="#top">top</a>.</p>
    """
    create_stabilized_links_pdf(sample_html_with_links, "stabilized_links_output.pdf")
```

----------------------------------------

TITLE: Merging PDFs and Updating TOCs with PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to merge two PDF documents (`doc2` into `doc1`) and subsequently update the Table of Contents (TOC) of the combined document. It first opens two PDF files, records their initial page counts and TOCs. After inserting `doc2` at the end of `doc1`, it iterates through `doc2`'s TOC entries, adjusting their page numbers by the original length of `doc1`, and then sets the combined TOC for `doc1`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_66

LANGUAGE: Python
CODE:
```
doc1 = pymupdf.open("file1.pdf")          # must be a PDF
doc2 = pymupdf.open("file2.pdf")          # must be a PDF
pages1 = len(doc1)                     # save doc1's page count
toc1 = doc1.get_toc(False)     # save TOC 1
toc2 = doc2.get_toc(False)     # save TOC 2
doc1.insert_pdf(doc2)                   # doc2 at end of doc1
for t in toc2:                         # increase toc2 page numbers
        t[2] += pages1                     # by old len(doc1)
doc1.set_toc(toc1 + toc2)               # now result has total TOC
```

----------------------------------------

TITLE: Displaying PDF Page with PyMuPDF Python
DESCRIPTION: Demonstrates the basic usage of the `Page.show_pdf_page` method to embed a page from a source PDF into the current page. It requires the source and target documents to be different objects. Key parameters control placement (`rect`), source document (`src`), source page number (`pno`), clipping (`clip`), rotation (`rotate`), visibility (`oc`), aspect ratio (`keep_proportion`), and layering (`overlay`).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_19

LANGUAGE: python
CODE:
```
page.show_pdf_page(
    rect,                  # where to place the image (rect-like)
    src,                   # source PDF
    pno=0,                 # page number in source PDF
    clip=None,             # only display this area (rect-like)
    rotate=0,              # rotate (float, any value)
    oc=0,                  # control visibility via OCG / OCMD
    keep_proportion=True,  # keep aspect ratio
    overlay=True,          # put in foreground
)
```

----------------------------------------

TITLE: Converting HTML to PDF with PyMuPDF Story and Element Positioning Callback
DESCRIPTION: This Python snippet demonstrates the process of converting HTML content into a multi-page PDF using `pymupdf.Story` and `pymupdf.DocumentWriter`. It showcases how to use `story.place` to calculate content layout and `story.element_positions` to register a callback function (`recorder`) that receives detailed information about each element's position and attributes on the page, allowing for custom logging or analysis.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/story-class.rst#_snippet_6

LANGUAGE: Python
CODE:
```
HTML = """
<html>
    <head></head>
    <body>
        <h1>Header level 1</h1>
        <h2>Header level 2</h2>
        <p>Hello MuPDF!</p>
    </body>
</html>
"""
MEDIABOX = pymupdf.paper_rect("letter")  # size of a page
WHERE = MEDIABOX + (36, 36, -36, -36)  # leave borders of 0.5 inches
story =  pymupdf.Story(html=HTML)  # make the story
writer = pymupdf.DocumentWriter("test.pdf")  # make the writer
pno = 0 # current page number
more = 1  # will be set to 0 when done
while more:  # loop until all story content is processed
    dev = writer.begin_page(MEDIABOX)  # make a device to write on the page
    more, filled = story.place(WHERE)  # compute content positions on page
    story.element_positions(recorder, {"page": pno})  # provide page number in addition
    story.draw(dev)
    writer.end_page()
    pno += 1  # increase page number
writer.close()  # close output file

def recorder(elpos):
    pass
```

----------------------------------------

TITLE: Provide Custom Header Logic Function (Python)
DESCRIPTION: This example shows how to provide a custom callable function to determine header levels instead of using the default `IdentifyHeaders` class. The function `my_headers` takes a text span dictionary and optionally the page, returning the appropriate markdown header prefix based on font size. This custom logic is then passed to the `to_markdown` function.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf4llm/api.rst#_snippet_1

LANGUAGE: Python
CODE:
```
import pymupdf, pymupdf4llm

filename = "input.pdf"
doc = pymupdf.open(filename)  # use a Document for subsequent processing

def my_headers(span, page=None):
    """
    Provide some custom header logic.
    This is a callable which accepts a text span and the page.
    Could be extended to check for other properties of the span, for
    instance the font name, text color and other attributes.
    """
    # header level is h1 if font size is larger than 14
    # header level is h2 if font size is larger than 10
    # otherwise it is body text
    if span["size"] > 14:
        return "# "
    elif span["size"] > 10:
        return "## "
    else:
        return ""

# this will *NOT* scan the document for font sizes!
```

----------------------------------------

TITLE: Iterating Over Document Pages - Python
DESCRIPTION: A new iterator, 'fitz.Pages(doc)', provides a convenient way to loop through all pages of a document, simplifying page-by-page processing tasks.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_19

LANGUAGE: Python
CODE:
```
import fitz

doc = fitz.open("input.pdf")

# Iterate over pages using fitz.Pages iterator
for page in fitz.Pages(doc):
    print(f"Processing Page Number: {page.number}")
    # Perform operations on 'page'

doc.close()
```

----------------------------------------

TITLE: Determine Page Rectangle - PyMuPDF Python
DESCRIPTION: Determines the rectangle of the page, identical to the `Page.rect` property. For PDF documents, this typically aligns with `mediabox` and `cropbox`, but unlike `cropbox`, it accurately reflects page rotations. It returns a `Rect` object representing the page's boundaries.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_0

LANGUAGE: Python
CODE:
```
bound()
```

----------------------------------------

TITLE: Use PyMuPDF4LLM with PyMuPDF Pro for Office Docs
DESCRIPTION: This Python example demonstrates how to use PyMuPDF4LLM to process Office documents (like .doc) by leveraging PyMuPDF Pro. It imports both libraries, unlocks PyMuPDF Pro functionality, and then calls `to_markdown` on the Office file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf4llm/index.rst#_snippet_4

LANGUAGE: python
CODE:
```
import pymupdf4llm
import pymupdf.pro
pymupdf.pro.unlock()
md_text = pymupdf4llm.to_markdown("sample.doc")
```

----------------------------------------

TITLE: Marking Text Occurrences in PyMuPDF
DESCRIPTION: This Python script defines a utility function `mark_word` that iterates through all words on a PyMuPDF page and underlines any word containing a specified substring. It leverages `Page.get_text("words")` to tokenize text and `Page.add_underline_annot` for visual marking. The main part of the script processes a document provided as a command-line argument, saving a new PDF with marked text if any matches are found.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_3

LANGUAGE: python
CODE:
```
import sys
import pymupdf

def mark_word(page, text):
    """Underline each word that contains 'text'.
    """
    found = 0
    wlist = page.get_text("words", delimiters=None)  # make the word list
    for w in wlist:  # scan through all words on page
        if text in w[4]:  # w[4] is the word's string
            found += 1  # count
            r = pymupdf.Rect(w[:4])  # make rect from word bbox
            page.add_underline_annot(r)  # underline
    return found

fname = sys.argv[1]  # filename
text = sys.argv[2]  # search string
doc = pymupdf.open(fname)

print("underlining words containing '%s' in document '%s'" % (text, doc.name))

new_doc = False  # indicator if anything found at all

for page in doc:  # scan through the pages
    found = mark_word(page, text)  # mark the page's words
    if found:  # if anything found ...
        new_doc = True
        print("found '%s' %i times on page %i" % (text, found, page.number + 1))

if new_doc:
    doc.save("marked-" + doc.name)
```

----------------------------------------

TITLE: Rendering HTML with Custom Fonts using PyMuPDF
DESCRIPTION: This snippet demonstrates how to render HTML content into a PDF page using `pymupdf.insert_htmlbox`, specifying custom fonts via CSS and an `Archive` object. It shows how to define different font files for regular, bold, and italic styles within a single font family and then subset the fonts to optimize file size.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_15

LANGUAGE: Python
CODE:
```
import pymupdf

# Example text (assumed from later example for completeness)
text = """Lorem ipsum dolor sit amet, consectetur adipisici elit, sed
        eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad
        minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b> 
        nisi ut aliquid ex ea commodi consequat. Quis aute iure 
        <span style=\"color: red;\">reprehenderit</span> 
        in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit 
        esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat 
        cupiditat non proident, sunt in culpa qui 
        <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id 
        est laborum."""

arch = pymupdf.Archive("C:/Windows/Fonts")
```

LANGUAGE: CSS
CODE:
```
@font-face {font-family: comic; src: url(comic.ttf);}
@font-face {font-family: comic; src: url(comicbd.ttf);font-weight: bold;}
@font-face {font-family: comic; src: url(comicz.ttf);font-weight: bold;font-style: italic;}
@font-face {font-family: comic; src: url(comici.ttf);font-style: italic;}
* {font-family: comic;}
```

LANGUAGE: Python
CODE:
```
doc = pymupdf.Document()
page = doc.new_page(width=150, height=150)  # make small page

page.insert_htmlbox(page.rect, text, css=css, archive=arch)

doc.subset_fonts(verbose=True)  # build subset fonts to reduce file size
doc.ez_save(__file__.replace(".py", ".pdf"))
```

----------------------------------------

TITLE: Extracting Various Text Formats using PyMuPDF TextPage
DESCRIPTION: This snippet demonstrates how to extract text in different formats (plain text, JSON, HTML, XML, XHTML) using a TextPage object. The TextPage, created from a DisplayList, allows immediate access to these extraction methods, with default settings preserving ligatures and whitespace but not images.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/coop_low.rst#_snippet_3

LANGUAGE: Python
CODE:
```
txt  = tp.extractText()
json = tp.extractJSON()
html = tp.extractHTML()
xml  = tp.extractXML()
xml  = tp.extractXHTML()
```

----------------------------------------

TITLE: Optimizing TextPage for Text Extraction without Images in PyMuPDF
DESCRIPTION: This snippet shows how to optimize TextPage creation for text extraction when images are not needed. By setting specific flags (TEXT_PRESERVE_LIGATURES and TEXT_PRESERVE_WHITESPACE), overall execution time for HTML, XHTML, and JSON extractions can be significantly reduced, and storage requirements minimized.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/coop_low.rst#_snippet_4

LANGUAGE: Python
CODE:
```
flags = pymupdf.TEXT_PRESERVE_LIGATURES | pymupdf.TEXT_PRESERVE_WHITESPACE
tp = dl.get_textpage(flags)
```

----------------------------------------

TITLE: Create OCR PDF from Images using PyMuPDF
DESCRIPTION: This snippet demonstrates how to iterate through image files in a folder, perform OCR on each image using the pdfocr_tobytes method, and insert the resulting OCR'd PDF page into a new PyMuPDF document. It requires the 'os' and 'pymupdf' libraries and Tesseract installed.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_5

LANGUAGE: python
CODE:
```
doc = pymupdf.open()
for imgfile in os.listdir(folder):
   pix = pymupdf.Pixmap(imgfile)
   imgpdf = pymupdf.open("pdf", pix.pdfocr_tobytes())
   doc.insert_pdf(imgpdf)
   pix = None
   imgpdf.close()
doc.save("ocr-images.pdf")
```

----------------------------------------

TITLE: Splitting PDF by Extracting Pages in PyMuPDF (Python)
DESCRIPTION: Shows how to create a new empty PyMuPDF document (`doc2`) and then insert specific page ranges from an existing document (`doc1`). This example inserts the first 10 pages and the last 10 pages of `doc1` into `doc2`, effectively splitting `doc1` and creating a new document containing only those selected pages. Finally, the new document is saved.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/tutorial.rst#_snippet_4

LANGUAGE: Python
CODE:
```
doc2 = pymupdf.open()                 # new empty PDF
doc2.insert_pdf(doc1, to_page = 9)  # first 10 pages
doc2.insert_pdf(doc1, from_page = len(doc1) - 10) # last 10 pages
doc2.save("first-and-last-10.pdf")
```

----------------------------------------

TITLE: Redacting Text Instances (PyMuPDF, Python)
DESCRIPTION: This snippet demonstrates how to redact specific text occurrences within a PDF document. It opens a document, iterates through pages, finds all instances of a target string ('Jane Doe'), adds redaction annotations for each instance, applies the redactions to permanently remove the content, and saves the modified document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_34

LANGUAGE: python
CODE:
```
import pymupdf

# Open the PDF document
doc = pymupdf.open('test.pdf')

# Iterate over each page of the document
for page in doc:
    # Find all instances of "Jane Doe" on the current page
    instances = page.search_for("Jane Doe")

    # Redact each instance of "Jane Doe" on the current page
    for inst in instances:
        page.add_redact_annot(inst)

    # Apply the redactions to the current page
    page.apply_redactions()

# Save the modified document
doc.save('redacted_document.pdf')
```

----------------------------------------

TITLE: Using PyMuPDF Document as a Context Manager in Python
DESCRIPTION: This example illustrates how to use the `pymupdf.Document` class as a context manager. This ensures that the document is automatically closed upon exiting the `with` block, preventing resource leaks. It also shows iterating through pages within the document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_3

LANGUAGE: Python
CODE:
```
import pymupdf
with pymupdf.open(...) as doc:
    for page in doc: print("page %i" % page.number)
```

----------------------------------------

TITLE: Converting PyMuPDF Document to Bytes (Python)
DESCRIPTION: The tobytes() method converts the document into a bytes object, applying various saving options without writing to a file. It supports parameters like garbage for object removal, deflate for compression, and encryption for security, similar to the save() method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_35

LANGUAGE: Python
CODE:
```
tobytes(garbage=0, clean=False, deflate=False, deflate_images=False, deflate_fonts=False, ascii=False, expand=0, linear=False, pretty=False, no_new_id=False, encryption=PDF_ENCRYPT_NONE, permissions=-1, owner_pw=None, user_pw=None, use_objstms=0)
```

----------------------------------------

TITLE: Example PyMuPDF DICT/JSON Output Structure
DESCRIPTION: This snippet shows the structure of the dictionary (or JSON) output produced by TextPage.extractDICT or Page.get_text("dict"). It illustrates how page dimensions, blocks, lines, and spans with text and bounding boxes are represented.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app1.rst#_snippet_5

LANGUAGE: JSON
CODE:
```
{
    "width": 300.0,
    "height": 350.0,
    "blocks": [{
        "type": 0,
        "bbox": (50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375),
        "lines": ({
            "wmode": 0,
            "dir": (1.0, 0.0),
            "bbox": (50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375),
            "spans": ({
                "size": 11.0,
                "flags": 0,
                "font": "Helvetica",
                "color": 0,
                "origin": (50.0, 100.0),
                "text": "Some text on first page.",
                "bbox": (50.0, 88.17500305175781, 166.1709747314453, 103.28900146484375)
            })
        }]
    }]
}
```

----------------------------------------

TITLE: Inserting External Documents - PyMuPDF Python
DESCRIPTION: Adds an arbitrary supported document (e.g., PDF, image) to the current PDF. It opens the 'infile', converts it to PDF if necessary, and then uses `Document.insert_pdf`. This method is useful for appending images as full pages or merging other documents. It supports parameters for page ranges, rotation, and inclusion of links/annotations.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_36

LANGUAGE: Python
CODE:
```
insert_file(infile, from_page=-1, to_page=-1, start_at=-1, rotate=-1, links=True, annots=True, show_progress=0, final=1)
```

----------------------------------------

TITLE: Appending PDF Document in PyMuPDF (Python)
DESCRIPTION: Demonstrates how to append the entire content of one opened PyMuPDF document (`doc2`) to another opened document (`doc1`) using the `insert_pdf` method. This effectively joins the two documents.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/tutorial.rst#_snippet_3

LANGUAGE: Python
CODE:
```
doc1.insert_pdf(doc2)
```

----------------------------------------

TITLE: Adding Multiple Annotation Types PyMuPDF Python
DESCRIPTION: This script demonstrates how to add a variety of annotation types to a PDF page using PyMuPDF. It covers common annotation types like text, highlight, square, circle, line, polyline, polygon, and more, showing the basic method calls for insertion.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-annotations.rst#_snippet_0

LANGUAGE: python
CODE:
```
import fitz # PyMuPDF

doc = fitz.open()
page = doc.new_page()

# Add various annotations (simplified examples)
page.add_text_annot((50, 50), "Hello Text Annot")
page.add_highlight_annot((100, 100, 200, 120))
page.add_underline_annot((100, 150, 200, 170))
page.add_strikeout_annot((100, 200, 200, 220))
page.add_square_annot((100, 250, 200, 300))
page.add_circle_annot((100, 350, 200, 400))
page.add_line_annot((100, 450), (200, 500))
page.add_polyline_annot([(100, 550), (150, 570), (200, 550)])
page.add_polygon_annot([(100, 600), (150, 620), (200, 600)])
# Add more types...

doc.save("output_annots.pdf")
doc.close()
```

----------------------------------------

TITLE: Resolve ModuleNotFoundError by Reinstalling PyMuPDF
DESCRIPTION: Commands to uninstall a conflicting 'fitz' package and then force reinstall PyMuPDF to resolve potential import errors when using the legacy 'fitz' name.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/installation.rst#_snippet_3

LANGUAGE: Shell
CODE:
```
pip uninstall fitz
pip install --force-reinstall pymupdf
```

----------------------------------------

TITLE: Splitting PDF Pages into Grid (2x2) with PyMuPDF
DESCRIPTION: Demonstrates how to open a PDF, iterate through its pages, divide each page into a 2x2 grid of rectangles, create new pages in an output document corresponding to these rectangles, and render the content of each grid cell onto its respective new page using `show_pdf_page`. Finally, saves the new document with garbage collection and compression.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_28

LANGUAGE: python
CODE:
```
import pymupdf

src = pymupdf.open("test.pdf")
doc = pymupdf.open()  # empty output PDF

for spage in src:  # for each page in input
    r = spage.rect  # input page rectangle
    d = pymupdf.Rect(spage.cropbox_position,  # CropBox displacement if not
                  spage.cropbox_position)  # starting at (0, 0)
    #--------------------------------------------------------------------------
    # example: cut input page into 2 x 2 parts
    #--------------------------------------------------------------------------
    r1 = r / 2  # top left rect
    r2 = r1 + (r1.width, 0, r1.width, 0)  # top right rect
    r3 = r1 + (0, r1.height, 0, r1.height)  # bottom left rect
    r4 = pymupdf.Rect(r1.br, r.br)  # bottom right rect
    rect_list = [r1, r2, r3, r4]  # put them in a list

    for rx in rect_list:  # run thru rect list
        rx += d  # add the CropBox displacement
        page = doc.new_page(-1,  # new output page with rx dimensions
                           width = rx.width,
                           height = rx.height)
        page.show_pdf_page(
                page.rect,  # fill all new page with the image
                src,  # input document
                spage.number,  # input page number
                clip = rx,  # which part to use of input page
            )

# that's it, save output file
doc.save("poster-" + src.name,
         garbage=3,  # eliminate duplicate objects
         deflate=True  # compress stuff where possible
)
```

----------------------------------------

TITLE: Inserting Header and Footer Text in PDF using PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to insert header and footer text into an existing PDF document using PyMuPDF. It opens a PDF, defines header and footer strings, and then iterates through each page to insert the text at specified coordinates. This example illustrates how text might be added out of natural reading order by a PDF creator, leading to extraction challenges.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_1

LANGUAGE: Python
CODE:
```
doc = pymupdf.open("some.pdf")
header = "Header"  # text in header
footer = "Page %i of %i"  # text in footer
for page in doc:
    page.insert_text((50, 50), header)  # insert header
    page.insert_text(  # insert footer 50 points above page bottom
        (50, page.rect.height - 50),
        footer % (page.number + 1, doc.page_count),
    )
```

----------------------------------------

TITLE: Accessing Standard PDF Metadata in PyMuPDF
DESCRIPTION: Illustrates how to retrieve and display the standard, fixed-set metadata of a PDF document using the `doc.metadata` attribute and `pprint`. This provides access to common metadata fields like author, creation date, and title.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_7

LANGUAGE: Python
CODE:
```
pprint(doc.metadata)
```

----------------------------------------

TITLE: Modifying PDF Table of Contents with PyMuPDF
DESCRIPTION: This snippet demonstrates how to programmatically modify the Table of Contents (TOC) of a PDF document using PyMuPDF. It shows how to retrieve the detailed TOC, iterate through level 1 items, collapse sub-items, and apply custom styling (color, bold, italic) to specific chapters, then save the modified document. It requires the 'pymupdf' library.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_32

LANGUAGE: Python
CODE:
```
import pymupdf
doc=pymupdf.open("SWIGDocumentation.pdf")
toc = doc.get_toc(False)  # we need the detailed TOC
# list of level 1 indices and their titles
lvl1 = [(i, item[1]) for i, item in enumerate(toc) if item[0] == 1]
for i, title in lvl1:
        d = toc[i][3]  # get the destination dict
        d["collapse"] = True  # collapse items underneath
        if "Python" in title:  # show the 'Python' chapter
            d["color"] = (1, 0, 0)  # in red,
            d["bold"] = True  # bold and
            d["italic"] = True  # italic
        doc.set_toc_item(i, dest_dict=d)  # update this toc item
doc.save("NEWSWIG.pdf",garbage=3,deflate=True)
```

----------------------------------------

TITLE: Converting XPS to PDF in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to convert an XPS document to a PDF byte string using the `convert_to_pdf` method. It then shows two ways to handle the resulting PDF bytes: either by opening them as a new PyMuPDF document for saving or by writing them directly to a file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_11

LANGUAGE: python
CODE:
```
xps = pymupdf.open("some.xps")
pdfbytes = xps.convert_to_pdf()

# either do this -->
pdf = pymupdf.open("pdf", pdfbytes)
pdf.save("some.pdf")

# or this -->
pdfout = open("some.pdf", "wb")
pdfout.write(pdfbytes)
pdfout.close()
```

----------------------------------------

TITLE: Inserting Specific PDF Pages into Another Document (Python)
DESCRIPTION: This example shows how to insert a specific range of pages from one PDF (`doc2`) into another (`doc1`) at a designated starting position. It copies pages 21 through 25 (inclusive) from `doc2` and inserts them into `doc1` starting at page index 15.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_67

LANGUAGE: Python
CODE:
```
doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=15)
```

----------------------------------------

TITLE: Extracting Text Blocks with PyMuPDF
DESCRIPTION: Shows how to extract text blocks from a page using `get_text("blocks")`. The output is a list of tuples containing block coordinates, text content, and block type. The `sort=False` argument is used to maintain the original document order.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app1.rst#_snippet_1

LANGUAGE: Python
CODE:
```
print(page.get_text("blocks", sort=False))
```

----------------------------------------

TITLE: Building and Installing PyMuPDF with Default MuPDF (Pip)
DESCRIPTION: Changes the directory to the cloned PyMuPDF source tree and uses pip to build and install the package. This method automatically downloads and builds a specific, hard-coded version of MuPDF.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/installation.rst#_snippet_5

LANGUAGE: bash
CODE:
```
cd PyMuPDF && pip install .
```

----------------------------------------

TITLE: Deleting Page Range from Document with PyMuPDF - Python
DESCRIPTION: Demonstrates how to remove a range of pages from a PDF document using `doc.delete_pages`. It shows opening a document, specifying the start and end page indices (inclusive, zero-based) for deletion, and saving the result.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_15

LANGUAGE: Python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open a document
doc.delete_pages(from_page=9, to_page=14) # delete a page range from the document
doc.save("test-deleted-pages.pdf") # save the document
```

----------------------------------------

TITLE: Importing PyMuPDF Library
DESCRIPTION: Imports the necessary PyMuPDF library to utilize its functionalities, including accessing and manipulating fonts. This line is presented as the initial step in an example demonstrating the use of the `valid_codepoints` method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/font.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import pymupdf
```

----------------------------------------

TITLE: Getting Page Count Using len() on Document Object - Python
DESCRIPTION: Document objects now support the standard Python 'len()' function, providing a convenient way to retrieve the total number of pages in a document, equivalent to accessing the 'pageCount' property.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_8

LANGUAGE: Python
CODE:
```
import fitz

doc = fitz.open("input.pdf")

# Get page count using len()
page_count_len = len(doc)

# Get page count using pageCount property
page_count_prop = doc.page_count

print(f"Page count (len): {page_count_len}")
print(f"Page count (pageCount): {page_count_prop}")
doc.close()
```

----------------------------------------

TITLE: Applying Matrix Transformations to a Rectangle (PyMuPDF)
DESCRIPTION: This snippet demonstrates how to use the PyMuPDF Matrix class to apply scaling and shifting transformations to a rectangle and draw the original and transformed rectangles on a new PDF page. It requires the 'pymupdf' library. The code defines colors, creates a document and page, defines an initial rectangle, creates scaling and shifting matrices, applies these matrices to the rectangle using multiplication, and draws the resulting shapes with different colors before saving the PDF.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/matrix.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import pymupdf

# just definitions and a temp PDF
RED = (1, 0, 0)
BLUE = (0, 0, 1)
GREEN = (0, 1, 0)
doc = pymupdf.open()
page = doc.new_page()

# rectangle
r1 = pymupdf.Rect(100, 100, 200, 200)

# scales down by 50% in x- and up by 50% in y-direction
mat1 = pymupdf.Matrix(0.5, 1.5)

# shifts by 50 in both directions
mat2 = pymupdf.Matrix(1, 0, 0, 1, 50, 50)

# draw corresponding rectangles
page.draw_rect(r1, color=RED)  # original
page.draw_rect(r1 * mat1, color=GREEN)  # scaled
page.draw_rect(r1 * mat2, color=BLUE)  # shifted
doc.ez_save("matrix-effects.pdf")
```

----------------------------------------

TITLE: Converting PyMuPDF Rect to PDF Coordinates using Transformation Matrix (Python)
DESCRIPTION: Demonstrates how to use the inverse of a page's transformation matrix (`page.transformation_matrix`) to convert a rectangle defined in the PyMuPDF coordinate system (top-left origin, y-down) to the PDF coordinate system (bottom-left origin, y-up). It shows that a `Rect(0, 0, 100, 100)` in PyMuPDF corresponds to `Rect(0, 692, 100, 792)` on a Letter page (792 points high) in PDF coordinates. Requires a `Document` object (`doc`) and a `Page` object.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app3.rst#_snippet_9

LANGUAGE: python
CODE:
```
page = doc.new_page(width=612, height=792)  # make new Letter page
ptm = page.transformation_matrix
# the inverse matrix of ptm is ~ptm
pymupdf.Rect(0, 0, 100, 100) * ~ptm
```

----------------------------------------

TITLE: Checking Text Visibility with PyMuPDF Pixmap Python
DESCRIPTION: Illustrates how to check if text is visible by examining the pixel colors within its bounding box using a page pixmap. It involves creating a high-resolution pixmap of the page once, transforming coordinates, searching for text, and using `Pixmap.color_topusage` on the text's rectangle transformed to pixmap coordinates. A high ratio from `color_topusage` indicates the area is mostly unicolor, suggesting the text might be invisible.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_20

LANGUAGE: python
CODE:
```
pix = page.get_pixmap(dpi=150)  # make page image with a decent resolution

# the following matrix transforms page to pixmap coordinates
mat = page.rect.torect(pix.irect)

# search for some string "needle"
rlist = page.search_for("needle")
# check the visibility for each hit rectangle
for rect in rlist:
    if pix.color_topusage(clip=rect * mat)[0] > 0.95:
        print("'needle' is invisible here:", rect)
```

----------------------------------------

TITLE: Create Python Virtual Environment and Upgrade Pip (Windows)
DESCRIPTION: Commands to create a Python virtual environment named 'pymupdf-venv', activate it, and upgrade the pip package installer on Windows.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/installation.rst#_snippet_0

LANGUAGE: Shell
CODE:
```
py -m venv pymupdf-venv
.\pymupdf-venv\Scripts\activate
python -m pip install --upgrade pip
```

----------------------------------------

TITLE: Deleting Multiple Pages - PyMuPDF Python
DESCRIPTION: Deletes multiple pages from the PDF document. This method offers various formats for specifying pages: a contiguous range using 'from_page' and 'to_page' keywords or two positional arguments, a single page number (like `delete_page`), or a list/tuple/range of page numbers. It also supports Python's `del` statement with index/slice notation. TOC entries pointing to deleted pages are deactivated.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_40

LANGUAGE: Python
CODE:
```
delete_pages(*args, **kwds)
```

----------------------------------------

TITLE: Opening Documents from File or Memory Stream - Python
DESCRIPTION: The 'fitz.open()' and 'fitz.Document()' functions now offer flexible ways to open documents, either from a filename or directly from a bytes/bytearray stream, enhancing versatility for handling document data.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_6

LANGUAGE: Python
CODE:
```
import fitz

# Open from a filename
doc_from_file = fitz.open("input.pdf")
print(f"Opened from file: {doc_from_file.name}")
doc_from_file.close()

# Open from a byte stream
with open("input.pdf", "rb") as f:
    pdf_data = f.read()

doc_from_stream = fitz.open("pdf", stream=pdf_data)
print(f"Opened from stream: {doc_from_stream.name}")
doc_from_stream.close()
```

----------------------------------------

TITLE: Encrypting PDF with Passwords and Permissions (PyMuPDF, Python)
DESCRIPTION: This snippet demonstrates how to create a new PDF document, add text to it, and save it with encryption. It sets separate owner and user passwords and defines specific permissions for the user, such as printing, copying, and annotating, while preventing changes.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_30

LANGUAGE: python
CODE:
```
import pymupdf

text = "some secret information" # keep this data secret
perm = int(
    pymupdf.PDF_PERM_ACCESSIBILITY # always use this
    | pymupdf.PDF_PERM_PRINT # permit printing
    | pymupdf.PDF_PERM_COPY # permit copying
    | pymupdf.PDF_PERM_ANNOTATE # permit annotations
)
owner_pass = "owner" # owner password
user_pass = "user" # user password
encrypt_meth = pymupdf.PDF_ENCRYPT_AES_256 # strongest algorithm
doc = pymupdf.open() # empty pdf
page = doc.new_page() # empty page
page.insert_text((50, 72), text) # insert the data
doc.save(
    "secret.pdf",
    encryption=encrypt_meth, # set the encryption method
    owner_pw=owner_pass, # set the owner password
    user_pw=user_pass, # set the user password
    permissions=perm # set permissions
)
```

----------------------------------------

TITLE: Loading Document Pages and Chapter-Based Access (PyMuPDF Python)
DESCRIPTION: This method creates a Page object for further processing. It supports loading pages by 0-based absolute page number or by a tuple (chapter, pno) for documents with chapter structures like EPUB, significantly speeding up access for large documents. The Document object also follows the Python sequence protocol, allowing direct indexing and iteration for page access.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_10

LANGUAGE: Python
CODE:
```
doc.load_page(n) == doc[n]
```

LANGUAGE: Python
CODE:
```
for page in doc: ...
```

LANGUAGE: Python
CODE:
```
for page in reversed(doc): ...
```

LANGUAGE: Python
CODE:
```
page = doc[(5, 2)]
```

----------------------------------------

TITLE: Importing PyMuPDF and Checking Version (Python)
DESCRIPTION: Demonstrates how to import the `pymupdf` library and print its `__doc__` string to verify the installed version, build date, and platform details.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/tutorial.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> import pymupdf
>>> print(pymupdf.__doc__)
PyMuPDF 1.16.0: Python bindings for the MuPDF 1.16.0 library.
Version date: 2019-07-28 07:30:14.
Built for Python 3.7 on win32 (64-bit).
```

----------------------------------------

TITLE: Extracting and Saving PDF Page Images (Python)
DESCRIPTION: This code iterates through each page of a PDF document (`doc`) to extract all page-referenced images and save them as PNG files. For each image, it retrieves its xref number, creates a `Pixmap` object, and then saves it. It handles different color spaces (e.g., CMYK) by converting them to RGB before saving to ensure compatibility with PNG format.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_70

LANGUAGE: Python
CODE:
```
for i in range(doc.page_count):
    imglist = doc.get_page_images(i)
    for img in imglist:
        xref = img[0]                  # xref number
        pix = pymupdf.Pixmap(doc, xref)   # make pixmap from image
        if pix.n - pix.alpha < 4:      # can be saved as PNG
            pix.save("p%s-%s.png" % (i, xref))
        else:                          # CMYK: must convert first
            pix0 = pymupdf.Pixmap(pymupdf.csRGB, pix)
            pix0.save("p%s-%s.png" % (i, xref))
            pix0 = None                # free Pixmap resources
        pix = None                     # free Pixmap resources
```

----------------------------------------

TITLE: Generate PNG Images from Document Pages (PyMuPDF, Python)
DESCRIPTION: This script opens a document specified by a command-line argument, iterates through its pages, renders each page to a pixmap using `get_pixmap()`, and saves the pixmap as a PNG file named 'page-N.png' in the current directory.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import sys, pymupdf  # import the bindings
fname = sys.argv[1]  # get filename from command line
doc = pymupdf.open(fname)  # open document
for page in doc:  # iterate through the pages
    pix = page.get_pixmap()  # render page to an image
    pix.save("page-%i.png" % page.number)  # store image as a PNG
```

----------------------------------------

TITLE: Extracting Tables from a Page (PyMuPDF, Python)
DESCRIPTION: This snippet shows how to open an existing PDF document, access a specific page, and use the `find_tables` method to locate and extract table data. It then prints the number of tables found and the content of the first table if any are present.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_31

LANGUAGE: python
CODE:
```
import pymupdf
from pprint import pprint

doc = pymupdf.open("test.pdf") # open document
page = doc[0] # get the 1st page of the document
tabs = page.find_tables() # locate and extract any tables on page
print(f"{len(tabs.tables)} found on {page}") # display number of found tables

if tabs.tables:  # at least one table found?
   pprint(tabs[0].extract())  # print content of first table
```

----------------------------------------

TITLE: Inserting Image on Every Page (PyMuPDF, Python)
DESCRIPTION: This snippet demonstrates how to efficiently insert the same image onto every page of a PyMuPDF document. It leverages the `xref` parameter to ensure the image data is embedded only once, significantly improving performance and reducing file size for subsequent insertions. The example shows how to define the insertion rectangle, read an image from a file, and save the modified document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_30

LANGUAGE: Python
CODE:
```
doc = pymupdf.open(...)
rect = pymupdf.Rect(0, 0, 50, 50)       # put thumbnail in upper left corner
img = open("some.jpg", "rb").read()  # an image file
img_xref = 0                         # first execution embeds the image
for page in doc:
  img_xref = page.insert_image(rect, stream=img,
             xref=img_xref,  2nd time reuses existing image
          )
doc.save(...)
```

----------------------------------------

TITLE: Redacting Area Ignoring Graphics with PyMuPDF (Python)
DESCRIPTION: Demonstrates how to open a PDF, define a rectangular area for redaction, add a redaction annotation with a fill color, and apply the redactions to the page while specifically ignoring vector graphics within the area. The modified document is then saved and closed.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_36

LANGUAGE: python
CODE:
```
import pymupdf

# Open the PDF document
doc = pymupdf.open('test.pdf')

# Get the first page
page = doc[0]

# Add an area to redact
rect = [0,0,200,200]

# Add a redacction annotation which will have a red fill color
page.add_redact_annot(rect, fill=(1,0,0))

# Apply the redactions to the current page, but ignore vector graphics
page.apply_redactions(graphics=0)

# Save the modified document
doc.save('redactied_document.pdf')

# Close the document
doc.close()
```

----------------------------------------

TITLE: Creating New Empty Page - PyMuPDF Python
DESCRIPTION: Inserts a new, empty page into the PDF document. The page number `pno` specifies the insertion point (0-based, -1 or `doc.page_count` for after the last page). `width` and `height` define the dimensions of the new page. Be aware that inserting a page invalidates existing page objects and changes subsequent page numbers.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_37

LANGUAGE: Python
CODE:
```
new_page(pno=-1, width=595, height=842)
```

----------------------------------------

TITLE: Clearing Metadata with PyMuPDF in Python
DESCRIPTION: This snippet demonstrates how to clear all metadata fields from a PyMuPDF document using `doc.set_metadata({})` and remove any XML metadata with `doc.del_xml_metadata()`. To ensure physical removal of old metadata for privacy, the document must be saved as a new file with `garbage > 0`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_64

LANGUAGE: Python
CODE:
```
import pymupdf
doc=pymupdf.open("pymupdf.pdf")
doc.metadata             # look at what we currently have
# {'producer': 'rst2pdf', 'format': 'PDF 1.4', 'encryption': None, 'author':
# 'Jorj X. McKie', 'modDate': "D:20160611145816-04'00'", 'keywords': 'PDF, XPS, EPUB, CBZ',
# 'title': 'The PyMuPDF Documentation', 'creationDate': "D:20160611145816-04'00'",
# 'creator': 'sphinx', 'subject': 'PyMuPDF 1.9.1'}
doc.set_metadata({})      # clear all fields
doc.metadata             # look again to show what happened
# {'producer': 'none', 'format': 'PDF 1.4', 'encryption': None, 'author': 'none',
# 'modDate': 'none', 'keywords': 'none', 'title': 'none', 'creationDate': 'none',
# 'creator': 'none', 'subject': 'none'}
doc.del_xml_metadata()    # clear any XML metadata
doc.save("anonymous.pdf", garbage = 4)       # save anonymized doc
```

----------------------------------------

TITLE: Displaying PDF Pages with PyMuPDF
DESCRIPTION: This snippet demonstrates how to display parts of a source PDF page onto a target page using `page.show_pdf_page`. It shows how to define target rectangles (`r1`, `r2`) and apply rotation. It also opens a source PDF and saves the modified document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_42

LANGUAGE: Python
CODE:
```
r2 = r1 + (0, page.rect.height/2, 0, page.rect.height/2)

src = pymupdf.open("PyMuPDF.pdf")  # show page 0 of this

page.show_pdf_page(r1, src, 0, rotate=90)
page.show_pdf_page(r2, src, 0, rotate=-90)
doc.save("show.pdf")
```

----------------------------------------

TITLE: Demonstrating Multi-Language Support with PyMuPDF
DESCRIPTION: This snippet showcases PyMuPDF's automatic multi-language support and text shaping capabilities. It joins a tuple of greetings in various languages into a single HTML string and inserts it into a PDF page, demonstrating correct rendering for complex scripts like Devanagari and right-to-left languages.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_13

LANGUAGE: Python
CODE:
```
import pymupdf

greetings = (
    "Hello, World!",  # english
    "Hallo, Welt!",  # german
    "سلام دنیا!",  # persian
    "வணக்கம், உலகம்!",  # tamil
    "สวัสดีชาวโลก!",  # thai
    "Привіт Світ!",  # ucranian
    "שלום עולם!",  # hebrew
    "ওহে বিশ্ব!",  # bengali
    "你好世界！",  # chinese
    "こんにちは世界！",  # japanese
    "안녕하세요, 월드!",  # korean
    "नमस्कार, विश्व !",  # sanskrit
    "हैलो वर्ल्ड!",  # hindi
)
doc = pymupdf.open()
page = doc.new_page()
rect = (50, 50, 200, 500)

# join greetings into one text string
text = " ... ".join([t for t in greetings])

# the output of the above is simple:
page.insert_htmlbox(rect, text)
doc.save(__file__.replace(".py", ".pdf"))
```

----------------------------------------

TITLE: Add Free Text Annotation - PyMuPDF Python
DESCRIPTION: Inserts text into a specified `rect` on a PDF page, automatically wrapping text within the given width. This method offers extensive customization for text appearance, including `fontsize`, `fontname`, `text_color`, `fill_color`, `border_width`, and `dashes`. It also supports creating 'callout' shapes and interpreting the `text` as HTML if `richtext` is set to `True`. The method returns the created `Annot` object.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_3

LANGUAGE: Python
CODE:
```
add_freetext_annot(rect, text, *, fontsize=11, fontname="helv", text_color=0, fill_color=None, border_width=0, dashes=None, callout=None, line_end=PDF_ANNOT_LE_OPEN_ARROW, opacity=1, align=TEXT_ALIGN_LEFT, rotate=0, richtext=False, style=None)
```

----------------------------------------

TITLE: Marking Searched Text with Squiggly Annotation (PyMuPDF, Python)
DESCRIPTION: This snippet demonstrates how to search for specific text within a PDF page and apply a squiggly annotation to all occurrences. It utilizes `page.search_for` with `quads=True` to handle potentially tilted text and `page.add_squiggly_annot` to mark the found text locations.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_4

LANGUAGE: Python
CODE:
```
# -*- coding: utf-8 -*-
import pymupdf

# the document to annotate
doc = pymupdf.open("tilted-text.pdf")

# the text to be marked
needle = "¡La práctica hace el campeón!"

# work with first page only
page = doc[0]

# get list of text locations
# we use "quads", not rectangles because text may be tilted!
rl = page.search_for(needle, quads=True)

# mark all found quads with one annotation
page.add_squiggly_annot(rl)

# save to a new PDF
doc.save("a-squiggly.pdf")
```

----------------------------------------

TITLE: Selecting Pages to Keep in Document with PyMuPDF - Python
DESCRIPTION: Demonstrates how to keep only a specific subset of pages in a PDF document using `doc.select`. This effectively discards all pages not included in the provided list of zero-based indices. The example keeps only the first two pages.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_18

LANGUAGE: Python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open a document
doc.select([0, 1]) # select the 1st & 2nd page of the document
doc.save("just-page-one-and-two.pdf") # save the document
```

----------------------------------------

TITLE: Drawing Rectangles in PyMuPDF (Python)
DESCRIPTION: Draws a rectangle in a PDF document. This method is part of the PyMuPDF Shape object and allows specifying the rectangle's dimensions, color, fill, width, dashes, line caps, and joins. It also supports rounded corners via the 'radius' parameter (added in v1.22.0), overlaying, and opacity settings.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_27

LANGUAGE: Python
CODE:
```
draw_rect(rect, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, radius=None, oc=0)
```

----------------------------------------

TITLE: Listing Images and Fonts on a PDF Page - Python
DESCRIPTION: New methods 'getPageImageList()' and 'getPageFontList()' allow users to retrieve comprehensive lists of images and fonts referenced by a specific page, facilitating content analysis and extraction.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_9

LANGUAGE: Python
CODE:
```
import fitz

doc = fitz.open("input.pdf")
page = doc[0]

# Get list of images on the page
image_list = page.getPageImageList()
print(f"Images on page 0: {len(image_list)}")
# Each item is (xref, sref, width, height, bpc, colorspace, xres, yres, filter, stream_length, # ext)

# Get list of fonts on the page
font_list = page.getPageFontList()
print(f"Fonts on page 0: {len(font_list)}")
# Each item is (xref, ext, type, basefont, name, encoding, xres, yres, bbox)

doc.close()
```

----------------------------------------

TITLE: Marking Subsets of Non-horizontal Line Spans (PyMuPDF, Python)
DESCRIPTION: This snippet demonstrates how to mark an entire line or a specific subset of its spans, even if the text is non-horizontal. It leverages `pymupdf.recover_line_quad` to generate a quad for the specified spans, which is then used with `page.add_highlight_annot`, applicable for PyMuPDF v1.18.10 or later.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_6

LANGUAGE: Python
CODE:
```
line_quad = pymupdf.recover_line_quad(line, spans=line["spans"][1:-1])
page.add_highlight_annot(line_quad)
```

----------------------------------------

TITLE: Inserting Image into PDF Page - PyMuPDF - Python
DESCRIPTION: Shows the basic code pattern and parameters for the `Page.insert_image` method in PyMuPDF. It lists key arguments like `rect`, `filename`, `stream`, `pixmap`, `mask`, `rotate`, `xref`, and `oc`, noting that exactly one of `filename`, `stream`, or `pixmap` must be provided unless re-inserting an existing image.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_18

LANGUAGE: Python
CODE:
```
page.insert_image(
    rect,                  # where to place the image (rect-like)
    filename=None,         # image in a file
    stream=None,           # image in memory (bytes)
    pixmap=None,           # image from pixmap
    mask=None,             # specify alpha channel separately
    rotate=0,              # rotate (int, multiple of 90)
    xref=0,                # re-use existing image
    oc=0                   # control visibility via OCG / OCMD
)
```

----------------------------------------

TITLE: Opening a Remote File Stream with PyMuPDF
DESCRIPTION: Shows how to open a file located on a remote server by streaming its content using the `requests` library and then passing the stream data to `pymupdf.Document()`. This is necessary for non-local files.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/how-to-open-a-file.rst#_snippet_1

LANGUAGE: python
CODE:
```
import pymupdf
import requests

r = requests.get('https://mupdf.com/docs/mupdf_explored.pdf')
data = r.content
doc = pymupdf.Document(stream=data)
```

----------------------------------------

TITLE: Split PDF into Even and Odd Pages in PyMuPDF Python
DESCRIPTION: Illustrates how to split a PDF document into two separate files, one containing only the even-numbered pages and the other containing only the odd-numbered pages, using `Document.select` and `Document.save`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_21

LANGUAGE: python
CODE:
```
doc.select(p_even) # only the even pages left over
doc.save("even.pdf") # save the "even" PDF
doc.close() # recycle the file
doc = pymupdf.open(doc.name) # re-open
doc.select(p_odd) # and do the same with the odd pages
doc.save("odd.pdf")
```

----------------------------------------

TITLE: Rearranging Pages in Document with PyMuPDF - Python
DESCRIPTION: Shows how to change the order of pages in a PDF document using `doc.move_page`. It demonstrates moving a page from one zero-based index to another and saving the document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_16

LANGUAGE: Python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open a document
doc.move_page(1,0) # move the 2nd page of the document to the start of the document
doc.save("test-page-moved.pdf") # save the document
```

----------------------------------------

TITLE: Inserting Text with PyMuPDF
DESCRIPTION: This snippet demonstrates how to insert text onto a PDF page using `page.insert_text` in PyMuPDF. It shows basic parameters like position, text content, font, size, and rotation, and then prints the number of lines inserted and saves the document. It highlights that only line height is controlled, not width.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_8

LANGUAGE: Python
CODE:
```
rc = page.insert_text(p,  # bottom-left of 1st char
                         text,  # the text (honors '\n')
                         fontname = "helv",  # the default font
                         fontsize = 11,  # the default font size
                         rotate = 0,  # also available: 90, 180, 270
                         )
    print("%i lines printed on page %i." % (rc, page.number))

    doc.save("text.pdf")
```

----------------------------------------

TITLE: Rotating All Pages of a PDF Document (Python)
DESCRIPTION: This concise snippet demonstrates how to rotate every page within a PDF document by a specified angle. It iterates through each `page` object in the `doc` and applies a 90-degree rotation using the `set_rotation` method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_71

LANGUAGE: Python
CODE:
```
for page in doc: page.set_rotation(90)
```

----------------------------------------

TITLE: Performing Incremental Save in PyMuPDF
DESCRIPTION: This snippet demonstrates how to perform an incremental save on a PyMuPDF document. By setting 'incremental=True', only the changes made to the document are appended to the file, rather than rewriting the entire document. This is efficient for small modifications.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_21

LANGUAGE: Python
CODE:
```
doc.save(doc.name, incremental=True)
```

----------------------------------------

TITLE: Extracting Words with PyMuPDF
DESCRIPTION: Iterates through the list of words extracted from a page using `get_text("words")`. Each word is represented as a tuple including its bounding box coordinates and positional information (block, line, word number). The example prints each word tuple.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app1.rst#_snippet_2

LANGUAGE: Python
CODE:
```
for word in page.get_text("words", sort=False):
    print(word)
```

----------------------------------------

TITLE: Performing Text Search using PyMuPDF DisplayList and TextPage
DESCRIPTION: This snippet illustrates how to perform text search using a DisplayList. It first creates a TextPage from the DisplayList, then searches for a specific string ('needle'), and finally iterates through the found locations to perform an action, such as inverting colors in the corresponding rectangles.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/coop_low.rst#_snippet_2

LANGUAGE: Python
CODE:
```
tp = dl.get_textpage()
rlist = tp.search("needle")
for r in rlist:
    pix.invert_irect(r.irect)
```

----------------------------------------

TITLE: Adding Rectangle or Circle Annotation - PyMuPDF Python
DESCRIPTION: Adds either a rectangle or a circle annotation to a PDF. Both methods use a `rect_like` argument to define the bounding box. If the rectangle is not equal-sided for a circle, an ellipse is drawn. These annotations are drawn with a red stroke color, line width 1, and support fill color.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_7

LANGUAGE: Python
CODE:
```
add_rect_annot(rect)
add_circle_annot(rect)
```

----------------------------------------

TITLE: Extracting Text from a Page (PyMuPDF Python)
DESCRIPTION: This method extracts text from a specified page using its zero-based page number. It serves as a wrapper for `Page.get_text` and supports various output formats and text processing flags. It's applicable to all supported document types, not just PDFs.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_18

LANGUAGE: Python
CODE:
```
doc.get_page_text(pno, output="text", flags=3, textpage=None, sort=False)
```

----------------------------------------

TITLE: Creating New Empty PDF Documents - Python
DESCRIPTION: The 'fitz.open()' function can now be called without parameters to create a new, empty PDF document. This is useful for programmatically generating new PDF files from scratch.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_5

LANGUAGE: Python
CODE:
```
import fitz

# Create a new empty PDF document
new_pdf_doc = fitz.open()

# Add a new page to the document
new_pdf_doc.new_page()

# Save the new document (must have .pdf extension)
new_pdf_doc.save("new_empty_document.pdf")
new_pdf_doc.close()
```

----------------------------------------

TITLE: Parallel Page Rendering with Multiprocessing in Python
DESCRIPTION: This script demonstrates how to use Python's multiprocessing.Pool to render pages of a PDF document in parallel using PyMuPDF. It defines a worker function to process a single page and uses starmap to distribute tasks across multiple processes, aiming for faster execution than sequential processing.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-multiprocessing.rst#_snippet_0

LANGUAGE: python
CODE:
```
# Example content for multiprocess-render.py
import multiprocessing
import fitz # PyMuPDF

def render_page(doc_path, page_num, output_dir):
    """Renders a single page of a PDF document."""
    try:
        doc = fitz.open(doc_path)
        page = doc[page_num]
        pix = page.get_pixmap()
        output_path = f"{output_dir}/page_{page_num:04d}.png"
        pix.save(output_path)
        doc.close()
        print(f"Rendered page {page_num}")
    except Exception as e:
        print(f"Error rendering page {page_num}: {e}")

if __name__ == "__main__":
    doc_path = "input.pdf" # Replace with your document path
    output_dir = "output_images" # Replace with your output directory
    num_processes = multiprocessing.cpu_count() # Use all available cores

    # Create output directory if it doesn't exist
    import os
    os.makedirs(output_dir, exist_ok=True)

    try:
        doc = fitz.open(doc_path)
        num_pages = doc.page_count
        doc.close() # Close the document in the main process

        # Create a pool of worker processes
        with multiprocessing.Pool(processes=num_processes) as pool:
            # Prepare arguments for each page
            tasks = [(doc_path, i, output_dir) for i in range(num_pages)]
            # Map the render_page function to the tasks
            pool.starmap(render_page, tasks)

        print("Rendering complete.")

    except fitz.FileNotFoundError:
        print(f"Error: Document not found at {doc_path}")
    except Exception as e:
        print(f"An error occurred: {e}")

```

----------------------------------------

TITLE: Copying Single Page in Document with PyMuPDF - Python
DESCRIPTION: Illustrates how to duplicate a single page within a PDF document using `doc.copy_page`. By default, the copied page is appended to the end of the document. The example shows copying the first page and saving.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_17

LANGUAGE: Python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open a document
doc.copy_page(0) # copy the 1st page and puts it at the end of the document
doc.save("test-page-copied.pdf") # save the document
```

----------------------------------------

TITLE: Extracting Plain Text with PyMuPDF
DESCRIPTION: Demonstrates how to extract the plain text content of a page using the `get_text("text")` method in PyMuPDF. This method retrieves text in the original document order.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app1.rst#_snippet_0

LANGUAGE: Python
CODE:
```
print(page.get_text("text"))
```

----------------------------------------

TITLE: Specifying Custom Fonts with PyMuPDF
DESCRIPTION: This example demonstrates how to use custom fonts with `pymupdf.insert_htmlbox` by defining them via `@font-face` CSS rules. It requires an `Archive` definition pointing to the directory where the font files are located (e.g., `C:/Windows/Fonts`) to ensure the fonts are correctly loaded and applied to the HTML content.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_14

LANGUAGE: Python
CODE:
```
"""
How to use your own fonts with method Page.insert_htmlbox().
"""
import pymupdf

# Example text
text = """Lorem ipsum dolor sit amet, consectetur adipisici elit, sed
    eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad
    minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b> 
    nisi ut aliquid ex ea commodi consequat. Quis aute iure 
    <span style="color: red;">reprehenderit</span> 
    in <span style="color: green;font-weight:bold;">voluptate</span> velit 
    esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat 
    cupiditat non proident, sunt in culpa qui 
```

----------------------------------------

TITLE: Modifying Table of Contents with PyMuPDF in Python
DESCRIPTION: This example illustrates how to retrieve, modify, and update a document's table of contents (TOC) using PyMuPDF. It fetches the current TOC with `doc.get_toc()`, modifies an entry, and then applies the changes back to the document using `doc.set_toc()`, demonstrating the updated outline tree.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_65

LANGUAGE: Python
CODE:
```
import pymupdf
doc = pymupdf.open("test.pdf")
toc = doc.get_toc()
for t in toc: print(t)                           # show what we have
# [1, 'The PyMuPDF Documentation', 1]
# [2, 'Introduction', 1]
# [3, 'Note on the Name fitz', 1]
# [3, 'License', 1]
toc[1][1] += " modified by set_toc"               # modify something
doc.set_toc(toc)                                  # replace outline tree
# 3                                                    # number of bookmarks inserted
for t in doc.get_toc(): print(t)                  # demonstrate it worked
# [1, 'The PyMuPDF Documentation', 1]
# [2, 'Introduction modified by set_toc', 1]            # <<< this has changed
# [3, 'Note on the Name fitz', 1]
# [3, 'License', 1]
```

----------------------------------------

TITLE: Adding Watermark with PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to add an image watermark to every page of a PDF document using PyMuPDF. It opens a PDF, iterates through its pages, and inserts a specified image file ('watermark.png') scaled to fit the page bounds. The 'overlay=False' argument places the image behind existing content. The modified document is then saved.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_7

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open("document.pdf") # open a document

for page_index in range(len(doc)): # iterate over pdf pages
    page = doc[page_index] # get the page

    # insert an image watermark from a file name to fit the page bounds
    page.insert_image(page.bound(),filename="watermark.png", overlay=False)

doc.save("watermarked-document.pdf") # save the document with a new filename
```

----------------------------------------

TITLE: Adding Stamp Annotation to PDF in PyMuPDF
DESCRIPTION: The `add_stamp_annot` method in PyMuPDF allows adding a 'rubber stamp' annotation to a PDF page. It accepts a `rect` (rectangle) to define the annotation's position and a `stamp` parameter. The `stamp` can be an integer ID for a predefined text stamp, a string path to an image file, a bytes-like object containing image data, or a PyMuPDF `Pixmap` object. This method is PDF-only.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_13

LANGUAGE: Python
CODE:
```
add_stamp_annot(rect, stamp=0)
```

----------------------------------------

TITLE: Integrate PyMuPDF Pixmap with Tkinter PhotoImage
DESCRIPTION: Shows how to create a Tkinter PhotoImage object directly from a PyMuPDF pixmap by converting the pixmap to bytes in the PPM format. This method is highlighted as being significantly faster than using formats like PNG.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_9

LANGUAGE: Python
CODE:
```
tkimg = tkinter.PhotoImage(data=pix.tobytes("ppm"))
```

----------------------------------------

TITLE: Extracting Text and Color Information with PyMuPDF
DESCRIPTION: This snippet illustrates how to iterate through a PDF document's pages and extract text content along with its color information. It uses `page.get_text('dict')` to retrieve structured text blocks, lines, and spans, then converts the span's color to an sRGB tuple.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_17

LANGUAGE: Python
CODE:
```
for page in doc:
        text_blocks = page.get_text("dict", flags=pymupdf.TEXTFLAGS_TEXT)["blocks"]
        for block in text_blocks:
            for line in block["lines"]:
                for span in line["spans"]:
                    text = span["text"]
                    color = pymupdf.sRGB_to_rgb(span["color"])
                    print(f"Text: {text}, Color: {color}")
```

----------------------------------------

TITLE: Inserting Rotated and Reversed PDF Pages (Python)
DESCRIPTION: This snippet extends the page insertion functionality by demonstrating how to copy pages in reverse order and apply a rotation during the insertion process. Pages from `doc2` (from 25 to 21, implying reverse order) are inserted into `doc1` starting at page 15, and each inserted page is rotated by 90 degrees.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_68

LANGUAGE: Python
CODE:
```
doc1.insert_pdf(doc2, from_page=25, to_page=21, start_at=15, rotate=90)
```

----------------------------------------

TITLE: Rendering HTML with PyMuPDF Fonts and Text Alignment
DESCRIPTION: This example demonstrates using `pymupdf.css_for_pymupdf_font` to easily define CSS for a PyMuPDF-provided font, combined with text justification and rotation. It shows how to insert HTML content into a page, apply custom CSS for font family and alignment, and rotate the entire text block.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_16

LANGUAGE: Python
CODE:
```
import pymupdf

# Example text
text = """Lorem ipsum dolor sit amet, consectetur adipisici elit, sed
        eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad
        minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b> 
        nisi ut aliquid ex ea commodi consequat. Quis aute iure 
        <span style=\"color: red;\">reprehenderit</span> 
        in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit 
        esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat 
        cupiditat non proident, sunt in culpa qui 
        <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id 
        est laborum."""
```

LANGUAGE: Python
CODE:
```
arch = pymupdf.Archive()

# We request to use "myfont" throughout the text.
css = pymupdf.css_for_pymupdf_font("ubuntu", archive=arch, name="myfont")
css += "* {font-family: myfont;text-align: justify;}"

doc = pymupdf.Document()

page = doc.new_page(width=150, height=150)

page.insert_htmlbox(page.rect, text, css=css, archive=arch, rotate=90)

doc.subset_fonts(verbose=True)
doc.ez_save(__file__.replace(".py", ".pdf"))
```

----------------------------------------

TITLE: Creating Pixmap from NumPy Array - PyMuPDF - Python
DESCRIPTION: Demonstrates how to create a PyMuPDF Pixmap directly from a NumPy array. It initializes a NumPy array, fills it with pixel data, converts the data to a bytearray, and uses this bytearray to create a Pixmap object which is then saved as a PNG file. Requires the 'numpy' library.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_17

LANGUAGE: Python
CODE:
```
import numpy as np
import pymupdf
#==============================================================================
# create a fun-colored width * height PNG with pymupdf and numpy
#==============================================================================
height = 150
width  = 100
bild = np.ndarray((height, width, 3), dtype=np.uint8)

for i in range(height):
    for j in range(width):
        # one pixel (some fun coloring)
        bild[i, j] = [(i+j)%256, i%256, j%256]

samples = bytearray(bild.tostring())    # get plain pixel data from numpy array
pix = pymupdf.Pixmap(pymupdf.csRGB, width, height, samples, alpha=False)
pix.save("test.png")
```

----------------------------------------

TITLE: Drawing Quadrilaterals in PyMuPDF (Python)
DESCRIPTION: Draws a quadrilateral in a PDF document, defined by four points. This method is part of the PyMuPDF Shape object and provides options for customizing its appearance, including color, fill, width, dashes, line caps, and joins. It also supports overlaying and opacity settings.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_28

LANGUAGE: Python
CODE:
```
draw_quad(quad, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)
```

----------------------------------------

TITLE: Extract Image Blocks using get_text('dict') - PyMuPDF - Python
DESCRIPTION: This snippet shows how to use the page.get_text("dict") method to extract structured information from a page, including images. It filters the resulting blocks to find those of type 1 (images) and demonstrates accessing the data of the first image block, which includes metadata and the binary image data.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_6

LANGUAGE: Python
CODE:
```
d = page.get_text("dict")
blocks = d["blocks"]  # the list of block dictionaries
imgblocks = [b for b in blocks if b["type"] == 1]
pprint(imgblocks[0])
```

----------------------------------------

TITLE: Creating PDF with Text and Image using fitz.Story
DESCRIPTION: This snippet initializes a fitz.Story object, adds paragraphs for text and an image, and then uses a fitz.DocumentWriter to render the story content onto pages of a new PDF file. It requires the 'fitz' library and an image file named 'world.jpg' in the specified archive location.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/_static/prism/prism.html#_snippet_0

LANGUAGE: Python
CODE:
```
import fitz
MEDIABOX = fitz.paper_rect("letter")
WHERE = MEDIABOX + (36, 36, -36, -36)

# create story, let it look at script folder for resources
story = fitz.Story(archive=".")
body = story.body  # access the body of its DOM

with body.add_paragraph() as para:
    # store desired content
    para.set_font("sans-serif").set_color("blue").add_text("Hello World!")

# another paragraph for our image:
with body.add_paragraph() as para:
    # store image in another paragraph
    para.add_image("world.jpg")

writer = fitz.DocumentWriter("output.pdf")

more = 1
while more:
    device = writer.begin_page(MEDIABOX)
    more, _ = story.place(WHERE)
    story.draw(device)
    writer.end_page()

writer.close()
```

----------------------------------------

TITLE: Managing PDF Changes with Journalling in PyMuPDF
DESCRIPTION: This snippet demonstrates how to enable and use journalling in PyMuPDF to manage document updates. It shows how to create a new PDF, enable journalling, and perform operations (adding pages and text) within explicit `journal_start_op()` and `journal_stop_op()` calls. The example also illustrates querying the journal's state using `journal_position()` and `journal_can_do()`, and performing `undo()` and `redo()` operations to navigate through the document's change history.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-journalling.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> import pymupdf
>>> doc=pymupdf.open()
>>> doc.journal_enable()

>>> # try update without an operation:
>>> page = doc.new_page()
mupdf: No journalling operation started
... omitted lines
RuntimeError: No journalling operation started

>>> doc.journal_start_op("op1")
>>> page = doc.new_page()
>>> doc.journal_stop_op()

>>> doc.journal_start_op("op2")
>>> page.insert_text((100,100), "Line 1")
>>> doc.journal_stop_op()

>>> doc.journal_start_op("op3")
>>> page.insert_text((100,120), "Line 2")
>>> doc.journal_stop_op()

>>> doc.journal_start_op("op4")
>>> page.insert_text((100,140), "Line 3")
>>> doc.journal_stop_op()

>>> # show position in journal
>>> doc.journal_position()
(4, 4)
>>> # 4 operations recorded - positioned at bottom
>>> # what can we do?
>>> doc.journal_can_do()
{'undo': True, 'redo': False}
>>> # currently only undos are possible. Print page content:
>>> print(page.get_text())
Line 1
Line 2
Line 3

>>> # undo last insert:
>>> doc.journal_undo()
>>> # show combined status again:
>>> doc.journal_position();doc.journal_can_do()
(3, 4)
{'undo': True, 'redo': True}
>>> print(page.get_text())
Line 1
Line 2

>>> # our position is now second to last
>>> # last text insertion was reverted
>>> # but we can redo / move forward as well:
>>> doc.journal_redo()
>>> # our combined status:
>>> doc.journal_position();doc.journal_can_do()
(4, 4)
{'undo': True, 'redo': False}
>>> print(page.get_text())
Line 1
Line 2
Line 3
>>> # line 3 has appeared again!
```

----------------------------------------

TITLE: Writing Stabilized HTML Content to DocumentWriter - PyMuPDF Python
DESCRIPTION: This static method performs iterative layout of HTML content to a `DocumentWriter`. It repeatedly creates a new `Story` from `contentfn()` and lays it out, extracting `ElementPosition`s for the next call to `contentfn()`. The process stabilizes when the HTML from `contentfn()` becomes unchanged, at which point a final iteration uses the provided `writer` to produce the document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/story-class.rst#_snippet_1

LANGUAGE: Python
CODE:
```
write_stabilized(writer, contentfn, rectfn, user_css=None, em=12, positionfn=None, pagefn=None, archive=None, add_header_ids=True)
```

----------------------------------------

TITLE: Insert Page with Text Content in PyMuPDF Python
DESCRIPTION: Inserts a new page into a PyMuPDF document at a specified location, adding text content to it with customizable font, size, color, and dimensions using `Document.insert_page`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_27

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open(...)  # some new or existing PDF document
n = doc.insert_page(-1, # default insertion point
                        text = "The quick brown fox jumped over the lazy dog",
                        fontsize = 11,
                        width = 595,
                        height = 842,
                        fontname = "Helvetica", # default font
                        fontfile = None, # any font file name
                        color = (0, 0, 0)) # text color (RGB)
```

----------------------------------------

TITLE: Generating Stabilized PDF Content with PyMuPDF Story (Python)
DESCRIPTION: This snippet demonstrates how to use `Story.write_stabilized()` to render HTML content into a PDF document. It focuses on achieving a stable layout across multiple pages, handling content flow and pagination. The method requires a `DocumentWriter` instance for output.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-stories.rst#_snippet_5

LANGUAGE: Python
CODE:
```
import fitz # PyMuPDF
from fitz.story import Story

def create_stabilized_pdf(html_content: str, output_path: str):
    doc = fitz.open() # Create a new PDF document
    writer = fitz.DocumentWriter(doc) # Create a writer for the document
    story = Story(html_content) # Initialize Story with HTML content
    
    # Write the story content to the document writer, stabilizing layout
    # This method handles pagination and ensures consistent rendering.
    story.write_stabilized(writer)
    
    doc.save(output_path) # Save the generated PDF
    doc.close()
    print(f"PDF saved to {output_path}")

if __name__ == "__main__":
    sample_html = """
    <h1>My Document</h1>
    <p>This is some sample content for a PDF document. It will be rendered using PyMuPDF's Story feature.</p>
    <p>The `write_stabilized` method ensures that the layout is consistent and handles page breaks automatically.</p>
    <p>More content to ensure multiple pages if needed.</p>
    """
    create_stabilized_pdf(sample_html, "stabilized_output.pdf")
```

----------------------------------------

TITLE: Merging a PDF File with Another Document Type (SVG) in PyMuPDF
DESCRIPTION: This snippet illustrates merging a PDF document with a document of a different supported file type, such as an SVG, using the `Document.insert_file()` method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_6

LANGUAGE: python
CODE:
```
import pymupdf

doc_a = pymupdf.open("a.pdf") # open the 1st document
doc_b = pymupdf.open("b.svg") # open the 2nd document
```

----------------------------------------

TITLE: Rotating Page with PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to rotate a specific page within a PDF document using PyMuPDF. It opens a PDF, accesses the first page (index 0), sets its rotation to 90 degrees using 'set_rotation()', and saves the modified document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_9

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open document
page = doc[0] # get the 1st page of the document
page.set_rotation(90) # rotate the page
doc.save("rotated-page-1.pdf")
```

----------------------------------------

TITLE: Embedding Files in PDF using PyMuPDF (Python)
DESCRIPTION: This Python script demonstrates how to embed arbitrary files from a specified directory into a new PDF document using PyMuPDF's embfile_add method. It iterates through files, reads their content, and embeds them, optionally showing progress using PySimpleGUI. The resulting PDF contains the embedded files, accessible via a compatible PDF viewer, and requires at least one page for technical reasons.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_9

LANGUAGE: Python
CODE:
```
import os, pymupdf
import PySimpleGUI as psg  # for showing progress bar
doc = pymupdf.open()  # PDF with the pictures
imgdir = "D:/2012_10_05"  # where my files are

imglist = os.listdir(imgdir)  # list of pictures
imgcount = len(imglist)  # pic count
imglist.sort()  # nicely sort them

for i, f in enumerate(imglist):
    img = open(os.path.join(imgdir,f), "rb").read()  # make pic stream
    doc.embfile_add(img, f, filename=f,  # and embed it
                        ufilename=f, desc=f)
    psg.EasyProgressMeter("Embedding Files",  # show our progress
        i+1, imgcount)

page = doc.new_page()  # at least 1 page is needed

doc.save("all-my-pics-embedded.pdf")
```

----------------------------------------

TITLE: Inserting Pages from Another PDF Document - Python
DESCRIPTION: The new 'Document.insert_pdf()' method allows users to insert a range of pages from one PDF document into another. This is a powerful feature for merging or combining PDF files.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_7

LANGUAGE: Python
CODE:
```
import fitz

# Create two dummy PDF files for demonstration
doc1 = fitz.open()
doc1.new_page()
doc1.new_page()
doc1.save("doc1.pdf")
doc1.close()

doc2 = fitz.open()
doc2.new_page()
doc2.new_page()
doc2.new_page()
doc2.save("doc2.pdf")
doc2.close()

# Open the main document and the document to insert
main_doc = fitz.open("doc1.pdf")
other_doc = fitz.open("doc2.pdf")

# Insert all pages from other_doc into main_doc starting at page 1
main_doc.insert_pdf(other_doc, from_page=0, to_page=other_doc.page_count - 1, start_at_page=1)

main_doc.save("merged_document.pdf")
main_doc.close()
other_doc.close()
```

----------------------------------------

TITLE: Deleting Annotation from PDF Page - PyMuPDF
DESCRIPTION: Deletes a specified annotation from the page. The removal includes any bound 'Popup' or response annotations and related objects. It returns the annotation following the deleted one. Physical removal requires saving to a new file with garbage collection enabled.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_15

LANGUAGE: Python
CODE:
```
page.delete_annot(annot)
```

----------------------------------------

TITLE: Creating an SVG Image from a Page in PyMuPDF
DESCRIPTION: This method generates an SVG image representation of the current page. It supports optional transformation via a matrix and allows control over how text is rendered (as paths or relying on system fonts). The output is a UTF-8 encoded string containing the SVG XML.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_38

LANGUAGE: Python
CODE:
```
Page.get_svg_image(matrix=pymupdf.Identity, text_as_path=True)
```

----------------------------------------

TITLE: PyMuPDF Redaction Constants for Image, Graphics, and Text
DESCRIPTION: These constants define the various behaviors for redacting images, vector graphics, and text when using PyMuPDF's redaction features. They control whether content is ignored, removed, or blanked out, providing fine-grained control over the redaction process.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_10

LANGUAGE: Python
CODE:
```
fitz.PDF_REDACT_IMAGE_PIXELS = 2
fitz.PDF_REDACT_IMAGE_NONE = 0
fitz.PDF_REDACT_IMAGE_REMOVE = 1
fitz.PDF_REDACT_IMAGE_REMOVE_UNLESS_INVISIBLE = 3

fitz.PDF_REDACT_LINE_ART_NONE = 0
fitz.PDF_REDACT_LINE_ART_REMOVE_IF_COVERED = 1
fitz.PDF_REDACT_LINE_ART_REMOVE_IF_TOUCHED = 2

fitz.PDF_REDACT_TEXT_REMOVE = 0
fitz.PDF_REDACT_TEXT_NONE = 1
```

----------------------------------------

TITLE: Initializing Document and Page for PDF Manipulation - Python
DESCRIPTION: This Python snippet demonstrates how to initialize a new empty PDF document and add a new page in A4 format using PyMuPDF. It also defines a rectangle 'r1' representing the upper half of the page, which can be used for subsequent content placement or manipulation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_41

LANGUAGE: Python
CODE:
```
doc = pymupdf.open()  # new empty PDF
page=doc.new_page()  # new page in A4 format

# upper half page
r1 = pymupdf.Rect(0, 0, page.rect.width, page.rect.height/2)

# lower half page
```

----------------------------------------

TITLE: Inserting New Page with Text - PyMuPDF Python
DESCRIPTION: A convenience function that combines `Document.new_page` and `Page.insert_text` to insert a new page and optionally add text to it. Parameters include `pno` for insertion position, `text` content, `fontsize`, `width`, `height`, `fontname`, `fontfile`, and `color`. It returns the number of successfully inserted text lines.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_38

LANGUAGE: Python
CODE:
```
insert_page(pno, text=None, fontsize=11, width=595, height=842, fontname="helv", fontfile=None, color=None)
```

----------------------------------------

TITLE: Inserting HTML-Enriched Text with PyMuPDF
DESCRIPTION: This snippet demonstrates how to insert basic HTML-enriched text into a new PDF page using `pymupdf.insert_htmlbox`. It defines a rectangle for the content, provides HTML text with inline styling, and applies global CSS for font family and size. The resulting PDF is saved to a file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_11

LANGUAGE: Python
CODE:
```
import pymupdf


rect = pymupdf.Rect(100, 100, 400, 300)

text = """Lorem ipsum dolor sit amet, consectetur adipisici elit, sed
    eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad
    minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b> 
    nisi ut aliquid ex ea commodi consequat. Quis aute iure 
    <span style="color: #f00;">reprehenderit</span> 
    in <span style="color: #0f0;font-weight:bold;">voluptate</span> velit 
    esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat 
    cupiditat non proident, sunt in culpa qui 
    <a href="https://www.artifex.com">officia</a> deserunt mollit anim id 
    est laborum."""

doc = pymupdf.Document()

page = doc.new_page()
page.insert_htmlbox(rect, text, css="* {font-family: sans-serif;font-size:14px;}")

doc.ez_save(__file__.replace(".py", ".pdf"))
```

----------------------------------------

TITLE: Copying PDF with PyMuPDF - Python
DESCRIPTION: Demonstrates how to open an input PDF file and save it to an output file using PyMuPDF, used here for performance comparison of PDF copying tasks.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app4.rst#_snippet_0

LANGUAGE: python
CODE:
```
import pymupdf
doc = pymupdf.open("input.pdf")
doc.save("output.pdf")
```

----------------------------------------

TITLE: Select Pages by Sequence in PyMuPDF Python
DESCRIPTION: Demonstrates using the `Document.select` method to rearrange or duplicate pages based on a provided sequence of page numbers.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_19

LANGUAGE: python
CODE:
```
doc.select([1, 1, 1, 5, 4, 9, 9, 9, 0, 2, 2, 2])
```

----------------------------------------

TITLE: Rendering PDF Pages with PyMuPDF - Python
DESCRIPTION: Defines a Python function to open a PDF, iterate through its pages, render each page as a PNG image at 150 DPI using PyMuPDF, and save the images. This is used for performance testing of page rendering.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app4.rst#_snippet_4

LANGUAGE: python
CODE:
```
def ProcessFile(datei):
    print "processing:", datei
    doc=pymupdf.open(datei)
    for p in pymupdf.Pages(doc):
        pix = p.get_pixmap(dpi=150)
        pix.save("t-%s.png" % p.number)
        pix = None
    doc.close()
    return
```

----------------------------------------

TITLE: Multiprocessing with GUI and Inter-Process Communication in Python
DESCRIPTION: This example demonstrates a more complex use case of multiprocessing with PyMuPDF, involving a Tkinter GUI in the main process and a child process that accesses the document. It uses a multiprocessing.Queue for inter-process communication to send results back from the worker process to update the GUI.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-multiprocessing.rst#_snippet_1

LANGUAGE: python
CODE:
```
# Example content for multiprocess-gui.py
import multiprocessing
import tkinter as tk
import fitz # PyMuPDF
import queue

# Function to be run in the child process
def process_document(doc_path, result_queue):
    """Opens a document and sends info back to the main process."""
    try:
        doc = fitz.open(doc_path)
        num_pages = doc.page_count
        result_queue.put({"status": "success", "num_pages": num_pages})
        doc.close()
    except fitz.FileNotFoundError:
        result_queue.put({"status": "error", "message": f"Document not found: {doc_path}"})
    except Exception as e:
        result_queue.put({"status": "error", "message": f"An error occurred: {e}"})

# Main application class
class App:
    def __init__(self, root):
        self.root = root
        root.title("PyMuPDF Multiprocessing GUI")

        self.label = tk.Label(root, text="Enter PDF path:")
        self.label.pack()

        self.entry = tk.Entry(root)
        self.entry.pack()

        self.button = tk.Button(root, text="Process Document", command=self.start_processing)
        self.button.pack()

        self.result_label = tk.Label(root, text="")
        self.result_label.pack()

        self.process = None
        self.result_queue = multiprocessing.Queue()

        # Check the queue periodically for results
        self.root.after(100, self.check_queue)

    def start_processing(self):
        doc_path = self.entry.get()
        if not doc_path:
            self.result_label.config(text="Please enter a document path.")
            return

        self.result_label.config(text="Processing...")
        # Start the child process
        self.process = multiprocessing.Process(target=process_document, args=(doc_path, self.result_queue))
        self.process.start()

    def check_queue(self):
        try:
            result = self.result_queue.get_nowait()
            if result["status"] == "success":
                self.result_label.config(text=f"Document has {result['num_pages']} pages.")
            else:
                self.result_label.config(text=f"Error: {result['message']}")
            # Join the process after getting the result
            if self.process:
                self.process.join()
                self.process = None
        except queue.Empty:
            # Queue is empty, check again later if process is running
            if self.process and self.process.is_alive():
                self.root.after(100, self.check_queue)
            elif self.process and not self.process.is_alive():
                 # Process finished without putting anything in queue (shouldn't happen with current logic)
                 self.result_label.config(text="Processing finished unexpectedly.")
                 self.process = None


if __name__ == "__main__":
    # This is required for multiprocessing on some platforms (e.g., Windows)
    multiprocessing.freeze_support()

    root = tk.Tk()
    app = App(root)
    root.mainloop()

```

----------------------------------------

TITLE: Drawing Bézier Curves in PyMuPDF (Python)
DESCRIPTION: Draws a cubic Bézier curve in a PDF document, defined by four control points (p1, p2, p3, p4). This method is part of the PyMuPDF Shape object and offers extensive options for styling, including color, fill, width, dashes, line caps, and joins, along with overlay and opacity controls.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_25

LANGUAGE: Python
CODE:
```
draw_bezier(p1, p2, p3, p4, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)
```

----------------------------------------

TITLE: Setting and Reverting Page CropBox in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to use the `set_cropbox` method to change the visible area of a PDF page. It shows the initial `rect` and `cropbox` values, how `set_cropbox` affects `page.rect` but not `mediabox`, and how to revert the cropbox change either by setting it to `mediabox` or by refreshing `mediabox`. The coordinates must be unrotated.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_44

LANGUAGE: Python
CODE:
```
page = doc.new_page()
page.rect
pymupdf.Rect(0.0, 0.0, 595.0, 842.0)
page.cropbox  # cropbox and mediabox still equal
pymupdf.Rect(0.0, 0.0, 595.0, 842.0)
page.set_cropbox(pymupdf.Rect(100, 100, 400, 400))
page.rect
pymupdf.Rect(0.0, 0.0, 300.0, 300.0)
page.mediabox
pymupdf.Rect(0.0, 0.0, 595.0, 842.0)
page.set_cropbox(page.mediabox)
page.set_mediabox(page.mediabox)
```

----------------------------------------

TITLE: Searching Text with Regex and PyMuPDF
DESCRIPTION: This snippet illustrates how to use regular expressions to search for patterns within text extracted from a PDF page. It first extracts words using `page.get_text("words")` and then filters them based on a regex pattern.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_43

LANGUAGE: Python
CODE:
```
pattern = re.compile(r"...")  # the regex pattern
words = page.get_text("words")  # extract words on page
matches = [w for w in words if pattern.search(w[4])]
```

----------------------------------------

TITLE: Loading PyMuPDF Wheel in Pyodide Console/JupyterLite (Python)
DESCRIPTION: This Python code snippet demonstrates how to load a PyMuPDF wheel within a Pyodide console or JupyterLite notebook. It uses `pyodide_js.loadPackage()` to download and install the wheel from a specified URL, followed by a standard `import pymupdf` statement to make the library available. This method is necessary because `micropip.install()` is incompatible with PyMuPDF's shared library dependencies.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pyodide.rst#_snippet_1

LANGUAGE: python
CODE:
```
import pyodide_js
await pyodide_js.loadPackage(url)
import pymupdf
```

----------------------------------------

TITLE: Flexible Rect Object Creation with Points and Coordinates - Python
DESCRIPTION: The 'fitz.Rect' constructor now supports all possible combinations of points and coordinates, offering greater flexibility when defining rectangular areas.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_14

LANGUAGE: Python
CODE:
```
import fitz

# Create Rect using four coordinates
rect1 = fitz.Rect(0, 0, 100, 50)

# Create Rect using two Point objects
point1 = fitz.Point(0, 0)
point2 = fitz.Point(100, 50)
rect2 = fitz.Rect(point1, point2)

# Create Rect using a Point and two coordinates
rect3 = fitz.Rect(point1, 100, 50)

print(f"Rect 1: {rect1}")
print(f"Rect 2: {rect2}")
print(f"Rect 3: {rect3}")
```

----------------------------------------

TITLE: Filling Text Boxes with Rotation in PyMuPDF
DESCRIPTION: This script demonstrates how to fill multiple rectangular areas with text using `shape.insert_textbox` in PyMuPDF, applying different rotation values to each. It shows how to define an overall area, partition it into sub-rectangles, and then insert text into each cell with varying rotations, drawing the rectangles for visual clarity.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_10

LANGUAGE: Python
CODE:
```
import pymupdf

doc = pymupdf.open()  # new or existing PDF
page = doc.new_page()  # new page, or choose doc[n]

# write in this overall area
rect = pymupdf.Rect(100, 100, 300, 150)

# partition the area in 4 equal sub-rectangles
CELLS = pymupdf.make_table(rect, cols=4, rows=1)

t1 = "text with rotate = 0."  # these texts we will written
t2 = "text with rotate = 90."
t3 = "text with rotate = 180."
t4 = "text with rotate = 270."
text = [t1, t2, t3, t4]
red = pymupdf.pdfcolor["red"]  # some colors
gold = pymupdf.pdfcolor["gold"]
blue = pymupdf.pdfcolor["blue"]
"""
We use a Shape object (something like a canvas) to output the text and
the rectangles surrounding it for demonstration.
"""
shape = page.new_shape()  # create Shape
for i in range(len(CELLS[0])):
    shape.draw_rect(CELLS[0][i])  # draw rectangle
    shape.insert_textbox(
        CELLS[0][i], text[i], fontname="hebo", color=blue, rotate=90 * i
    )

shape.finish(width=0.3, color=red, fill=gold)

shape.commit()  # write all stuff to the page
doc.ez_save(__file__.replace(".py", ".pdf"))
```

----------------------------------------

TITLE: Deleting Pages in PyMuPDF Document (Various Methods)
DESCRIPTION: These examples demonstrate different ways to delete a range of pages (500 through 519) from a PyMuPDF `Document` object. The `delete_pages` method supports direct page numbers, keyword arguments, tuples, and `range` objects, while Python's `del` operator can be used with slicing or iterables. This action also removes links pointing to deleted pages and its performance depends on the number of *remaining* pages.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_41

LANGUAGE: Python
CODE:
```
doc.delete_pages(500, 519)
```

LANGUAGE: Python
CODE:
```
doc.delete_pages(from_page=500, to_page=519)
```

LANGUAGE: Python
CODE:
```
doc.delete_pages((500, 501, 502, ... , 519))
```

LANGUAGE: Python
CODE:
```
doc.delete_pages(range(500, 520))
```

LANGUAGE: Python
CODE:
```
del doc[500:520]
```

LANGUAGE: Python
CODE:
```
del doc[(500, 501, 502, ... , 519)]
```

LANGUAGE: Python
CODE:
```
del doc[range(500, 520)]
```

----------------------------------------

TITLE: Expanding PyMuPDF Rect with Points - Python
DESCRIPTION: Demonstrates how to expand a PyMuPDF Rect object (`r`) by iteratively including points from a list (`points`) using the in-place union operator (`|=`). This effectively makes the rectangle encompass all the included points.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_8

LANGUAGE: Python
CODE:
```
for p in points[1:]: # and include remaining points one by one
    r |= p
```

----------------------------------------

TITLE: Inserting PDF Pages at the Beginning of a Document (Python)
DESCRIPTION: This example illustrates how to insert a range of pages from a source PDF (`doc2`) at the very beginning of a destination PDF (`doc1`). Pages 21 through 25 from `doc2` are copied and inserted as the first pages of `doc1` by specifying `start_at=0`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_69

LANGUAGE: Python
CODE:
```
doc1.insert_pdf(doc2, from_page=21, to_page=25, start_at=0)
```

----------------------------------------

TITLE: Retrieving Detailed Image Information in PyMuPDF (Python)
DESCRIPTION: This method returns a list of dictionaries containing meta-information for all images displayed on the page, including inline images. It works across all document types. Parameters `hashes` and `xrefs` enable computation of MD5 hashcodes and XREF identification respectively, which can help detect duplicate images and link to their PDF object references, though `xrefs=True` increases response time.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_34

LANGUAGE: Python
CODE:
```
get_image_info(hashes=False, xrefs=False)
```

----------------------------------------

TITLE: Selecting and Rearranging Document Pages - Python
DESCRIPTION: The 'Document.select(list)' method allows for advanced page manipulation by removing all pages not specified in the provided list. This enables duplication and re-arrangement of pages within a document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_16

LANGUAGE: Python
CODE:
```
import fitz

doc = fitz.open("input.pdf")

# Assuming input.pdf has at least 5 pages
# Select pages 0, 2, and 4. Page 0 will be duplicated.
# The new document will have pages in order: 0, 2, 4, 0
doc.select([0, 2, 4, 0])

doc.save("selected_pages.pdf")
doc.close()
```

----------------------------------------

TITLE: Adding Highlight Annotation with PyMuPDF
DESCRIPTION: This snippet demonstrates how to add a highlight annotation to a PDF page using PyMuPDF. It first searches for occurrences of a specific text string ('pymupdf') and retrieves their quadrilateral bounding boxes. These quads are then used to create a single highlight annotation covering all found instances.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_12

LANGUAGE: Python
CODE:
```
# prefer quads=True in text searching for annotations!
quads = page.search_for("pymupdf", quads=True)
page.add_highlight_annot(quads)
```

----------------------------------------

TITLE: Extracting Text via PyMuPDF CLI
DESCRIPTION: This command demonstrates how to use the PyMuPDF module directly from the command line to extract text from a document. It produces a text file with layout-preserving text, and various options are available for output control.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_2

LANGUAGE: bash
CODE:
```
python -m pymupdf gettext ...
```

----------------------------------------

TITLE: Optimized PDF Document Saving with PyMuPDF (Python)
DESCRIPTION: The ez_save() method is a convenience function for Document.save() that applies common optimization defaults for file size reduction. It sets deflate=True, garbage=3, and use_objstms=1 by default, making it suitable for lossless compression.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_34

LANGUAGE: Python
CODE:
```
doc.save("output.pdf", deflate=True, garbage=3, use_objstms=1)
```

----------------------------------------

TITLE: Deleting Single Page - PyMuPDF Python
DESCRIPTION: Deletes a single page from the PDF document specified by its 0-based page number `pno`. Negative numbers count backwards from the end. This method also deactivates table of contents entries pointing to the deleted page to maintain PDF structure integrity. Supports Python's `del` statement.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_39

LANGUAGE: Python
CODE:
```
delete_page(pno=-1)
```

----------------------------------------

TITLE: Rendering a Page to a Pixmap in PyMuPDF
DESCRIPTION: This method renders the page content into a Pixmap object, allowing for various rendering options such as applying a transformation matrix, specifying DPI, choosing a colorspace, clipping the area, including an alpha channel, and rendering annotations. It is a versatile method for converting page content into a raster image.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_39

LANGUAGE: Python
CODE:
```
Page.get_pixmap(*, matrix=pymupdf.Identity, dpi=None, colorspace=pymupdf.csRGB, clip=None, alpha=False, annots=True)
```

----------------------------------------

TITLE: Drawing Polylines in PyMuPDF (Python)
DESCRIPTION: Draws several connected lines in a PDF document, defined by a sequence of points. This method is part of the PyMuPDF Shape object and allows customization of color, fill, width, dashes, line caps, and joins. It supports overlaying and opacity settings.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_24

LANGUAGE: Python
CODE:
```
draw_polyline(points, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)
```

----------------------------------------

TITLE: Adding Image (Logo) with PyMuPDF (Python)
DESCRIPTION: This example shows how to insert an image, such as a logo, onto each page of a PDF using PyMuPDF. It opens a document, loops through pages, and inserts an image file ('my-logo.png') into a specific rectangle ('pymupdf.Rect(0,0,50,50)') at the top-left corner of each page. The modified document is saved to a new file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_8

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open("document.pdf") # open a document

for page_index in range(len(doc)): # iterate over pdf pages
    page = doc[page_index] # get the page

    # insert an image logo from a file name at the top left of the document
    page.insert_image(pymupdf.Rect(0,0,50,50),filename="my-logo.png")

doc.save("logo-document.pdf") # save the document with a new filename
```

----------------------------------------

TITLE: Applying Text Properties to PyMuPDF Xml Nodes (Context Manager)
DESCRIPTION: This snippet illustrates the use of context managers for applying text properties to an `Xml` node in PyMuPDF, offering a more concise and chained syntax. It demonstrates how `set_bold` and `set_italic` methods can be chained with `add_text` within a `with` statement.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/xml-class.rst#_snippet_1

LANGUAGE: Python
CODE:
```
body = story.body
with body.add_paragraph() as para:
   para.set_bold().add_text("some bold text")
   para.set_italic().add_text("this is bold and italic")
   para.set_italic(False).set_bold(False).add_text("regular text")
   para.add_text("more regular text")
```

----------------------------------------

TITLE: Extracting and Saving an Image with PyMuPDF
DESCRIPTION: This snippet demonstrates how to use the `doc.extract_image()` method to extract an image from a PDF document by its xref number. It shows how to access the returned dictionary's `image` data and `ext` (extension) to save the image to a file. The `image` key contains the raw image bytes, and `ext` provides the appropriate file extension.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_60

LANGUAGE: python
CODE:
```
d = doc.extract_image(1373)
d
{'ext': 'png', 'smask': 2934, 'width': 5, 'height': 629, 'colorspace': 3, 'xres': 96,
'yres': 96, 'cs-name': 'DeviceRGB',
'image': b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x05\ ...'}
imgout = open(f"image.{d['ext']}", "wb")
imgout.write(d["image"])
102
imgout.close()
```

----------------------------------------

TITLE: Extracting Text with Default Spacing in PyMuPDF Python
DESCRIPTION: Shows the default behavior of `page.get_text("text")` where spaces between characters are preserved, resulting in spaced-out words.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app1.rst#_snippet_8

LANGUAGE: Python
CODE:
```
print(page.get_text("text"))
```

----------------------------------------

TITLE: Inserting Images as PDF Pages using PyMuPDF
DESCRIPTION: Shows how to iterate through a directory of image files, convert each image into a PDF page with matching dimensions, and add it to a new PDF document. Includes a progress bar using PySimpleGUI.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_8

LANGUAGE: Python
CODE:
```
import os, pymupdf
import PySimpleGUI as psg  # for showing a progress bar
doc = pymupdf.open()  # PDF with the pictures
imgdir = "D:/2012_10_05"  # where the pics are
imglist = os.listdir(imgdir)  # list of them
imgcount = len(imglist)  # pic count

for i, f in enumerate(imglist):
    img = pymupdf.open(os.path.join(imgdir, f))  # open pic as document
    rect = img[0].rect  # pic dimension
    pdfbytes = img.convert_to_pdf()  # make a PDF stream
    img.close()  # no longer needed
    imgPDF = pymupdf.open("pdf", pdfbytes)  # open stream as PDF
    page = doc.new_page(width = rect.width,  # new page with ...
                       height = rect.height)  # pic dimension
    page.show_pdf_page(rect, imgPDF, 0)  # image fills the page
    psg.EasyProgressMeter("Import Images",  # show our progress
        i+1, imgcount)

doc.save("all-my-pics.pdf")
```

----------------------------------------

TITLE: Converting Pixmap to PNG Bytes - Python
DESCRIPTION: The new pixmap method 'tobytes()' returns the pixmap's content as a bytearray formatted as a PNG image, facilitating easy export and integration with other image processing libraries.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_17

LANGUAGE: Python
CODE:
```
import fitz

# Create a dummy pixmap
pix = fitz.Pixmap(fitz.csRGB, 100, 100, bytearray(100 * 100 * 3))

# Convert pixmap to PNG formatted bytes
png_bytes = pix.tobytes()

# Save to a file (optional)
with open("output.png", "wb") as f:
    f.write(png_bytes)

print(f"Pixmap converted to PNG bytes, size: {len(png_bytes)} bytes")
pix = None # Release memory
```

----------------------------------------

TITLE: Using Custom Function for Headers in pymupdf4llm (Python)
DESCRIPTION: This snippet shows how to define a custom Python function (`my_headers`) to determine header levels based on matching text spans against the document's Table of Contents (TOC). The function is then passed to the `hdr_info` parameter of `pymupdf4llm.to_markdown`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf4llm/api.rst#_snippet_2

LANGUAGE: Python
CODE:
```
import pymupdf, pymupdf4llm

filename = "input.pdf"
doc = pymupdf.open(filename)  # use a Document for subsequent processing
TOC = doc.get_toc()  # use the table of contents for determining headers

def my_headers(span, page=None):
    """
    Provide some custom header logic (experimental!).
    This callable checks whether the span text matches any of the
    TOC titles on this page.
    If so, use TOC hierarchy level as header level.
    """
    # TOC items on this page:
    toc = [t for t in TOC if t[-1] == page.number + 1]

    if not toc:  # no TOC items on this page
        return ""

    # look for a match in the TOC items
    for lvl, title, _ in toc:
        if span["text"].startswith(title):
            return "#" * lvl + " "
        if title.startswith(span["text"]):
            return "#" * lvl + " "
    
    return ""

# this will *NOT* scan the document for font sizes!
md_text = pymupdf4llm.to_markdown(doc, hdr_info=my_headers)
```

----------------------------------------

TITLE: Changing Link Stroke Colors in PyMuPDF
DESCRIPTION: Modifies the stroke color of a link annotation in PDF documents. Links do not support fill colors, so any `fill` parameter will be ignored. Colors can be set using a dictionary or directly via the `stroke` parameter. The length of the color tuple implicitly determines the colorspace (1=GRAY, 3=RGB, 4=CMYK).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/link.rst#_snippet_1

LANGUAGE: Python
CODE:
```
Link.set_colors(colors=None, stroke=None)
```

----------------------------------------

TITLE: Transform Points/Rects and Perform Matrix Operations in PyMuPDF Python
DESCRIPTION: Shows how PyMuPDF Point and Rect objects can be transformed by multiplying or dividing by a Matrix object or a tuple representing a matrix. It also demonstrates matrix-matrix multiplication and division, including the case of dividing by a non-invertible matrix which raises a `ZeroDivisionError`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_6

LANGUAGE: Python
CODE:
```
>>> m = pymupdf.Matrix(1, 2, 3, 4, 5, 6)
>>> n = pymupdf.Matrix(6, 5, 4, 3, 2, 1)
>>> p = pymupdf.Point(1, 2)
>>> p * m
Point(12.0, 16.0)
>>> p * (1, 2, 3, 4, 5, 6)
Point(12.0, 16.0)
>>> p / m
Point(2.0, -2.0)
>>> p / (1, 2, 3, 4, 5, 6)
Point(2.0, -2.0)
>>>
>>> m * n  # matrix multiplication
Matrix(14.0, 11.0, 34.0, 27.0, 56.0, 44.0)
>>> m / n  # matrix division
Matrix(2.5, -3.5, 3.5, -4.5, 5.5, -7.5)
>>>
>>> m / m  # result is equal to the Identity matrix
Matrix(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)
>>>
>>> # look at this non-invertible matrix:
>>> m = pymupdf.Matrix(1, 0, 1, 0, 1, 0)
>>> ~m
Matrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
>>> # we try dividing by it in two ways:
>>> p = pymupdf.Point(1, 2)
>>> p * ~m  # this delivers point (0, 0):
Point(0.0, 0.0)
>>> p / m  # but this is an exception:
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    p / m
  File "... /site-packages/fitz/pymupdf.py", line 869, in __truediv__
    raise ZeroDivisionError("matrix not invertible")
ZeroDivisionError: matrix not invertible
>>>
```

----------------------------------------

TITLE: Creating QImage from PyMuPDF Pixmap in Python
DESCRIPTION: This snippet demonstrates two methods for creating a PyQt/PySide QImage from a PyMuPDF Pixmap. The second method, using `pix.samples_ptr`, is significantly faster as it avoids an extra copy of the pixel data. Requires PyQt or PySide.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_7

LANGUAGE: Python
CODE:
```
img = QtGui.QImage(pix.samples, pix.width, pix.height, format) # (1)
img = QtGui.QImage(pix.samples_ptr, pix.width, pix.height, format) # (2)
```

----------------------------------------

TITLE: Extracting Text as XML with PyMuPDF Python
DESCRIPTION: Demonstrates how to extract text content from a page in XML format using the `page.get_text("xml")` method. The output is then split into lines and printed.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app1.rst#_snippet_7

LANGUAGE: Python
CODE:
```
for line in page.get_text("xml").splitlines():
    print(line)
```

----------------------------------------

TITLE: Adding Formatted Text Programmatically with PyMuPDF API (Python)
DESCRIPTION: This snippet demonstrates how to create and format text content within a PyMuPDF Story entirely through the Python API, without relying on external HTML or CSS. It shows how to access the story's DOM body, add a paragraph, and chain methods like `set_font`, `set_color`, and `add_text` to programmatically define text appearance and content.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-stories.rst#_snippet_2

LANGUAGE: Python
CODE:
```
import pymupdf

MEDIABOX = pymupdf.paper_rect("letter")
WHERE = MEDIABOX + (36, 36, -36, -36)

story = pymupdf.Story()  # create an empty story
body = story.body  # access the body of its DOM
with body.add_paragraph() as para:  # store desired content
    para.set_font("sans-serif").set_color("blue").add_text("Hello World!")

writer = pymupdf.DocumentWriter("output.pdf")

more = 1

while more:
    device = writer.begin_page(MEDIABOX)
    more, _ = story.place(WHERE)
    story.draw(device)
    writer.end_page()

writer.close()
```

----------------------------------------

TITLE: Drawing Shape Pattern with PyMuPDF Python
DESCRIPTION: Illustrates the general workflow for drawing shapes and inserting text using the `Shape` object in PyMuPDF. It shows the sequence of creating a shape, performing draw operations, finishing sequences of draws, inserting text, and finally committing all changes to the page.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/shape.rst#_snippet_3

LANGUAGE: python
CODE:
```
>>> shape = page.new_shape()
>>> shape.draw1(...)
>>> shape.draw2(...)
>>> ...
>>> shape.finish(width=..., color=..., fill=..., morph=...)
>>> shape.draw3(...)
>>> shape.draw4(...)
>>> ...
>>> shape.finish(width=..., color=..., fill=..., morph=...)
>>> ...
>>> shape.insert_text*
>>> ...
>>> shape.commit()
>>> ....
```

----------------------------------------

TITLE: Deleting Drawings with Redaction Annotation in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to delete the first drawing found on a page by applying a redaction annotation. It involves retrieving drawings, defining a redaction rectangle, adding the annotation, and then applying the redactions with specified options for images, drawings, and text.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-drawing-and-graphics.rst#_snippet_4

LANGUAGE: Python
CODE:
```
paths = page.get_drawings()
rect = paths[0]["rect"]  # rectangle of the 1st drawing
page.add_redact_annot(rect)
page.apply_redactions(0,2,1)  # potentially set options for any of images, drawings, text
```

----------------------------------------

TITLE: Creating a DisplayList in PyMuPDF
DESCRIPTION: This snippet demonstrates how to create a DisplayList object from a PyMuPDF Page object. A DisplayList represents an interpreted document page and can be reused for multiple operations like pixmap creation, text extraction, and text search, saving overhead.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/coop_low.rst#_snippet_0

LANGUAGE: Python
CODE:
```
dl = page.get_displaylist()
```

----------------------------------------

TITLE: Initializing PyMuPDF Story with HTML and CSS (Python)
DESCRIPTION: This snippet demonstrates how to initialize a PyMuPDF Story object by loading HTML and CSS content from local files. It reads the byte content of 'myhtml.html' and 'mycss.css', decodes them, and then passes them to the `pymupdf.Story` constructor to prepare for document generation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-stories.rst#_snippet_4

LANGUAGE: Python
CODE:
```
import pathlib
import pymupdf

htmlpath = pathlib.Path("myhtml.html")
csspath = pathlib.Path("mycss.css")

HTML = htmlpath.read_bytes().decode()
CSS = csspath.read_bytes().decode()

story = pymupdf.Story(html=HTML, user_css=CSS)
```

----------------------------------------

TITLE: Closing a PyMuPDF Document (Python)
DESCRIPTION: This method releases objects and space allocations associated with the document. If the document was opened from a file, it also closes the file, releasing control to the operating system. Explicitly calling close() is equivalent to deleting the document object (e.g., del doc or doc = None).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_54

LANGUAGE: Python
CODE:
```
doc.close()
```

----------------------------------------

TITLE: Preparing Document and Text for Line Insertion (PyMuPDF, Python)
DESCRIPTION: This snippet illustrates the initial steps for inserting text lines onto a PDF page. It shows how to open an existing document or create a new one, obtain a page object, define a starting point for text insertion, and prepare multi-line text as a single string or a list of strings.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_7

LANGUAGE: Python
CODE:
```
import pymupdf
doc = pymupdf.open(...)  # new or existing PDF
page = doc.new_page()  # new or existing page via doc[n]
p = pymupdf.Point(50, 72)  # start point of 1st line

text = "Some text,\nspread across\nseveral lines."
# the same result is achievable by
# text = ["Some text", "spread across", "several lines."]
```

----------------------------------------

TITLE: Combining Multiple PDF Pages (4-up) with PyMuPDF
DESCRIPTION: Shows how to open a source PDF and an empty output PDF. Defines a standard page size (A4) and divides it into 4 rectangles. Iterates through the source pages, creating a new output page every 4 input pages, and places each input page into one of the predefined rectangles on the current output page using `show_pdf_page`. Saves the resulting document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_29

LANGUAGE: python
CODE:
```
import pymupdf

src = pymupdf.open("test.pdf")
doc = pymupdf.open()  # empty output PDF

width, height = pymupdf.paper_size("a4")  # A4 portrait output page format
r = pymupdf.Rect(0, 0, width, height)

# define the 4 rectangles per page
r1 = r / 2  # top left rect
r2 = r1 + (r1.width, 0, r1.width, 0)  # top right
r3 = r1 + (0, r1.height, 0, r1.height)  # bottom left
r4 = pymupdf.Rect(r1.br, r.br)  # bottom right

# put them in a list
r_tab = [r1, r2, r3, r4]

# now copy input pages to output
for spage in src:
    if spage.number % 4 == 0:  # create new output page
        page = doc.new_page(-1,
                      width = width,
                      height = height)
    # insert input page into the correct rectangle
    page.show_pdf_page(r_tab[spage.number % 4],  # select output rect
                     src,  # input document
                     spage.number)  # input page number

# by all means, save new file using garbage collection and compression
doc.save("4up.pdf", garbage=3, deflate=True)
```

----------------------------------------

TITLE: Moving a Page in PyMuPDF Document
DESCRIPTION: The `move_page` method relocates a page within a PDF document by copying it to a new position and then deleting the original. It requires the page number `pno` to be moved and an optional `to` parameter specifying the insertion point. The default `to` value inserts the page after the last page.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_44

LANGUAGE: Python
CODE:
```
doc.move_page(pno, to=-1)
```

----------------------------------------

TITLE: Accessing and Setting PDF Page Rotation - Python
DESCRIPTION: The 'rotation' property and 'setRotation()' method allow users to query or modify a PDF page's rotation. This is useful for correcting page orientation programmatically.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_2

LANGUAGE: Python
CODE:
```
import fitz

doc = fitz.open("input.pdf")
page = doc[0]

# Get current rotation
current_rotation = page.rotation
print(f"Current rotation: {current_rotation}")

# Set rotation to 90 degrees
page.setRotation(90)

doc.save("output.pdf")
doc.close()
```

----------------------------------------

TITLE: Creating Pixmaps from Document XREF or Another Pixmap - Python
DESCRIPTION: New pixmap constructors enhance flexibility, allowing pixmaps to be created directly from an image's XREF number within an opened PDF document, or by converting the colorspace of an existing pixmap.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_10

LANGUAGE: Python
CODE:
```
import fitz

doc = fitz.open("input.pdf")

# Assuming xref 10 is an image object in the PDF
# (You would typically find xrefs via page.getPageImageList())
# For demonstration, let's assume a valid xref exists.
# pix_from_xref = fitz.Pixmap(doc, 10)
# print(f"Pixmap from XREF: {pix_from_xref.width}x{pix_from_xref.height}")
# pix_from_xref.save("image_from_xref.png")

# Create a dummy pixmap
original_pix = fitz.Pixmap(fitz.csRGB, 100, 100, bytearray(100 * 100 * 3))

# Create a new pixmap by converting colorspace of an existing one
converted_pix = fitz.Pixmap(fitz.csGRAY, original_pix)
print(f"Converted pixmap colorspace: {converted_pix.colorspace.name}")

original_pix = None # Release memory
converted_pix = None # Release memory
doc.close()
```

----------------------------------------

TITLE: Selecting Specific Pages (PyMuPDF Python)
DESCRIPTION: This PDF-only method keeps only the pages whose numbers are present in the provided sequence. Pages not in the sequence are deleted from memory. It allows for non-unique and out-of-order page numbers, creating a new page tree. For fewer pages, `copy_page`, `move_page`, `delete_page` are significantly faster.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_20

LANGUAGE: Python
CODE:
```
doc.select(s)
```

----------------------------------------

TITLE: Deleting Single Page from Document with PyMuPDF - Python
DESCRIPTION: Illustrates how to remove a single page from a PDF document using `doc.delete_page`. It shows opening a document, deleting the page by its zero-based index, and saving the modified document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_14

LANGUAGE: Python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open a document
doc.delete_page(0) # delete the 1st page of the document
doc.save("test-deleted-page-one.pdf") # save the document
```

----------------------------------------

TITLE: Retrieving Page Images in PyMuPDF (Python)
DESCRIPTION: This method returns a list of images referenced by the current page in a PDF document. It serves as a convenient wrapper for the `Document.get_page_images` method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_33

LANGUAGE: Python
CODE:
```
get_images(full=False)
```

----------------------------------------

TITLE: Generating Page Links - PyMuPDF
DESCRIPTION: Returns a generator that iterates over the page's links, yielding entries equivalent to those from `Page.get_links`. An optional `kinds` argument allows filtering by one or more link types (e.g., `pymupdf.LINK_GOTO`). This method was introduced in PyMuPDF v1.16.4.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_22

LANGUAGE: Python
CODE:
```
page.links(kinds=None)
```

----------------------------------------

TITLE: Calculate Text Pixel Width using PyMuPDF Font Data (Python)
DESCRIPTION: This Python function calculates the total pixel width of a given text string using a list of character widths (obtained from `Document.get_char_widths`) and a font size. It sums the widths of individual characters based on their ordinal values and multiplies by the font size. It includes error handling for characters outside the provided width list limit.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/functions.rst#_snippet_11

LANGUAGE: Python
CODE:
```
def pixlen(text, widthlist, fontsize):
    try:
        return sum([widthlist[ord(c)] for c in text]) * fontsize
    except IndexError:
        raise ValueError:("max. code point found: %i, increase limit" % ord(max(text)))
```

----------------------------------------

TITLE: Initializing Document Journaling and Inserting Content - PyMuPDF Python
DESCRIPTION: This snippet opens a new PyMuPDF document, enables its journaling feature, and then performs a series of operations (page creation and multiple text insertions) wrapped within journaled operations. Each `journal_start_op()` and `journal_stop_op()` pair defines a single undoable action.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-journalling.rst#_snippet_1

LANGUAGE: Python
CODE:
```
doc=pymupdf.open()
doc.journal_enable()
doc.journal_start_op("Page insert")
page=doc.new_page()
doc.journal_stop_op()
for i in range(5):
        doc.journal_start_op("insert-%i" % i)
        page.insert_text((100, 100 + 20*i), "text line %i" %i)
        doc.journal_stop_op()
```

----------------------------------------

TITLE: Comparing Pixmap.samples and Pixmap.samples_mv Performance (Python)
DESCRIPTION: This snippet demonstrates the significant performance difference when accessing the length of Pixmap.samples versus Pixmap.samples_mv using IPython's %timeit magic command. It shows that accessing the memoryview ('samples_mv') is much faster as it avoids creating a copy of the pixel data.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_6

LANGUAGE: Python
CODE:
```
In [3]: %timeit len(pix.samples_mv)
367 ns ± 1.75 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
In [4]: %timeit len(pix.samples)
3.52 ms ± 57.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
```

----------------------------------------

TITLE: Setting Document Table of Contents (PyMuPDF Python)
DESCRIPTION: This method sets the Table of Contents (TOC) for the document. It takes a TOC structure as the first argument and an optional `collapse` parameter to control the initial state of the TOC entries.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_27

LANGUAGE: Python
CODE:
```
doc.set_toc(toc, collapse=1)
```

----------------------------------------

TITLE: Extracting Page Drawings with PyMuPDF (Python)
DESCRIPTION: This snippet shows how to extract drawing commands (vector graphics) from a PyMuPDF page. The `page.get_drawings()` method returns a list of dictionaries, where each dictionary represents a "path" or a separate drawing. The `pprint` function is used to display the structured output of these drawing commands.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-drawing-and-graphics.rst#_snippet_1

LANGUAGE: Python
CODE:
```
pprint(page.get_drawings())
```

----------------------------------------

TITLE: Profiling Image Properties with PyMuPDF
DESCRIPTION: Demonstrates how to use the `pymupdf.image_profile` function to extract properties like dimensions, resolution, colorspace, and orientation from an image provided as a byte stream. The example shows reading image data from a file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/functions.rst#_snippet_8

LANGUAGE: Python
CODE:
```
pymupdf.image_profile(open("nur-ruhig.jpg", "rb").read())
```

----------------------------------------

TITLE: Iterating Through Page Links (PyMuPDF, Python)
DESCRIPTION: This snippet demonstrates how to iterate through all pages of a document and then iterate through all links found on each page. It accesses the first link using `page.first_link` and then traverses the linked list of links using the `link.next` property.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_32

LANGUAGE: python
CODE:
```
import pymupdf

for page in doc: # iterate the document pages
    link = page.first_link  # a `Link` object or `None`

    while link: # iterate over the links on page
        # do something with the link, then:
        link = link.next # get next link, last one has `None` in its `next`
```

----------------------------------------

TITLE: Making a Full Page Copy in PyMuPDF Document
DESCRIPTION: The `fullcopy_page` method creates a complete duplicate of a page in a PDF document, assigning it a new `xref`. This allows the copied page to be modified independently of the original. It takes the page number `pno` to be duplicated and an optional `to` parameter for insertion position. Popup and "IRT" annotations are not copied.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_43

LANGUAGE: Python
CODE:
```
doc.fullcopy_page(pno, to=-1)
```

----------------------------------------

TITLE: Modifying Link Border Properties in PyMuPDF
DESCRIPTION: Changes the border width and dashing properties of a link annotation in PDF documents. It allows specification using a dictionary or direct parameters for width, style, and dashes. If `border` is not a dictionary, direct parameters are used. Setting `dashes` automatically sets `style` to 'D' (dashed).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/link.rst#_snippet_0

LANGUAGE: Python
CODE:
```
Link.set_border(border=None, width=0, style=None, dashes=None)
```

----------------------------------------

TITLE: Using Basic FreeText Annotations PyMuPDF Python
DESCRIPTION: This script illustrates the fundamental usage of 'FreeText' annotations in PyMuPDF. It shows how to add simple text boxes to a PDF page and modify basic properties like border width and color.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-annotations.rst#_snippet_1

LANGUAGE: python
CODE:
```
import fitz

doc = fitz.open()
page = doc.new_page()

# Basic FreeText
rect = fitz.Rect(50, 50, 200, 100)
annot = page.add_free_text_annot(rect, "Basic FreeText")

# Another FreeText with different properties
rect2 = fitz.Rect(50, 150, 200, 200)
annot2 = page.add_free_text_annot(rect2, "Another FreeText")
annot2.set_border(width=2)
annot2.set_colors(stroke=(1, 0, 0)) # Red border

doc.save("output_freetext1.pdf")
doc.close()
```

----------------------------------------

TITLE: Matrix Operations: Invert, Concat, Pretranslate - Python
DESCRIPTION: New methods for 'fitz.Matrix' objects enable common matrix operations: 'invert()' for calculating the inverse, 'concat()' for matrix multiplication, and 'pretranslate()' for applying a shift transformation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_20

LANGUAGE: Python
CODE:
```
import fitz

# Invert a matrix
mat = fitz.Matrix(2, 0, 0, 2, 10, 20)
inverted_mat = mat.invert()
print(f"Original Matrix: {mat}")
print(f"Inverted Matrix: {inverted_mat}")

# Concatenate matrices (matrix product)
mat1 = fitz.Matrix(1, 0, 0, 1, 10, 20)
mat2 = fitz.Matrix(2, 0, 0, 2, 0, 0)
product_mat = mat1.concat(mat2)
print(f"Product Matrix (mat1 * mat2): {product_mat}")

# Pretranslate a matrix
original_mat = fitz.Matrix(1, 0, 0, 1, 0, 0)
shifted_mat = original_mat.pretranslate(50, 100)
print(f"Shifted Matrix
```

----------------------------------------

TITLE: Retrieving Image Bounding Boxes and Transforms in PyMuPDF (Python)
DESCRIPTION: This method returns the boundary boxes and transformation matrices for an embedded image. It is an enhanced version of `Page.get_image_bbox`, offering improved functionality for image rectangle extraction. The `transform` parameter determines if the transformation matrix is also returned.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_36

LANGUAGE: Python
CODE:
```
get_image_rects(item, transform=False)
```

----------------------------------------

TITLE: Calculate Clip and Create Pixmap based on Zoom - PyMuPDF - Python
DESCRIPTION: This snippet calculates the dimensions and position of a clip rectangle based on a desired zoom level and the original page dimensions. It then creates a pymupdf.Rect for the clip, ensures it stays within the page boundaries, and finally creates a pymupdf.Pixmap using the calculated clip and a corresponding matrix.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_4

LANGUAGE: Python
CODE:
```
width = WIDTH / zoom
height = HEIGHT / zoom
clip = pymupdf.Rect(tl, tl.x + width, tl.y + height)
# ensure we still are inside the page
clip &= page.rect
mat = pymupdf.Matrix(zoom, zoom)
pix = pymupdf.Pixmap(matrix=mat, clip=clip)
```

----------------------------------------

TITLE: Applying Styles with External CSS in PyMuPDF Stories (Python)
DESCRIPTION: This snippet illustrates how to apply styles to a PyMuPDF Story by providing a separate CSS string along with the HTML content. It demonstrates the use of the `user_css` parameter in the `pymupdf.Story` constructor to achieve formatting, allowing for separation of content and presentation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-stories.rst#_snippet_1

LANGUAGE: Python
CODE:
```
import pymupdf

CSS = """
body {
    font-family: sans-serif;
    color: blue;
}
"""

HTML = """
<p>Hello World!</p>
"""

# the story would then be created like this:
story = pymupdf.Story(html=HTML, user_css=CSS)
```

----------------------------------------

TITLE: Retrieving Embedded File Content in PyMuPDF (Python)
DESCRIPTION: This method retrieves the content of an embedded file by its index or name. It returns the content as bytes. An exception is raised if the document is not a PDF or the entry is not found. The 'item' parameter can be an integer (index) or a string (name).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_49

LANGUAGE: Python
CODE:
```
doc.embfile_get(item)
```

----------------------------------------

TITLE: Embedding File into Document with PyMuPDF - Python
DESCRIPTION: Shows how to embed an entire PDF document as a file within another PDF using `doc.embfile_add`. It involves opening both documents, getting the bytes of the document to be embedded, and adding it to the main document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_13

LANGUAGE: Python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open main document
embedded_doc = pymupdf.open("my-embed.pdf") # open document you want to embed

embedded_data = embedded_doc.tobytes() # get the document byte data as a buffer

# embed with the file name and the data
doc.embfile_add("my-embedded_file.pdf", embedded_data)

doc.save("document-with-embed.pdf") # save the document
```

----------------------------------------

TITLE: Closing a PyMuPDF Document (Python)
DESCRIPTION: Closes the PyMuPDF document object, releasing resources held by the document. This is a standard practice after finishing operations on a document to prevent resource leaks.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_35

LANGUAGE: python
CODE:
```
doc.close()
```

----------------------------------------

TITLE: Deleting Link from PDF Page - PyMuPDF
DESCRIPTION: Deletes the specified link from the page. The `linkdict` parameter must be an original item obtained from `get_links()` because its 'xref' key identifies the PDF object to be deleted.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_17

LANGUAGE: Python
CODE:
```
page.delete_link(linkdict)
```

----------------------------------------

TITLE: Extracting Vector Graphics from a Page in PyMuPDF
DESCRIPTION: This snippet shows how to extract vector graphics, also known as drawings, from a specific page of a document using the `page.get_drawings()` method. It returns a dictionary containing path information.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_4

LANGUAGE: python
CODE:
```
doc = pymupdf.open("some.file")
page = doc[0]
paths = page.get_drawings()
```

----------------------------------------

TITLE: Extracting HTML Representation with PyMuPDF
DESCRIPTION: Extracts the page content as an HTML string using `get_text("html")`. The example then splits the HTML string into lines and prints each line, showing the structure including positioning and font information.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app1.rst#_snippet_3

LANGUAGE: Python
CODE:
```
for line in page.get_text("html").splitlines():
    print(line)
```

----------------------------------------

TITLE: Updating Link on PDF Page - PyMuPDF
DESCRIPTION: Modifies the specified link on the page. The `linkdict` parameter must be a modified original item obtained from `get_links()` to identify the PDF object to be changed. For URI links, ensure the 'uri' key starts with a disambiguating string like 'http://'.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_19

LANGUAGE: Python
CODE:
```
page.update_link(linkdict)
```

----------------------------------------

TITLE: Adding Widget to PDF Page - PyMuPDF
DESCRIPTION: Adds a PDF Form field (widget) to a page, which also turns the PDF into a Form PDF. It requires a pre-created `Widget` object as input. This method returns the newly added widget annotation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_14

LANGUAGE: Python
CODE:
```
page.add_widget(widget)
```

----------------------------------------

TITLE: Increase Image Resolution using Matrix (PyMuPDF, Python)
DESCRIPTION: Demonstrates how to increase the resolution of a page pixmap by applying a zoom factor using a `pymupdf.Matrix`. A matrix with zoom factors 2.0 for both x and y dimensions is created and passed to the `page.get_pixmap()` method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_1

LANGUAGE: Python
CODE:
```
zoom_x = 2.0  # horizontal zoom
zoom_y = 2.0  # vertical zoom
mat = pymupdf.Matrix(zoom_x, zoom_y)  # zoom factor 2 in each dimension
pix = page.get_pixmap(matrix=mat)  # use 'mat' instead of the identity matrix
```

----------------------------------------

TITLE: Writing Stabilized HTML Content with Internal Links - PyMuPDF Python
DESCRIPTION: This static method functions similarly to `write_stabilized()` but, like `write_with_links()`, it does not accept a `writer` argument. Instead, it returns a PDF `Document` in which all internal HTML links have been automatically created. This is useful for generating complex documents with dynamic content and a table of contents that requires stable page numbers and functional links.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/story-class.rst#_snippet_3

LANGUAGE: Python
CODE:
```
write_stabilized_with_links(contentfn, rectfn, user_css=None, em=12, positionfn=None, pagefn=None, archive=None, add_header_ids=True)
```

----------------------------------------

TITLE: Embedding a File in PyMuPDF Document
DESCRIPTION: The `embfile_add` method embeds a new file into a PDF document. It requires a unique `name` identifier and the file `buffer` (contents). Optional parameters include `filename`, `ufilename` (unicode filename), and `desc` (description). File contents are compressed, and the method returns the `xref` of the inserted file, automatically setting `/CreationDate` and `/ModDate`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_47

LANGUAGE: Python
CODE:
```
doc.embfile_add(name, buffer, filename=None, ufilename=None, desc=None)
```

----------------------------------------

TITLE: Creating Pixmaps Directly from Image Files - Python
DESCRIPTION: Pixmaps can now be instantiated directly from image files using the new constructor 'fitz.Pixmap(filename)', simplifying the process of loading external images into PyMuPDF.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_13

LANGUAGE: Python
CODE:
```
import fitz

# Create a dummy image file for demonstration
# (In a real scenario, you would have an actual image file)
# from PIL import Image
# img = Image.new('RGB', (60, 30), color = 'red')
# img.save('dummy_image.png')

# Create a pixmap directly from an image file
# Ensure 'dummy_image.png' exists or replace with a real path
# pix = fitz.Pixmap("dummy_image.png")
# print(f"Pixmap from file: {pix.width}x{pix.height}")
# pix = None # Release memory
```

----------------------------------------

TITLE: Limit Header Levels with IdentifyHeaders (Python)
DESCRIPTION: This example demonstrates how to use the `IdentifyHeaders` class to limit the maximum number of header levels generated during markdown conversion. It opens a PDF document, creates an `IdentifyHeaders` object specifying `max_levels=3`, and then uses this object when calling `to_markdown`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf4llm/api.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import pymupdf, pymupdf4llm

filename = "input.pdf"
doc = pymupdf.open(filename)  # use a Document for subsequent processing
my_headers = pymupdf4llm.IdentifyHeaders(doc, max_levels=3)  # generate header info
md_text = pymupdf4llm.to_markdown(doc, hdr_info=my_headers)
```

----------------------------------------

TITLE: PyMuPDF Text Span Dictionary Structure (Python)
DESCRIPTION: This dictionary represents a single text span as returned by the `page.get_texttrace()` method. It contains detailed information about the text segment, including font characteristics, rendering mode, opacity, bounding box, and position in the page's drawing sequence. Keys like 'flags', 'font', 'size', 'type', 'opacity', 'bbox', 'seqno', and 'layer' provide granular data for text analysis and processing.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/functions.rst#_snippet_10

LANGUAGE: python
CODE:
```
{
            'flags': 12,                        # font flags (1)
            'font': 'CourierNewPSMT',           # font name (1)
            'linewidth': 0.4019999980926514,    # current line width value (3)
            'opacity': 1.0,                     # alpha value of the text (5)
            'layer': None,                      # name of Optional Content Group (9)
            'seqno': 246,                       # sequence number (8)
            'size': 8.039999961853027,          # font size (1)
            'spacewidth': 4.824785133358091,    # width of space char
            'type': 0,                          # span type (2)
            'wmode': 0                          # writing mode (1)
         }
```

----------------------------------------

TITLE: Cropping Page with PyMuPDF (Python)
DESCRIPTION: This example illustrates how to crop a page in a PDF document to a defined rectangular area using PyMuPDF. It opens a PDF, gets the first page, sets its crop box using 'set_cropbox()' with a specified 'pymupdf.Rect', and saves the result.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_10

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open document
page = doc[0] # get the 1st page of the document
page.set_cropbox(pymupdf.Rect(100, 100, 400, 400)) # set a cropbox for the page
doc.save("cropped-page-1.pdf")
```

----------------------------------------

TITLE: Calculate Zoom for Clip to Fit GUI Window (PyMuPDF, Python)
DESCRIPTION: Calculates the appropriate zoom factor to make a page clip fit within a given GUI window's dimensions while maintaining aspect ratio. It compares the aspect ratios of the clip and the window to determine whether to scale based on height or width, then applies the calculated zoom and clip to `get_pixmap`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_3

LANGUAGE: Python
CODE:
```
# WIDTH: width of the GUI window
# HEIGHT: height of the GUI window
# clip: a subrectangle of the document page
# compare width/height ratios of image and window

if clip.width / clip.height < WIDTH / HEIGHT:
    # clip is narrower: zoom to window HEIGHT
    zoom = HEIGHT / clip.height
else:  # clip is broader: zoom to window WIDTH
    zoom = WIDTH / clip.width
mat = pymupdf.Matrix(zoom, zoom)
pix = page.get_pixmap(matrix=mat, clip=clip)
```

----------------------------------------

TITLE: Generating Pixmap from PyMuPDF DisplayList in Python
DESCRIPTION: Renders the display list into a Pixmap object. Allows customization of the transformation matrix, colorspace, inclusion of an alpha channel, and restricting rendering to a specific clip area.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/displaylist.rst#_snippet_3

LANGUAGE: Python
CODE:
```
get_pixmap(matrix=pymupdf.Identity, colorspace=pymupdf.csRGB, alpha=0, clip=None)
```

----------------------------------------

TITLE: Drawing Circles on a Page in PyMuPDF (Python)
DESCRIPTION: This example illustrates two methods for drawing a circle: directly on the page using 'page.draw_circle' and by creating a 'Shape' object. The 'Shape' object allows combining multiple drawings and applying common properties before committing them to the page.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-drawing-and-graphics.rst#_snippet_5

LANGUAGE: Python
CODE:
```
# Draw a circle on the page using the Page method
page.draw_circle((center_x, center_y), radius, color=(1, 0, 0), width=2)

# Draw a circle on the page using a Shape object
shape = page.new_shape()
shape.draw_circle((center_x, center_y), radius)
shape.finish(color=(1, 0, 0), width=2)
shape.commit(overlay=True)
```

----------------------------------------

TITLE: Generating a Pixmap from a PyMuPDF DisplayList
DESCRIPTION: This snippet shows how to create a Pixmap object directly from a previously generated DisplayList. Using a DisplayList for pixmap generation can significantly reduce execution time compared to generating it directly from a Page object.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/coop_low.rst#_snippet_1

LANGUAGE: Python
CODE:
```
pix = dl.get_pixmap()
```

----------------------------------------

TITLE: Invoke PyMuPDF CLI directly
DESCRIPTION: Shows the primary method to invoke the PyMuPDF command line interface using the installed 'pymupdf' executable.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_0

LANGUAGE: text
CODE:
```
pymupdf <command and parameters>
```

----------------------------------------

TITLE: Checking Font Properties with PyMuPDF Flags
DESCRIPTION: This Python snippet shows how to test for specific font characteristics, such as bold and italic, by performing a bitwise AND operation on the `flags` integer with predefined PyMuPDF constants (`pymupdf.TEXT_FONT_BOLD`, `pymupdf.TEXT_FONT_ITALIC`). It prints a message if both properties are present.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/textpage.rst#_snippet_3

LANGUAGE: Python
CODE:
```
if flags & pymupdf.TEXT_FONT_BOLD & pymupdf.TEXT_FONT_ITALIC:
    print(f"{span['text']=} is bold and italic")
```

----------------------------------------

TITLE: Common PDF Widget Flag Bit Constants (PyMuPDF/MuPDF)
DESCRIPTION: Defines bit flags applicable to all types of PDF form widgets, such as read-only status, required fields, and exportability.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_46

LANGUAGE: Constants
CODE:
```
PDF_FIELD_IS_READ_ONLY 1
PDF_FIELD_IS_REQUIRED 1 << 1
PDF_FIELD_IS_NO_EXPORT 1 << 2
```

----------------------------------------

TITLE: Copying a Page Reference in PyMuPDF Document
DESCRIPTION: The `copy_page` method creates a new reference to an existing page within a PDF document. It takes the page number `pno` to be copied and an optional `to` parameter indicating where to insert the copy. Changes to the copied page will affect the original as only a reference is created, not a full duplicate.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_42

LANGUAGE: Python
CODE:
```
doc.copy_page(pno, to=-1)
```

----------------------------------------

TITLE: Getting paper rectangle in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to use the `paper_rect` function to obtain a `Rect` object representing the dimensions of a specified paper format. It shows importing the library and calling the function with a format string.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/functions.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> import pymupdf
>>> pymupdf.paper_rect("letter-l")
pymupdf.Rect(0.0, 0.0, 792.0, 612.0)
>>>
```

----------------------------------------

TITLE: Retrieving All Page Links - PyMuPDF
DESCRIPTION: Retrieves all links present on the page. It returns a list of dictionaries, where each dictionary describes a link. This method or `Page.links` should be used when intending to make changes to the page's links.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_21

LANGUAGE: Python
CODE:
```
page.get_links()
```

----------------------------------------

TITLE: Add Blank Page with Predefined Size in PyMuPDF Python
DESCRIPTION: Adds a new blank page to a PyMuPDF document using a predefined paper size (like 'letter-l' for landscape) obtained via the `pymupdf.paper_size` convenience function.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_25

LANGUAGE: python
CODE:
```
w, h = pymupdf.paper_size("letter-l")  # 'Letter' landscape
page = doc.new_page(width = w, height = h)
```

----------------------------------------

TITLE: Embedding Images in PyMuPDF Stories via Python API (Python)
DESCRIPTION: This snippet extends the programmatic text creation example to include an image within the generated PDF. It demonstrates how to initialize a `pymupdf.Story` with an `archive` path to specify where resources like images can be found, and then uses `para.add_image()` to embed the image into a new paragraph within the story's body.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-stories.rst#_snippet_3

LANGUAGE: Python
CODE:
```
import pymupdf

MEDIABOX = pymupdf.paper_rect("letter")
WHERE = MEDIABOX + (36, 36, -36, -36)

# create story, let it look at script folder for resources
story = pymupdf.Story(archive=".")
body = story.body  # access the body of its DOM

with body.add_paragraph() as para:
    # store desired content
    para.set_font("sans-serif").set_color("blue").add_text("Hello World!")

# another paragraph for our image:
with body.add_paragraph() as para:
    # store image in another paragraph
    para.add_image("world.jpg")

writer = pymupdf.DocumentWriter("output.pdf")

more = 1

while more:
    device = writer.begin_page(MEDIABOX)
    more, _ = story.place(WHERE)
    story.draw(device)
    writer.end_page()

writer.close()
```

----------------------------------------

TITLE: Opening a Django Storage File Stream with PyMuPDF
DESCRIPTION: Illustrates how to open a file managed by Django's File Storage API. It reads the file content into memory using `default_storage.open()` and then opens it as a stream with `pymupdf.Document()`. This approach works with various storage backends but may consume significant memory for large files.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/how-to-open-a-file.rst#_snippet_2

LANGUAGE: python
CODE:
```
import pymupdf
from django.core.files.storage import default_storage

from .models import MyModel

obj = MyModel.objects.get(id=1)
with default_storage.open(obj.file.name) as f:
    data = f.read()

doc = pymupdf.Document(stream=data)
```

----------------------------------------

TITLE: Modify PyMuPDF Annotation Appearance (Python)
DESCRIPTION: This snippet demonstrates how to open a PDF, access the first annotation on the first page, modify its border style, stroke and fill colors, update its information dictionary (title, content, subject), change its rectangle to resize it, update its appearance, and save the document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/annot.rst#_snippet_1

LANGUAGE: python
CODE:
```
doc = pymupdf.open("circle-in.pdf")
page = doc[0]                          # page 0
annot = page.first_annot                # get the annotation
annot.set_border(dashes=[3])           # set dashes to "3 on, 3 off ..."

# set stroke and fill color to some blue
annot.set_colors({"stroke":(0, 0, 1), "fill":(0.75, 0.8, 0.95)})
info = annot.info                      # get info dict
info["title"] = "Jorj X. McKie"        # set author

# text in popup window ...
info["content"] = "I changed border and colors and enlarged the image by 20%."
info["subject"] = "Demonstration of PyMuPDF"     # some PDF viewers also show this
annot.set_info(info)                   # update info dict
r = annot.rect                         # take annot rect
r.x1 = r.x0 + r.width  * 1.2           # new location has same top-left
r.y1 = r.y0 + r.height * 1.2           # but 20% longer sides
annot.set_rect(r)                      # update rectangle
annot.update()                         # update the annot's appearance
doc.save("circle-out.pdf")             # save
```

----------------------------------------

TITLE: Extracting RGB and Alpha Samples from Pixmap - Python
DESCRIPTION: New pixmap methods 'samplesRGB()' and 'samplesAlpha()' provide direct access to the RGB color components (alpha stripped) and the alpha channel bytes respectively, useful for detailed image manipulation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_18

LANGUAGE: Python
CODE:
```
import fitz

# Create a dummy RGBA pixmap
pix = fitz.Pixmap(fitz.csRGBA, 10, 10, bytearray(10 * 10 * 4))

# Get RGB samples (alpha bytes stripped)
rgb_samples = pix.samplesRGB()
print(f"RGB samples length: {len(rgb_samples)}") # Should be width * height * 3

# Get Alpha samples (alpha bytes only)
alpha_samples = pix.samplesAlpha()
print(f"Alpha samples length: {len(alpha_samples)}") # Should be width * height * 1

pix = None # Release memory
```

----------------------------------------

TITLE: Adding File Attachment Annotation - PyMuPDF Python
DESCRIPTION: Adds a file attachment annotation with a 'PushPin' icon at a specified location in a PDF. It requires the position, file content as a buffer, and a filename. Optional parameters include a Unicode filename, description, and a choice of icon. The annotation is drawn with a yellow stroke color.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_4

LANGUAGE: Python
CODE:
```
add_file_annot(pos, buffer, filename, ufilename=None, desc=None, icon="PushPin")
```

----------------------------------------

TITLE: Using Rich Text and Callout FreeText Annotations PyMuPDF Python
DESCRIPTION: This example expands on FreeText annotations by demonstrating how to use rich text formatting within the annotation content and how to create call-out style FreeText annotations with leader lines.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-annotations.rst#_snippet_2

LANGUAGE: python
CODE:
```
import fitz

doc = fitz.open()
page = doc.new_page()

# Rich Text FreeText
rect = fitz.Rect(50, 50, 300, 150);
# Example rich text (simplified)
rich_text = "<font face='Times-Roman' size='12' color='#FF0000'><b>Bold Red Text</b></font><br/>Normal text.";
annot = page.add_free_text_annot(rect, rich_text, flags=fitz.PDF_ANNOT_FLAG_NO_ZOOM | fitz.PDF_ANNOT_FLAG_NO_ROTATE);
annot.set_flags(fitz.PDF_ANNOT_FLAG_RICH_TEXT) # Set rich text flag

# Callout FreeText
rect2 = fitz.Rect(50, 200, 300, 300);
callout_points = [(100, 250), (150, 250), (150, 200)]; # Start, Knee, End
annot2 = page.add_free_text_annot(rect2, "Callout Example", callout=callout_points);

doc.save("output_freetext2.pdf")
doc.close()
```

----------------------------------------

TITLE: Append Text with Small Caps using PyMuPDF
DESCRIPTION: This snippet demonstrates how to create a new PDF page, initialize a TextWriter, and append text using a specific font ('figo') with the 'small_caps' option enabled. It then writes the text to the page and saves the document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/textwriter.rst#_snippet_3

LANGUAGE: python
CODE:
```
doc = pymupdf.open()
page = doc.new_page()
text = "PyMuPDF: the Python bindings for MuPDF"
font = pymupdf.Font("figo")  # choose a font with small caps
tw = pymupdf.TextWriter(page.rect)
tw.append((50,100), text, font=font, small_caps=True)
tw.write_text(page)
doc.ez_save("x.pdf")
```

----------------------------------------

TITLE: PyMuPDF Tools Memory and ID Management Example
DESCRIPTION: This snippet demonstrates how to interact with the PyMuPDF `TOOLS` object to check the maximum and current sizes of the internal MuPDF memory cache, shrink the cache, and generate unique IDs. It shows how cache usage changes when opening a document, creating objects like pixmaps, and closing the document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/tools.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> import pymupdf
# print the maximum and current cache sizes
>>> pymupdf.TOOLS.store_maxsize
268435456
>>> pymupdf.TOOLS.store_size
0
>>> doc = pymupdf.open("demo1.pdf")
# pixmap creation puts lots of object in cache (text, images, fonts),
# apart from the pixmap itself
>>> pix = doc[0].get_pixmap(alpha=False)
>>> pymupdf.TOOLS.store_size
454519
# release (at least) 50% of the storage
>>> pymupdf.TOOLS.store_shrink(50)
13471
>>> pymupdf.TOOLS.store_size
13471
# get a few unique numbers
>>> pymupdf.TOOLS.gen_id()
1
>>> pymupdf.TOOLS.gen_id()
2
>>> pymupdf.TOOLS.gen_id()
3
# close document and see how much cache is still in use
>>> doc.close()
>>> pymupdf.TOOLS.store_size
0
>>>
```

----------------------------------------

TITLE: Inserting Internal Page Link with PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to insert a link that points to another page within the same PDF document using PyMuPDF. It involves defining a link dictionary with the link kind, target page number, source bounding box, and destination point, then using the page.insert_link() method. Prerequisites include a page object, a pno (page number), a bbox (Rect), and a point (Point). The LINK_GOTO kind signifies an internal document link.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_46

LANGUAGE: Python
CODE:
```
d = {"kind": pymupdf.LINK_GOTO, "page": pno, "from": bbox, "to": point}
page.insert_link(d)
```

----------------------------------------

TITLE: Extract a Specific Embedded File (PyMuPDF CLI)
DESCRIPTION: Provides an example of using the `pymupdf embed-extract` command to save a specific embedded file (`neue.datei`) from a PDF (`some.pdf`) to disk.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_16

LANGUAGE: Shell
CODE:
```
pymupdf embed-extract some.pdf -name neue.datei
```

----------------------------------------

TITLE: Convert Document to PDF Bytes and Open - PyMuPDF - Python
DESCRIPTION: This snippet demonstrates how to convert an existing document object (doc) into PDF format as a bytes object using convert_to_pdf(). It then shows how to open these PDF bytes as a new PyMuPDF document object, allowing further processing as a standard PDF.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_5

LANGUAGE: Python
CODE:
```
pdfbytes = doc.convert_to_pdf()  # this a bytes object
pdf = pymupdf.open("pdf", pdfbytes)  # open it as a PDF document
# now use 'pdf' like any PDF document
```

----------------------------------------

TITLE: Define TEXT_PRESERVE_IMAGES Constant (Python)
DESCRIPTION: Defines an integer constant used as a flag for text extraction. If set, image data is stored in the TextPage, significantly impacting performance and memory for certain output types. Default is "on" for "blocks", "dict", "json", etc., but only metadata is returned for "blocks".
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_9

LANGUAGE: Python
CODE:
```
TEXT_PRESERVE_IMAGES = 4
```

----------------------------------------

TITLE: Example: Show Basic PDF Info with PyMuPDF (Shell)
DESCRIPTION: Demonstrates the basic usage of the `pymupdf show` command on a file named `x.pdf`. This example shows the typical output when the PDF is password protected and no password is provided.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_9

LANGUAGE: Shell
CODE:
```
pymupdf show x.pdf
```

----------------------------------------

TITLE: Comparing PyMuPDF Image Extraction Performance (PNG)
DESCRIPTION: This snippet compares the performance and output size of `pymupdf.Pixmap(doc, xref).tobytes()` and `doc.extract_image(xref)` for a PNG image. It shows that for PNGs, both methods have comparable execution times and produce identical output sizes, indicating similar efficiency for this image format.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_61

LANGUAGE: python
CODE:
```
In [23]: %timeit pix = pymupdf.Pixmap(doc, 1268);pix.tobytes()
10.8 ms ± 52.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
In [24]: len(pix.tobytes())
Out[24]: 21462

In [25]: %timeit img = doc.extract_image(1268)
10.8 ms ± 86 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
In [26]: len(img["image"])
Out[26]: 21462
```

----------------------------------------

TITLE: Replacing Document Outline in PyMuPDF (Python)
DESCRIPTION: This method replaces the entire existing outline (Table of Contents) of a PDF document with a new one provided as a sequence. Changes are only permanent after calling `Document.save()`. It supports specifying hierarchy levels, titles, target pages, and detailed destination properties.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_28

LANGUAGE: Python
CODE:
```
import fitz # PyMuPDF

doc = fitz.open("input.pdf")
# Example TOC: level, title, page, optional destination
new_toc = [
    [1, "Chapter 1", 1],
    [2, "Section 1.1", 2],
    [1, "Chapter 2", 10, {"top": 72}], # Point to 72 points from top of page 10
    [2, "Section 2.1", 11],
    [3, "Subsection 2.1.1", 12]
]
inserted_deleted_count = doc.set_toc(new_toc, collapse=1)
print(f"Inserted/deleted TOC items: {inserted_deleted_count}")
doc.save("output.pdf", incremental=True, garbage=3)
doc.close()
```

----------------------------------------

TITLE: Getting and Printing ON State (Python)
DESCRIPTION: Shows how to get the 'ON' state value for check boxes or radio buttons using the `on_state` method, following an example of printing button states.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/widget.rst#_snippet_1

LANGUAGE: Python
CODE:
```
print(field.field_name, field.button_states())
```

LANGUAGE: Python
CODE:
```
print(field.on_state())
```

----------------------------------------

TITLE: Adding Freehand Scribble Annotation - PyMuPDF Python
DESCRIPTION: Adds a 'freehand' scribble annotation to a PDF. It takes a list of lists, where each inner list contains point-like items representing segments of the drawing. Separate sublists create distinct drawing lines. The annotation appears in black with a line width of 1.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_5

LANGUAGE: Python
CODE:
```
add_ink_annot(list)
```

----------------------------------------

TITLE: Accessing Font Properties from Span Dictionary in PyMuPDF (Python)
DESCRIPTION: This code snippet shows how to extract font ascender, descender, and the bounding box from a 'span' dictionary. These properties are crucial for precise text layout calculations, such as determining the exact height of characters within a span.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/textpage.rst#_snippet_1

LANGUAGE: Python
CODE:
```
a = span["ascender"]
d = span["descender"]
r = pymupdf.Rect(span["bbox"])
```

----------------------------------------

TITLE: Adding Line Annotation - PyMuPDF Python
DESCRIPTION: Adds a straight line annotation to a PDF document. It requires two point-like arguments, `p1` for the start and `p2` for the end of the line. The annotation is drawn with a red stroke color and a line width of 1, with its rectangle automatically adjusted to accommodate any line end symbols.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_6

LANGUAGE: Python
CODE:
```
add_line_annot(p1, p2)
```

----------------------------------------

TITLE: Reverse Page Order in PyMuPDF Python
DESCRIPTION: Shows how to reverse the order of all pages in a PyMuPDF document efficiently by repeatedly moving the last page to the front using `Document.move_page`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_22

LANGUAGE: python
CODE:
```
lastPage = doc.page_count - 1
for i in range(lastPage):
    doc.move_page(lastPage, i) # move current last page to the front
```

----------------------------------------

TITLE: Retrieving Document Permissions - Python
DESCRIPTION: The new 'getPermits()' method for Document objects returns a Python dictionary detailing the permissions associated with the current access to the document, such as print, edit, annotate, and copy.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_15

LANGUAGE: Python
CODE:
```
import fitz

doc = fitz.open("input.pdf")

# Get document permissions
permissions = doc.getPermits()

print("Document Permissions:")
for key, value in permissions.items():
    print(f"  {key}: {value}")

doc.close()
```

----------------------------------------

TITLE: Duplicate Document Pages in PyMuPDF Python
DESCRIPTION: Demonstrates how to duplicate all pages of a PyMuPDF document by iterating through the original pages and copying each one to the end of the document using `Document.copy_page`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_23

LANGUAGE: python
CODE:
```
page_count = len(doc)
for i in range(page_count):
    doc.copy_page(i) # copy this page to after last page
```

----------------------------------------

TITLE: Install PyMuPDF4LLM via pip
DESCRIPTION: This command installs the PyMuPDF4LLM package using pip, the standard package installer for Python. It fetches the latest version from PyPI.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf4llm/index.rst#_snippet_0

LANGUAGE: bash
CODE:
```
pip install pymupdf4llm
```

----------------------------------------

TITLE: Loading PDF from URL into PyMuPDF in Pyodide (Python)
DESCRIPTION: This Python code shows how to load a PDF document from a URL into a PyMuPDF `Document` instance within a Pyodide environment. Since standard network access is limited, it leverages `pyodide.http.pyfetch()` to download the content as bytes, which are then used to create the `pymupdf.Document` object. This method typically requires an HTTPS URL.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pyodide.rst#_snippet_2

LANGUAGE: python
CODE:
```
import pyodide.http
r = await pyodide.http.pyfetch('https://...')
data = await r.bytes()
doc = pymupdf.Document(stream=data)
```

----------------------------------------

TITLE: Setting Document Metadata (PyMuPDF Python)
DESCRIPTION: This PDF-only method updates the document's metadata using a Python dictionary. Keys correspond to standard metadata fields, and values can be `None` or empty to omit them. Arbitrary UTF-8 encoded unicode values are supported. Modifying a copy of `doc.metadata` is recommended for selective changes.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_21

LANGUAGE: Python
CODE:
```
doc.set_metadata(m)
```

----------------------------------------

TITLE: Handling Image Masks with PyMuPDF
DESCRIPTION: Demonstrates how to combine a base image pixmap with its associated mask pixmap to create a new pixmap with transparency information. Requires the xref of the base image and its mask.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_7

LANGUAGE: Python
CODE:
```
pix1 = pymupdf.Pixmap(doc.extract_image(xref)["image"])    # (1) pixmap of image w/o alpha
mask = pymupdf.Pixmap(doc.extract_image(smask)["image"])   # (2) mask pixmap
pix = pymupdf.Pixmap(pix1, mask)                           # (3) copy of pix1, image mask added
```

----------------------------------------

TITLE: Copying a Region Between PyMuPDF Pixmaps (Python)
DESCRIPTION: This snippet demonstrates how to copy a specific rectangular region from a source pixmap (`pix2`) to a target pixmap (`pix1`) using the `copy` method. It utilizes `set_origin` to adjust the coordinate system of the source pixmap temporarily, allowing the desired region to be copied to the top-left corner (0,0) of the target pixmap.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_4

LANGUAGE: python
CODE:
```
# safeguard: set top-left of pix1 and pix2 to (0, 0)
pix1.set_origin(0, 0)
pix2.set_origin(0, 0)
# compute top-left coordinates of pix2 region to copy
x1 = int(pix2.width / 2)
y1 = int(pix2.height / 2)
# shift top-left of pix2 such, that the to-be-copied
# area starts at (0, 0):
pix2.set_origin(-x1, -y1)
# now copy ...
pix1.copy(pix2, (0, 0, x1, y1))
```

----------------------------------------

TITLE: Encoding PDF Strings with PyMuPDF's get_pdf_str (Python)
DESCRIPTION: This snippet demonstrates the use of `pymupdf.get_pdf_str` to correctly encode Python strings into PDF-compatible string formats. It handles special characters like the Euro symbol by converting to UTF-16BE BOM and escapes reserved PDF characters and non-ASCII characters, ensuring proper formatting for PDF documents.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_16

LANGUAGE: Python
CODE:
```
pymupdf.get_pdf_str("Pay in $ or €.")
pymupdf.get_pdf_str("Prices in EUR (USD also accepted). Areas are in m².")
```

----------------------------------------

TITLE: Deleting Widget from PDF Page - PyMuPDF
DESCRIPTION: Deletes a specified form field (widget) from the page. It returns the widget following the deleted one. Physical removal requires saving to a new file with garbage collection enabled.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_16

LANGUAGE: Python
CODE:
```
page.delete_widget(widget)
```

----------------------------------------

TITLE: Setting PDF Page Layout (PyMuPDF Python)
DESCRIPTION: This PDF-only method, introduced in v1.22.2, sets the `/PageLayout` property of the document. It accepts specific string values like "SinglePage", "OneColumn", "TwoColumnLeft", "TwoColumnRight", "TwoPageLeft", "TwoPageRight", supporting both original and lower-case forms.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_24

LANGUAGE: Python
CODE:
```
doc.set_pagelayout(value)
```

----------------------------------------

TITLE: Retrieving Image Boundary Box and Transformation Matrix in PyMuPDF
DESCRIPTION: This method returns the boundary box and an optional transformation matrix for an embedded image on a PDF page. It considers images directly referenced by the page or by a Form XObject. An infinite rectangle is returned if the image is not displayed, rather than raising an exception.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_37

LANGUAGE: Python
CODE:
```
Page.get_image_bbox(item, transform=False)
```

----------------------------------------

TITLE: Converting Image Formats with PyMuPDF
DESCRIPTION: Demonstrates the basic scheme for converting an image from one supported format to another using the Pixmap class. It reads an image file and saves it in a different format.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_10

LANGUAGE: python
CODE:
```
pix = pymupdf.Pixmap("input.xxx")  # any supported input format
pix.save("output.yyy")  # any supported output format
```

----------------------------------------

TITLE: Loading an Office Document (Python)
DESCRIPTION: This Python snippet shows how to import PyMuPDF Pro and unlock its features. It then demonstrates opening an Office document (like an .xls file) using the extended `pymupdf.open` function. Note that without a license key, functionality is restricted.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf-pro.rst#_snippet_1

LANGUAGE: python
CODE:
```
import pymupdf.pro
pymupdf.pro.unlock()
# PyMuPDF has now been extended with PyMuPDF Pro features, with some restrictions.
doc = pymupdf.open("my-office-doc.xls")
```

----------------------------------------

TITLE: Installing PyMuPDF Pro (Bash)
DESCRIPTION: This command demonstrates how to install the PyMuPDF Pro package using pip, the standard Python package installer. It fetches the latest version from the Python Package Index (PyPI).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pymupdf-pro.rst#_snippet_0

LANGUAGE: bash
CODE:
```
pip install pymupdfpro
```

----------------------------------------

TITLE: Generate Even and Odd Page Lists in PyMuPDF Python
DESCRIPTION: Creates Python lists containing the indices of even and odd pages within a PyMuPDF document, useful for splitting or processing pages separately.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_20

LANGUAGE: python
CODE:
```
p_even = [p in range(doc.page_count) if p % 2 == 0]
p_odd  = [p in range(doc.page_count) if p % 2 == 1]
```

----------------------------------------

TITLE: Drawing Regular Polygon with PyMuPDF Python
DESCRIPTION: Illustrates how to draw a regular n-edged polygon using PyMuPDF. It calculates the vertices using `draw_sector` but clears the draw buffer, then draws the polygon using `draw_polyline`. It applies a border color and fill color using `finish` and finally commits the shape to the page. Requires a `page` object, center point, starting point, and the number of edges `n`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/shape.rst#_snippet_5

LANGUAGE: python
CODE:
```
shape = page.new_shape() # start a new shape
beta = -360.0 / n  # our angle, drawn clockwise
center = pymupdf.Point(...)  # center of circle
p0 = pymupdf.Point(...)  # start here (1st edge)
points = [p0]  # store polygon edges
for i in range(n):  # calculate the edges
    p0 = shape.draw_sector(center, p0, beta)
    points.append(p0)
shape.draw_cont = ""  # do not draw the circle sectors
shape.draw_polyline(points)  # draw the polygon
shape.finish(color=(1,0,0), fill=(1,1,0), closePath=False)
shape.commit()
```

----------------------------------------

TITLE: Setting PDF Page Mode (PyMuPDF Python)
DESCRIPTION: This PDF-only method, new in v1.22.2, sets the `/PageMode` property of the document. It accepts specific string values such as "UseNone", "UseOutlines", "UseThumbs", "FullScreen", "UseOC", "UseAttachments", and supports lower-case input.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_25

LANGUAGE: Python
CODE:
```
doc.set_pagemode(value)
```

----------------------------------------

TITLE: Separating Color and Alpha Channels with PyMuPDF Pixmap (Python)
DESCRIPTION: This snippet demonstrates how to separate the color (RGB) and alpha channels from an existing RGBA PyMuPDF pixmap. It creates two new pixmaps: one containing only the RGB data and another containing only the alpha data. This is shown in the context of preparing data for a wxPython bitmap.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_2

LANGUAGE: Python
CODE:
```
# 'pix' is an RGBA pixmap
pixcolors = pymupdf.Pixmap(pix, 0)    # extract the RGB part (drop alpha)
pixalpha = pymupdf.Pixmap(None, pix)  # extract the alpha part
bm = wx.Bitmap.FromBufferAndAlpha(pix.width, pix.height, pixcolors.samples, pixalpha.samples)
```

----------------------------------------

TITLE: Applying Text Properties to PyMuPDF Xml Nodes (Standard)
DESCRIPTION: This snippet demonstrates the standard way to add text and apply formatting (bold, italic) to an `Xml` node in PyMuPDF. It shows how to sequentially set and unset properties for different text segments within a paragraph.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/xml-class.rst#_snippet_0

LANGUAGE: Python
CODE:
```
body = story.body
para = body.add_paragraph()  # add a paragraph
para.set_bold()  # text that follows will be bold
para.add_text("some bold text")
para.set_italic()  # text that follows will additionally be italic
para.add_txt("this is bold and italic")
para.set_italic(False).set_bold(False)  # all following text will be regular
para.add_text("regular text")
```

----------------------------------------

TITLE: Display Help for PyMuPDF Show Command (Shell)
DESCRIPTION: Shows the command-line usage and options for the `pymupdf show` command. It details arguments for displaying internal PDF information like catalog, trailer, metadata, xrefs, and pages, and includes options for password protection.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_8

LANGUAGE: Shell
CODE:
```
pymupdf show -h
usage: pymupdf show [-h] [-password PASSWORD] [-catalog] [-trailer] [-metadata]
                    [-xrefs XREFS] [-pages PAGES]
                    input

------------------------- display PDF information -------------------------

positional arguments:
  input               PDF filename

optional arguments:
  -h, --help          show this help message and exit
  -password PASSWORD  password
  -catalog            show PDF catalog
  -trailer            show PDF trailer
  -metadata           show PDF metadata
  -xrefs XREFS        show selected objects, format: 1,5-7,N
  -pages PAGES        show selected pages, format: 1,5-7,50-N
```

----------------------------------------

TITLE: Using PyMuPDF Geometry Objects as Python Sequences - Python
DESCRIPTION: Demonstrates how PyMuPDF geometry objects, which implement the Python sequence protocol, can be used interchangeably with standard Python sequence types (list, tuple, array.array, numpy.array) and processed by functions expecting sequences.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app3.rst#_snippet_3

LANGUAGE: Python
CODE:
```
import pymupdf, array, numpy as np
m = pymupdf.Matrix(1, 2, 3, 4, 5, 6)
list(m)
tuple(m)
array.array("f", m)
np.array(m)
```

----------------------------------------

TITLE: Generating TextPage from PyMuPDF DisplayList in Python
DESCRIPTION: Extracts text and layout information from the display list into a TextPage object. The behavior is controlled by flags that determine how elements like ligatures, whitespace, and images are handled.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/displaylist.rst#_snippet_4

LANGUAGE: Python
CODE:
```
get_textpage(flags)
```

----------------------------------------

TITLE: Handling Recoverable Errors in PyMuPDF
DESCRIPTION: Demonstrates opening a potentially damaged PDF file, checking for MuPDF warnings using `pymupdf.TOOLS.mupdf_warnings()`, and inspecting document properties like `can_save_incrementally()` and `is_dirty` to understand the document's state after repair actions.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app3.rst#_snippet_7

LANGUAGE: python
CODE:
```
import pymupdf
doc = pymupdf.open("damaged-file.pdf")
print(pymupdf.TOOLS.mupdf_warnings())
doc.can_save_incrementally()
doc.is_dirty
```

----------------------------------------

TITLE: Setting Link Annotation Flags in PyMuPDF
DESCRIPTION: Sets the PDF `/F` property (flags) of the link annotation. This method is a no-op if the document is not a PDF. Refer to `Annot.set_flags` for detailed flag specifications.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/link.rst#_snippet_2

LANGUAGE: Python
CODE:
```
Link.set_flags(flags)
```

----------------------------------------

TITLE: Creating Ink Annotations PyMuPDF Python
DESCRIPTION: This script shows how to create an Ink annotation, which is used for freehand drawings or signatures. It demonstrates how to define the annotation using a list of lists of points, where each inner list represents a continuous stroke.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-annotations.rst#_snippet_3

LANGUAGE: python
CODE:
```
import fitz
import math

doc = fitz.open()
page = doc.new_page()

# Simulate sine and cosine curves as points
points1 = [] # Sine
points2 = [] # Cosine
for i in range(100):
    x = 50 + i * 2
    y1 = 150 - 50 * math.sin(i * 0.1)
    y2 = 300 - 50 * math.cos(i * 0.1)
    points1.append((x, y1))
    points2.append((x, y2))

# Ink annotation takes a list of lists of points
ink_list = [points1, points2]

# Determine a bounding rectangle for the ink
min_x = min(min(p[0] for p in segment) for segment in ink_list)
max_x = max(max(p[0] for p in segment) for segment in ink_list)
min_y = min(min(p[1] for p in segment) for segment in ink_list)
max_y = max(max(p[1] for p in segment) for segment in ink_list)
rect = fitz.Rect(min_x, min_y, max_x, max_y).include_point((min_x, min_y)).include_point((max_x, max_y)) # Ensure rect covers points

annot = page.add_ink_annot(rect, ink_list)

doc.save("output_ink.pdf")
doc.close()
```

----------------------------------------

TITLE: Inserting Link on PDF Page - PyMuPDF
DESCRIPTION: Inserts a new link on the page. The `linkdict` parameter must be a dictionary formatted as provided by `get_links()`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_18

LANGUAGE: Python
CODE:
```
page.insert_link(linkdict)
```

----------------------------------------

TITLE: Retrieving Embedded File Information in PyMuPDF (Python)
DESCRIPTION: This method retrieves detailed information about an embedded file, specified by its index or name. It returns a dictionary containing keys like 'name', 'filename', 'size', 'creationDate', and 'checksum'. This method was changed in v1.18.13.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_51

LANGUAGE: Python
CODE:
```
doc.embfile_info(item)
```

----------------------------------------

TITLE: Retrieving a Specific Color using PyMuPDF's getColor (Python)
DESCRIPTION: This snippet demonstrates how to import and use the `getColor` function from `pymupdf.utils` to retrieve the PDF-compatible float triple for a specified color name. It takes a color name string (case-insensitive) as input and returns a tuple of three floats representing the RGB values, suitable for direct use in PyMuPDF drawing methods.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/colors.rst#_snippet_0

LANGUAGE: Python
CODE:
```
# "getColor" is the only method you really need
from pymupdf.utils import getColor
getColor("aliceblue")
```

----------------------------------------

TITLE: Accessing PDF Pages Using Document Indexing - Python
DESCRIPTION: For convenience, PyMuPDF Document objects now support simple indexing, allowing pages to be accessed directly using square brackets, similar to lists. Negative indices are also supported to access pages from the end of the document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_4

LANGUAGE: Python
CODE:
```
import fitz

doc = fitz.open("input.pdf")

# Access the first page using index
first_page = doc[0]
print(f"First page number: {first_page.number}")

# Access the last page using negative index
last_page = doc[-1]
print(f"Last page number: {last_page.number}")

# This is equivalent to doc.loadPage(n)
page_by_load = doc.loadPage(0)

doc.close()
```

----------------------------------------

TITLE: Display Help for PyMuPDF Embed-Info Command (Shell)
DESCRIPTION: Shows the command-line usage and options for the `pymupdf embed-info` command. It details arguments for listing embedded files within a PDF, including options for filtering by name, showing detailed information, and providing a password.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_13

LANGUAGE: Shell
CODE:
```
pymupdf embed-info -h
usage: pymupdf embed-info [-h] [-name NAME] [-detail] [-password PASSWORD] input

--------------------------- list embedded files ---------------------------

positional arguments:
  input               PDF filename

optional arguments:
  -h, --help          show this help message and exit
  -name NAME          if given, report only this one
  -detail             show detail information
  -password PASSWORD  password
```

----------------------------------------

TITLE: Example for Setting Page Labels in PyMuPDF
DESCRIPTION: This code snippet provides an example of the list of dictionaries used to define page label rules for the `Document.set_page_labels` method. It demonstrates how to specify different label formats and starting page numbers for various page ranges within a PDF document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_9

LANGUAGE: Python
CODE:
```
[{'startpage': 6, 'prefix': 'A-', 'style': 'D', 'firstpagenum': 10},
 {'startpage': 10, 'prefix': '', 'style': 'D', 'firstpagenum': 1}]
```

----------------------------------------

TITLE: Opening a File as Plain Text with PyMuPDF
DESCRIPTION: Demonstrates how to force PyMuPDF to open any file as a plain text document, regardless of its actual content or extension. This is achieved by specifying the `filetype="txt"` parameter when using `pymupdf.open()`. This allows applying text-specific operations like searching or extracting.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/how-to-open-a-file.rst#_snippet_3

LANGUAGE: python
CODE:
```
doc = pymupdf.open("my_program.py", filetype="txt")
```

----------------------------------------

TITLE: Opening XML File with PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates opening an XML data file (.xml) with PyMuPDF. By setting `filetype="txt"`, PyMuPDF reads the XML content as plain text, enabling text-based processing and analysis of the file's structure and data.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/how-to-open-a-file.rst#_snippet_5

LANGUAGE: python
CODE:
```
doc = pymupdf.open("my_data.xml", filetype="txt")
```

----------------------------------------

TITLE: Opening JSON File with PyMuPDF (Python)
DESCRIPTION: This snippet illustrates how to open a JSON data file (.json) using PyMuPDF. Specifying `filetype="txt"` allows PyMuPDF to load the JSON content as a simple text document, which can then be processed or analyzed using text manipulation techniques.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/how-to-open-a-file.rst#_snippet_6

LANGUAGE: python
CODE:
```
doc = pymupdf.open("more_of_my_data.json", filetype="txt")
```

----------------------------------------

TITLE: Generating Pixmap from Page Mediabox in PyMuPDF
DESCRIPTION: This snippet demonstrates how to generate a pixmap from a page's `mediabox` rather than its `cropbox`, while preserving the original `cropbox` and `rotation` settings. It temporarily modifies the page's `cropbox` and `rotation` before calling `get_pixmap` and then restores them.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_40

LANGUAGE: Python
CODE:
```
import pymupdf
doc=pymupdf.open("demo1.pdf")
page=doc[0]
rotation = page.rotation
cropbox = page.cropbox
page.set_cropbox(page.mediabox)
page.set_rotation(0)
pix = page.get_pixmap()
page.set_cropbox(cropbox)
if rotation != 0:
    page.set_rotation(rotation)
```

----------------------------------------

TITLE: Creating Mutable Identity Matrices in PyMuPDF
DESCRIPTION: This snippet demonstrates various ways to create a mutable identity matrix using the `pymupdf.Matrix` constructor. It shows how to explicitly specify values, use scaling factors, define rotation by zero degrees, or create a copy from the immutable `pymupdf.Identity` constant.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/identity.rst#_snippet_0

LANGUAGE: Python
CODE:
```
m = pymupdf.Matrix(1, 0, 0, 1, 0, 0)  # specify the values
m = pymupdf.Matrix(1, 1)              # use scaling by factor 1
m = pymupdf.Matrix(0)                 # use rotation by zero degrees
m = pymupdf.Matrix(pymupdf.Identity)     # make a copy of Identity
```

----------------------------------------

TITLE: Installing and Importing PyMuPDF Python
DESCRIPTION: Python code executed within Pyodide to install the PyMuPDF wheel using micropip and then import the `fitz` module, printing its version to confirm successful loading.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/_static/pymupdf-console.html#_snippet_3

LANGUAGE: Python
CODE:
```
 import fitz
 print("fitz imported:"+str(fitz.version))
```

----------------------------------------

TITLE: Inserting Rotated Text with PyMuPDF Shapes
DESCRIPTION: This example demonstrates inserting text with various rotation angles (0, 90, -90, 180 degrees) using `shape.insert_text` in PyMuPDF. It illustrates how to define insertion points and draw them as visual markers, then inserts multi-line text strings with specified rotations to explain the effect of the `rotate` parameter.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_9

LANGUAGE: Python
CODE:
```
import pymupdf
doc = pymupdf.open()
page = doc.new_page()
# the text strings, each having 3 lines
text1 = "rotate=0\nLine 2\nLine 3"
text2 = "rotate=90\nLine 2\nLine 3"
text3 = "rotate=-90\nLine 2\nLine 3"
text4 = "rotate=180\nLine 2\nLine 3"
red = (1, 0, 0) # the color for the red dots
# the insertion points, each with a 25 pix distance from the corners
p1 = pymupdf.Point(25, 25)
p2 = pymupdf.Point(page.rect.width - 25, 25)
p3 = pymupdf.Point(25, page.rect.height - 25)
p4 = pymupdf.Point(page.rect.width - 25, page.rect.height - 25)
# create a Shape to draw on
shape = page.new_shape()

# draw the insertion points as red, filled dots
shape.draw_circle(p1,1)
shape.draw_circle(p2,1)
shape.draw_circle(p3,1)
shape.draw_circle(p4,1)
shape.finish(width=0.3, color=red, fill=red)

# insert the text strings
shape.insert_text(p1, text1)
shape.insert_text(p3, text2, rotate=90)
shape.insert_text(p2, text3, rotate=-90)
shape.insert_text(p4, text4, rotate=180)

# store our work to the page
shape.commit()
doc.save(...)
```

----------------------------------------

TITLE: Applying Rotation Matrix to Page Coordinates in PyMuPDF (Python)
DESCRIPTION: This snippet illustrates the use of `rotation_matrix` to transform coordinates on a rotated PDF page. It shows how setting a page rotation affects `page.rect` and how multiplying an unrotated point (0,0) with `page.rotation_matrix` yields its new position on the rotated page, demonstrating the coordinate translation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_45

LANGUAGE: Python
CODE:
```
page.set_rotation(90)  # rotate an ISO A4 page
page.rect
Rect(0.0, 0.0, 842.0, 595.0)
p = pymupdf.Point(0, 0)  # where did top-left point land?
p * page.rotation_matrix
Point(842.0, 0.0)
```

----------------------------------------

TITLE: Convert CMYK Pixmap to RGB in PyMuPDF
DESCRIPTION: Demonstrates how to convert a PyMuPDF pixmap from the CMYK color space to the RGB color space using the Pixmap constructor. This is useful for saving images in formats that may not support CMYK directly.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_8

LANGUAGE: Python
CODE:
```
rgb_pix = pymupdf.Pixmap(pymupdf.csRGB, cmyk_pix)
```

----------------------------------------

TITLE: Shift Rect Using Tuple in PyMuPDF Python
DESCRIPTION: Illustrates how to shift a PyMuPDF Rect object by adding a tuple of numbers. Each element in the tuple corresponds to a coordinate (x0, y0, x1, y1), allowing selective shifting of the rectangle's corners.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_5

LANGUAGE: Python
CODE:
```
>>> pymupdf.Rect(100, 100, 200, 200) + (5, 0, 5, 0)  # add 5 to the x coordinates
Rect(105.0, 100.0, 205.0, 200.0)
>>>
```

----------------------------------------

TITLE: Saving PDF Document Incrementally with PyMuPDF (Python)
DESCRIPTION: The saveIncr() method provides a convenient way to save a PDF document incrementally, which is crucial for preserving verified signatures. It is an abbreviation for calling doc.save() with incremental=True and encryption=PDF_ENCRYPT_KEEP.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_33

LANGUAGE: Python
CODE:
```
doc.save(doc.name, incremental=True, encryption=PDF_ENCRYPT_KEEP)
```

----------------------------------------

TITLE: Add Text Annotation (Sticky Note) - PyMuPDF Python
DESCRIPTION: Adds a comment icon, often referred to as a 'sticky note', with accompanying hidden text to a PDF page. The text becomes visible when a user hovers over or double-clicks the icon. The icon is a 20x20 rectangle at the given `point`, and its visual symbol can be customized using the `icon` parameter. The method returns the created `Annot` object, which has a default yellow stroke color.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_2

LANGUAGE: Python
CODE:
```
add_text_annot(point, text, icon="Note")
```

----------------------------------------

TITLE: Setting and Checking State with ON State (Python)
DESCRIPTION: Illustrates the recommended way to set a check box or radio button to its 'selected' state and verify its state using the value returned by the `on_state` method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/widget.rst#_snippet_2

LANGUAGE: Python
CODE:
```
field.field_value = field.on_state()
```

LANGUAGE: Python
CODE:
```
field.field_value == field.on_state()
```

----------------------------------------

TITLE: Initializing Pixmap by Copying (PyMuPDF)
DESCRIPTION: Creates a new pixmap by copying an existing source pixmap, optionally converting its colorspace. If the target colorspace is None, a masking pixmap containing only the source's alpha bytes is created.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_1

LANGUAGE: python
CODE:
```
Pixmap(__init__(self, colorspace, source))
```

----------------------------------------

TITLE: Accessing PDF Base 14 Font Dictionary - PyMuPDF Python
DESCRIPTION: Shows the content of the `pymupdf.Base14_fontdict`, which lists the standard PDF Base 14 font names and their abbreviations. These fonts are guaranteed to be supported by any PDF viewer and can be used when specifying font names in PyMuPDF methods.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app3.rst#_snippet_2

LANGUAGE: Python
CODE:
```
In [2]: pymupdf.Base14_fontdict
Out[2]:
{'courier': 'Courier',
'courier-oblique': 'Courier-Oblique',
'courier-bold': 'Courier-Bold',
'courier-boldoblique': 'Courier-BoldOblique',
'helvetica': 'Helvetica',
'helvetica-oblique': 'Helvetica-Oblique',
'helvetica-bold': 'Helvetica-Bold',
'helvetica-boldoblique': 'Helvetica-BoldOblique',
'times-roman': 'Times-Roman',
'times-italic': 'Times-Italic',
'times-bold': 'Times-Bold',
'times-bolditalic': 'Times-BoldItalic',
'symbol': 'Symbol',
'zapfdingbats': 'ZapfDingbats',
'helv': 'Helvetica',
'heit': 'Helvetica-Oblique',
'hebo': 'Helvetica-Bold',
'hebi': 'Helvetica-BoldOblique',
'cour': 'Courier',
'coit': 'Courier-Oblique',
'cobo': 'Courier-Bold',
'cobi': 'Courier-BoldOblique',
'tiro': 'Times-Roman',
'tibo': 'Times-Bold',
'tiit': 'Times-Italic',
'tibi': 'Times-BoldItalic',
'symb': 'Symbol',
'zadb': 'ZapfDingbats'}
```

----------------------------------------

TITLE: Configuring TextPage for Text Extraction with Images in PyMuPDF
DESCRIPTION: This snippet provides the flag configuration for TextPage when images need to be extracted alongside text. By including TEXT_PRESERVE_IMAGES along with ligatures and whitespace flags, the TextPage will process and include image data during text extraction.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/coop_low.rst#_snippet_5

LANGUAGE: Python
CODE:
```
flags = pymupdf.TEXT_PRESERVE_LIGATURES | pymupdf.TEXT_PRESERVE_WHITESPACE | pymupdf.TEXT_PRESERVE_IMAGES
```

----------------------------------------

TITLE: Re-paginating Document Layout (PyMuPDF Python)
DESCRIPTION: This method reflows the document content based on specified page dimensions (rectangle, width/height) and a default font size. It's primarily for reflowable document types like e-books and HTML, and is ignored if not supported by the document (checked via `is_reflowable` property).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_19

LANGUAGE: Python
CODE:
```
doc.layout(rect=None, width=0, height=0, fontsize=11)
```

----------------------------------------

TITLE: Compute Dot Product and Angle Cosine for Points in PyMuPDF Python
DESCRIPTION: Demonstrates calculating the dot product of two PyMuPDF Point objects using multiplication. It then shows how to use the dot product and the absolute values (magnitudes) of the points to compute the cosine of the angle between them, and how a dot product of zero indicates orthogonality.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_3

LANGUAGE: Python
CODE:
```
>>> p1 = pymupdf.Point(1, 0)
>>> p2 = pymupdf.Point(1, 1)
>>> dot = p1 * p2
>>> dot
1.0

>>> # compute the cosine of the angle between p1 and p2:
>>> cosine = dot / (abs(p1) * abs(p2))
>>> cosine  # cosine of 45 degrees
0.7071067811865475

>>> math.cos(mat.radians(45))  # verify:
0.7071067811865476

>>> # check orhogonality
>>> p3 = pymupdf.Point(0, 1)
>>> # p1 and p3 are orthogonal so, as expected:
>>> p1 * p3
0.0
```

----------------------------------------

TITLE: Combining and Cleaning Page Contents in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates two methods to handle page contents in PyMuPDF. `page.clean_contents()` cleans and combines multiple content streams into a single, optimized stream, while `page.read_contents()` extracts the concatenated raw content without modifying the PDF structure. Both methods help in simplifying content interpretation or processing.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_2

LANGUAGE: Python
CODE:
```
# method 1: use the MuPDF clean function
page.clean_contents()  # cleans and combines multiple Contents
xref = page.get_contents()[0]  # only one /Contents now!
cont = doc.xref_stream(xref)
# this has also reformatted the PDF commands
```

LANGUAGE: Python
CODE:
```
# method 2: extract concatenated contents
cont = page.read_contents()
# the /Contents source itself is unmodified
```

----------------------------------------

TITLE: Deleting Embedded Files in PyMuPDF (Python)
DESCRIPTION: This method removes an entry from the /EmbeddedFiles section of a PDF. Physical deletion and space regain occur only upon saving the document with a suitable garbage option. As of v1.14.16, items can be deleted by index or name. A warning is issued that deleting by name only affects the first matching item.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_50

LANGUAGE: Python
CODE:
```
doc.embfile_del(item)
```

----------------------------------------

TITLE: Finding Optimal Rectangle for Story Content - PyMuPDF Python
DESCRIPTION: This method finds the optimal rectangle that can contain the entire story content. It returns a `Story.FitResult` instance, indicating success or failure and details of the fit. The `fn` callable must return a `pymupdf.Rect()` based on a `parameter`, and `self.place()` must behave monotonically as `parameter` increases to ensure correct fitting.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/story-class.rst#_snippet_5

LANGUAGE: Python
CODE:
```
fit(self, fn, pmin=None, pmax=None, delta=0.001, verbose=False)
```

----------------------------------------

TITLE: Retrieving Page Fonts in PyMuPDF (Python)
DESCRIPTION: This method returns a list of fonts referenced by the current page in a PDF document. It acts as a wrapper for the `Document.get_page_fonts` method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_32

LANGUAGE: Python
CODE:
```
get_fonts(full=False)
```

----------------------------------------

TITLE: Retrieving All PDF Metadata Including Private Items with PyMuPDF
DESCRIPTION: Demonstrates how to access all metadata items, including private or non-standard ones, by directly parsing the PDF's `Info` dictionary using `doc.xref_get_key` and `doc.xref_get_keys`. This method provides a comprehensive view beyond the standard `doc.metadata` attribute.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_8

LANGUAGE: Python
CODE:
```
metadata = {}  # make my own metadata dict
what, value = doc.xref_get_key(-1, "Info")  # /Info key in the trailer
if what != "xref":
    pass  # PDF has no metadata
else:
    xref = int(value.replace("0 R", ""))  # extract the metadata xref
    for key in doc.xref_get_keys(xref):
        metadata[key] = doc.xref_get_key(xref, key)[1]
pprint(metadata)
```

----------------------------------------

TITLE: Recovering and Marking Non-horizontal Span Text (PyMuPDF, Python)
DESCRIPTION: This snippet shows how to correctly mark non-horizontal text spans extracted using `Page.get_text` (with 'dict'/'rawdict' options). It uses `pymupdf.recover_quad` to convert the span's data into a quad, which is then used with `page.add_highlight_annot` for accurate marking, suitable for PyMuPDF v1.18.9 and later.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-text.rst#_snippet_5

LANGUAGE: Python
CODE:
```
span_quad = pymupdf.recover_quad(line["dir"], span)
annot = page.add_highlight_annot(span_quad)  # this will mark the complete span text
```

----------------------------------------

TITLE: Drawing Squiggles and Saving Document with PyMuPDF Shape
DESCRIPTION: Demonstrates drawing two squiggle lines using the draw_squiggle method between specified points, then finalizing the shape drawing with finish (setting color and fill), committing the changes to the page, and saving the document to a PDF file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/shape.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> shape.draw_squiggle(r.tr, r.br)
>>> shape.draw_squiggle(r.br, r.tl)
>>> shape.finish(color=(0, 0, 1), fill=(1, 1, 0))
>>> shape.commit()
>>> doc.save("x.pdf")
```

----------------------------------------

TITLE: Disabling Table of Contents Item in PyMuPDF (Python)
DESCRIPTION: This high-speed method disables a specific Table of Contents item by its index. The item remains physically in the TOC tree but is shown grayed-out and no longer points to a destination, allowing for potential re-assignment later.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_30

LANGUAGE: Python
CODE:
```
import fitz # PyMuPDF

doc = fitz.open("input.pdf")
toc = doc.get_toc()
if toc:
    item_to_disable_idx = 0 # Example: disable the first item
    doc.del_toc_item(item_to_disable_idx)
    print(f"TOC item {item_to_disable_idx} disabled.")
    doc.save("output.pdf", incremental=True, garbage=3)
doc.close()
```

----------------------------------------

TITLE: Initializing Grayscale Colorspace in PyMuPDF
DESCRIPTION: This snippet initializes a predefined Colorspace object for the Grayscale color model. It uses the `pymupdf.CS_GRAY` constant to specify the grayscale colorspace, suitable for black and white images. The `csGRAY` object represents a single-channel color space.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/colorspace.rst#_snippet_1

LANGUAGE: Python
CODE:
```
csGRAY = pymupdf.Colorspace(pymupdf.CS_GRAY)
```

----------------------------------------

TITLE: Divide Page Rect by Number in PyMuPDF Python
DESCRIPTION: Illustrates dividing a PyMuPDF Rect object (representing a page's dimensions) by a scalar. This operation scales the rectangle, creating a new rectangle representing a portion of the original, such as the upper-left quarter.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> page.rect
Rect(0.0, 0.0, 595.0, 842.0)
>>> page.rect / 2
Rect(0.0, 0.0, 297.5, 421.0)
>>>
```

----------------------------------------

TITLE: Initializing RGB Colorspace in PyMuPDF
DESCRIPTION: This snippet initializes a predefined Colorspace object for the RGB color model. It uses the `pymupdf.CS_RGB` constant to specify the RGB colorspace, which is commonly used for displaying images on screens. The resulting `csRGB` object can then be used with Pixmap operations.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/colorspace.rst#_snippet_0

LANGUAGE: Python
CODE:
```
csRGB = pymupdf.Colorspace(pymupdf.CS_RGB)
```

----------------------------------------

TITLE: Checking Containment in PyMuPDF Rect - Python
DESCRIPTION: Shows how to check if point-like tuples (`(4, 5)`) and rect-like tuples (`(4, 4, 5, 5)`) are contained within a PyMuPDF Rect object (`r`) using the `in` operator.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_9

LANGUAGE: Python
CODE:
```
(4, 5) in r # this point-like lies inside the rectangle
# and this rect-like is also inside
(4, 4, 5, 5) in r
```

----------------------------------------

TITLE: Convert PyMuPDF Pixmap to Tkinter PhotoImage using Pillow (Python)
DESCRIPTION: Demonstrates converting a PyMuPDF Pixmap object to a Tkinter PhotoImage using the Python Imaging Library (Pillow). It handles alpha channels by setting the appropriate image mode ("RGBA" or "RGB"). Requires Pillow and Tkinter.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/tutorial.rst#_snippet_2

LANGUAGE: Python
CODE:
```
mode = "RGBA" if pix.alpha else "RGB"
img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)
tkimg = ImageTk.PhotoImage(img)
```

----------------------------------------

TITLE: Initialize Rect to Contain Points in PyMuPDF Python
DESCRIPTION: Provides the initial steps for creating a rectangle that will eventually enclose a collection of points. It shows how to generate a list of point-like tuples and then initialize a PyMuPDF Rect object using the first point as both corners, creating a starting point for subsequent inclusion operations.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> # first define some point-likes
>>> points = []
>>> for i in range(10):
        for j in range(10):
            points.append((i, j))
>>>
>>> # now create a rectangle containing all these 100 points
>>> # start with an empty rectangle
>>> r = pymupdf.Rect(points[0], points[0])
```

----------------------------------------

TITLE: Default Dictionary Extraction Flags (PyMuPDF Constant)
DESCRIPTION: A combination of flags representing the default settings for extracting text as a dictionary. Includes preserving ligatures, whitespace, clipping to mediabox, preserving images, and using CID for unknown Unicode.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_22

LANGUAGE: Python
CODE:
```
TEXTFLAGS_DICT = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_PRESERVE_IMAGES | TEXT_USE_CID_FOR_UNKNOWN_UNICODE
```

----------------------------------------

TITLE: Extracting Text Inhibiting Spaces in PyMuPDF Python
DESCRIPTION: Illustrates the effect of the `pymupdf.TEXT_INHIBIT_SPACES` flag when extracting text using `page.get_text("text", flags=...)`. This flag removes extra spaces between characters.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app1.rst#_snippet_9

LANGUAGE: Python
CODE:
```
print(page.get_text("text", flags=pymupdf.TEXT_INHIBIT_SPACES))
```

----------------------------------------

TITLE: Inspecting Page Dictionary Keys and Values with PyMuPDF (Python)
DESCRIPTION: This Python example iterates through the keys of a PDF page dictionary (obtained via `doc.xref_get_keys`) and uses `doc.xref_get_key` for each key to retrieve its type and value. It prints the key, its type, and its formatted string value, showcasing the structure of PDF dictionary entries.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_14

LANGUAGE: Python
CODE:
```
for key in doc.xref_get_keys(xref):
        print(key, "=", doc.xref_get_key(xref, key))
```

----------------------------------------

TITLE: Drawing Predefined Symbols with PyMuPDF Shape Class (Python)
DESCRIPTION: This snippet demonstrates how to use predefined graphic symbols from the `shapes_and_symbols.py` utility script with PyMuPDF. It initializes a new PDF document and page, then iterates through a list of symbols, drawing each one within a specified rectangle and adding a descriptive text. The `Shape.commit()` method finalizes the drawing operations, and the document is saved as "symbol-list.pdf".
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-drawing-and-graphics.rst#_snippet_0

LANGUAGE: Python
CODE:
```
# -*- coding: utf-8 -*-
"""
Created on Sun Dec  9 08:34:06 2018

@author: Jorj
@license: GNU AFFERO GPL V3

Create a list of available symbols defined in shapes_and_symbols.py

This also demonstrates an example usage: how these symbols could be used
as bullet-point symbols in some text.

"""

import pymupdf
import shapes_and_symbols as sas

# list of available symbol functions and their descriptions
tlist = [
             (sas.arrow, "arrow (easy)"),
             (sas.caro, "caro (easy)"),
             (sas.clover, "clover (easy)"),
             (sas.diamond, "diamond (easy)"),
             (sas.dontenter, "do not enter (medium)"),
             (sas.frowney, "frowney (medium)"),
             (sas.hand, "hand (complex)"),
             (sas.heart, "heart (easy)"),
             (sas.pencil, "pencil (very complex)"),
             (sas.smiley, "smiley (easy)"),
             ]

r = pymupdf.Rect(50, 50, 100, 100)  # first rect to contain a symbol
d = pymupdf.Rect(0, r.height + 10, 0, r.height + 10)  # displacement to next rect
p = (15, -r.height * 0.2)  # starting point of explanation text
rlist = [r]  # rectangle list

for i in range(1, len(tlist)):  # fill in all the rectangles
        rlist.append(rlist[i-1] + d)

doc = pymupdf.open()  # create empty PDF
page = doc.new_page()  # create an empty page
shape = page.new_shape()  # start a Shape (canvas)

for i, r in enumerate(rlist):
        tlist[i][0](shape, rlist[i])  # execute symbol creation
        shape.insert_text(rlist[i].br + p,  # insert description text
                       tlist[i][1], fontsize=r.height/1.2)

# store everything to the page's /Contents object
shape.commit()

import os
scriptdir = os.path.dirname(__file__)
doc.save(os.path.join(scriptdir, "symbol-list.pdf"))  # save the PDF
```

----------------------------------------

TITLE: Retrieving Page Fonts in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to retrieve a list of fonts referenced by a specific page in a PDF document using PyMuPDF's `get_page_fonts` method. It shows a basic call to `get_page_fonts` for page 0 without full details, and the expected output format. The `doc` object is an instance of a PyMuPDF Document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_17

LANGUAGE: Python
CODE:
```
pprint(doc.get_page_fonts(0, full=False))
```

----------------------------------------

TITLE: Add Caret Annotation - PyMuPDF Python
DESCRIPTION: Adds a caret icon annotation to a PDF page, primarily used to indicate text edits. The icon is a MuPDF-provided 20x20 rectangle positioned at the specified `point`. This method returns the newly created `Annot` object, with a default blue stroke color and no fill color support.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_1

LANGUAGE: Python
CODE:
```
add_caret_annot(point)
```

----------------------------------------

TITLE: Drawing Pie Chart Sectors with PyMuPDF Python
DESCRIPTION: Demonstrates how to draw multiple filled sectors (pie pieces) on a page using PyMuPDF. It initializes a shape, iterates to draw sectors with `draw_sector`, uses `finish` with different fill colors for each piece without closing the path, and finally commits the shape to the page. Requires a `page` object, center point, starting point, and a sequence of colors.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/shape.rst#_snippet_4

LANGUAGE: python
CODE:
```
shape = page.new_shape()  # start a new shape
cols = (...)  # a sequence of RGB color triples
pieces = len(cols)  # number of pieces to draw
beta = 360. / pieces  # angle of each piece of pie
center = pymupdf.Point(...)  # center of the pie
p0 = pymupdf.Point(...)  # starting point
for i in range(pieces):
    p0 = shape.draw_sector(center, p0, beta,
                          fullSector=True) # draw piece
    # now fill it but do not connect ends of the arc
    shape.finish(fill=cols[i], closePath=False)
shape.commit()  # update the page
```

----------------------------------------

TITLE: Default Raw Dictionary Extraction Flags (PyMuPDF Constant)
DESCRIPTION: A combination of flags representing the default settings for extracting text as a raw dictionary. Includes preserving ligatures, whitespace, clipping to mediabox, preserving images, and using CID for unknown Unicode.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_23

LANGUAGE: Python
CODE:
```
TEXTFLAGS_RAWDICT = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_PRESERVE_IMAGES | TEXT_USE_CID_FOR_UNKNOWN_UNICODE
```

----------------------------------------

TITLE: Initializing PyMuPDF Story with Archive Argument - Python
DESCRIPTION: Demonstrates how to initialize a `pymupdf.Story` object, specifying an `archive` for resource loading. It shows two ways: providing an `Archive` object directly or a path string, which `Story` will use to temporarily construct an `Archive`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/story-class.rst#_snippet_0

LANGUAGE: Python
CODE:
```
story = pymupdf.Story(archive=pymupdf.Archive("myfolder"))
```

LANGUAGE: Python
CODE:
```
story = pymupdf.Story(archive="myfolder")
```

----------------------------------------

TITLE: Updating Embedded Files in PyMuPDF (Python)
DESCRIPTION: This method allows changing an existing embedded file's content or metadata (filename, unicode filename, description). All parameters are optional, and defaulting them results in a no-operation. As of v1.14.13, io.BytesIO is supported for the buffer. It returns the xref of the updated file object, and its /ModDate is automatically updated.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_53

LANGUAGE: Python
CODE:
```
doc.embfile_upd(item, buffer=new_content)
```

----------------------------------------

TITLE: Retrieving Document XML Metadata (PyMuPDF Python)
DESCRIPTION: This PDF-only method retrieves the XML metadata of the document. It returns an empty string if the document is not a PDF or if XML metadata is not present.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_22

LANGUAGE: Python
CODE:
```
doc.get_xml_metadata()
```

----------------------------------------

TITLE: Adding Custom PDF Metadata with PyMuPDF
DESCRIPTION: Illustrates how to store arbitrary, private metadata items in a PDF document by directly manipulating the `Info` dictionary using `doc.xref_set_key()`. It requires obtaining the `Info` object's xref and ensuring the value is a properly formatted PDF string using `pymupdf.get_pdf_str()`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_9

LANGUAGE: Python
CODE:
```
what, value = doc.xref_get_key(-1, "Info")  # /Info key in the trailer
if what != "xref":
    raise ValueError("PDF has no metadata")
xref = int(value.replace("0 R", ""))  # extract the metadata xref
# add some private information
doc.xref_set_key(xref, "mykey", pymupdf.get_pdf_str("北京 is Beijing"))
pprint(metadata)
```

----------------------------------------

TITLE: Setting Nested Key Value with Path Notation in PyMuPDF
DESCRIPTION: This snippet demonstrates how to directly modify the value of a key within a deeply nested dictionary structure in a PDF object using PyMuPDF's path notation. It uses `doc.xref_set_key()` with a key path like "Resources/XObject/Im1" to update the target value, followed by printing the object to confirm the change. It's important to note that no semantic checks are performed, so invalid xrefs will not be detected at this stage.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_18

LANGUAGE: Python
CODE:
```
doc.xref_set_key(page.xref, "Resources/XObject/Im1", "9999 0 R")
print(doc.xref_object(page.xref))
```

----------------------------------------

TITLE: PDF Widget Type Constants (PyMuPDF/MuPDF)
DESCRIPTION: Defines the integer identifiers for different types of PDF form widgets, such as buttons, checkboxes, text fields, and list boxes.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_44

LANGUAGE: Constants
CODE:
```
PDF_WIDGET_TYPE_UNKNOWN 0
PDF_WIDGET_TYPE_BUTTON 1
PDF_WIDGET_TYPE_CHECKBOX 2
PDF_WIDGET_TYPE_COMBOBOX 3
PDF_WIDGET_TYPE_LISTBOX 4
PDF_WIDGET_TYPE_RADIOBUTTON 5
PDF_WIDGET_TYPE_SIGNATURE 6
PDF_WIDGET_TYPE_TEXT 7
```

----------------------------------------

TITLE: Compute Midpoint of Two Points in PyMuPDF Python
DESCRIPTION: Shows how to calculate the midpoint between two PyMuPDF Point objects. It involves adding the two points together and then dividing the resulting point by 2 to find the average coordinate.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_2

LANGUAGE: Python
CODE:
```
>>> p1 = pymupdf.Point(1, 2)
>>> p2 = pymupdf.Point(4711, 3141)
>>> mp = (p1 + p2) / 2
>>> mp
Point(2356.0, 1571.5)
>>>
```

----------------------------------------

TITLE: Drawing a Squiggle Line with Shape in Python
DESCRIPTION: This snippet demonstrates how to create a Shape object from a page, define a rectangle, and draw a squiggly line between two points of the rectangle using the draw_squiggle method. It requires importing the pymupdf library.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/shape.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import pymupdf
doc=pymupdf.open()
page=doc.new_page()
r = pymupdf.Rect(100, 100, 300, 200)
shape=page.new_shape()
shape.draw_squiggle(r.tl, r.tr)
```

----------------------------------------

TITLE: Writing HTML Content with Internal Links - PyMuPDF Python
DESCRIPTION: This method is similar to `Story.write()` but does not take a `writer` argument. Instead, it returns a PDF `Document` instance where internal HTML links have been automatically converted into PDF links. It uses `rectfn` to determine content placement and can optionally use `positionfn` and `pagefn` for callbacks during layout.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/story-class.rst#_snippet_2

LANGUAGE: Python
CODE:
```
write_with_links(rectfn, positionfn=None, pagefn=None)
```

----------------------------------------

TITLE: Applying tint_with Method in PyMuPDF
DESCRIPTION: Demonstrates how to use the `tint_with` method of a Pixmap object to replace black and white colors with specified sRGB integer values. The examples show a no-op call, changing black to green, and changing black to red and white to blue.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_3

LANGUAGE: Python
CODE:
```
tint_with(0x000000, 0xFFFFFF)
```

LANGUAGE: Python
CODE:
```
tint_with(0x00FF00, 0xFFFFFF)
```

LANGUAGE: Python
CODE:
```
tint_with(0xFF0000, 0x0000FF)
```

----------------------------------------

TITLE: Initializing Empty Pixmap (PyMuPDF)
DESCRIPTION: Creates a new, empty pixmap with a specified colorspace, dimensions, and optional alpha channel. The pixel data is not initialized and contains garbage until explicitly set.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/pixmap.rst#_snippet_0

LANGUAGE: python
CODE:
```
Pixmap(__init__(self, colorspace, irect, alpha=False))
```

----------------------------------------

TITLE: Create Partial Pixmap (Clip) with Zoom (PyMuPDF, Python)
DESCRIPTION: Shows how to create a pixmap for only a specific rectangular area (clip) of a page while also applying a zoom factor. It calculates the middle point of the page rectangle to define the clip area and uses a matrix for zooming.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_2

LANGUAGE: Python
CODE:
```
mat = pymupdf.Matrix(2, 2)  # zoom factor 2 in each direction
rect = page.rect  # the page rectangle
mp = (rect.tl + rect.br) / 2  # its middle point, becomes top-left of clip
clip = pymupdf.Rect(mp, rect.br)  # the area we want
pix = page.get_pixmap(matrix=mat, clip=clip)
```

----------------------------------------

TITLE: Configure PyMuPDF Story with Custom Font CSS
DESCRIPTION: This snippet demonstrates how to use the `css_for_pymupdf_font` function to generate CSS for a specific font code (e.g., 'notos'), assign it a custom font-family name ('sans-serif'), add the necessary font data to an Archive, and initialize a PyMuPDF Story object using the generated CSS and archive. This effectively replaces the default 'sans-serif' font in the Story with the specified PyMuPDF font.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/functions.rst#_snippet_1

LANGUAGE: Python
CODE:
```
arch = pymupdf.Archive()
CSS = pymupdf.css_for_pymupdf_font("notos", name="sans-serif", archive=arch)
story = pymupdf.Story(user_css=CSS, archive=arch)
```

----------------------------------------

TITLE: Creating Pixmaps with Bytes for Samples Data - Python
DESCRIPTION: The pixmap constructor 'fitz.Pixmap(colorspace, width, height, samples)' now accepts 'bytes' objects for the 'samples' parameter, in addition to 'bytearray', offering more flexibility for image data sources.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_11

LANGUAGE: Python
CODE:
```
import fitz

# Create sample bytes data for an RGB image (e.g., 10x10 pixels)
samples_data_bytes = b'\x00\x00\x00' * (10 * 10) # All black pixels

# Create a pixmap using bytes for samples
pix = fitz.Pixmap(fitz.csRGB, 10, 10, samples_data_bytes)

print(f"Pixmap created with bytes samples: {pix.width}x{pix.height}, colorspace: {pix.colorspace.name}")
pix = None # Release memory
```

----------------------------------------

TITLE: Example: Show PDF Trailer and Metadata with PyMuPDF (Shell)
DESCRIPTION: Demonstrates using the `pymupdf show` command with the `-tr` (trailer) and `-m` (metadata) options. It shows how to extract and display detailed information about the PDF's metadata dictionary and the trailer dictionary.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_12

LANGUAGE: Shell
CODE:
```
pymupdf show FDA-1572_508_R6_FINAL.pdf -tr -m
```

LANGUAGE: Text
CODE:
```
'FDA-1572_508_R6_FINAL.pdf', pages: 2, objects: 1645, 1.4 MB, PDF 1.6, encryption: Standard V4 R4 128-bit AES
document contains 740 root form fields and is signed

------------------------------- PDF metadata ------------------------------
       format: PDF 1.6
        title: FORM FDA 1572
       author: PSC Publishing Services
      subject: Statement of Investigator
     keywords: None
      creator: PScript5.dll Version 5.2.2
     producer: Acrobat Distiller 9.0.0 (Windows)
 creationDate: D:20130522104413-04'00'
      modDate: D:20190718154905-07'00'
   encryption: Standard V4 R4 128-bit AES

------------------------------- PDF trailer -------------------------------
<<
/DecodeParms <<
    /Columns 5
    /Predictor 12
>>
/Encrypt 1389 0 R
/Filter /FlateDecode
/ID [ <9252E9E39183F2A0B0C51BE557B8A8FC> <85227BE9B84B724E8F678E1529BA8351> ]
/Index [ 1388 258 ]
/Info 1387 0 R
/Length 253
/Prev 1510559
/Root 1390 0 R
/Size 1646
/Type /XRef
/W [ 1 3 1 ]
>>
```

----------------------------------------

TITLE: Initializing PyMuPDF TextWriter
DESCRIPTION: Initializes a TextWriter object. It requires a rectangle defining the area for text positioning calculations and optionally accepts opacity and color settings for the text.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/textwriter.rst#_snippet_1

LANGUAGE: Python
CODE:
```
__init__(self, rect, opacity=1, color=None)
```

----------------------------------------

TITLE: Example: Inspecting Image Transformation Matrix - PyMuPDF Python
DESCRIPTION: Provides a practical example of how to retrieve image information, calculate the shrink matrix and rectangle, obtain the bbox and transformation matrix using `page.get_image_bbox(transform=True)`, confirm the calculation, and inspect the resulting combined matrix to understand scaling and rotation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app3.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> imginfo = page.get_images()[0]  # get an image item on a page
>>> imginfo
(5, 0, 439, 501, 8, 'DeviceRGB', '', 'fzImg0', 'DCTDecode')
>>> #------------------------------------------------
>>> # define image shrink matrix and rectangle
>>> #------------------------------------------------
>>> shrink = pymupdf.Matrix(1 / 439, 0, 0, 1 / 501, 0, 0)
>>> imgrect = pymupdf.Rect(0, 0, 439, 501)
>>> #------------------------------------------------
>>> # determine image bbox and transformation matrix:
>>> #------------------------------------------------
>>> bbox, transform = page.get_image_bbox("fzImg0", transform=True)
>>> #------------------------------------------------
>>> # confirm equality - permitting rounding errors
>>> #------------------------------------------------
>>> bbox
Rect(100.0, 112.37525939941406, 300.0, 287.624755859375)
>>> imgrect * shrink * transform
Rect(100.0, 112.375244140625, 300.0, 287.6247253417969)
>>> #------------------------------------------------
>>> shrink * transform
Matrix(0.0, -0.39920157194137573, 0.3992016017436981, 0.0, 100.0, 287.6247253417969)
>>> #------------------------------------------------
>>> # the above shows:
>>> # image sides are scaled by same factor ~0.4,
>>> # and the image is rotated by 90 degrees clockwise
>>> # compare this with pymupdf.Matrix(-90) * 0.4
>>> #------------------------------------------------
```

----------------------------------------

TITLE: Modifying Table of Contents Item in PyMuPDF (Python)
DESCRIPTION: This method allows for granular changes to an existing Table of Contents item identified by its index. It can modify the item's title, destination, appearance (color, bold, italic), or collapsing behavior of sub-items, offering an alternative to replacing the entire TOC.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_31

LANGUAGE: Python
CODE:
```
import fitz # PyMuPDF

doc = fitz.open("input.pdf")
toc = doc.get_toc()
if toc:
    item_to_modify_idx = 0 # Example: modify the first item
    # Change title and point to page 5, 100 points from top
    doc.set_toc_item(item_to_modify_idx, title="New Title for Item 1", pno=5, to={"top": 100})
    print(f"TOC item {item_to_modify_idx} modified.")
    doc.save("output.pdf", incremental=True, garbage=3)
doc.close()
```

----------------------------------------

TITLE: Checking Signature Fields in PyMuPDF Document
DESCRIPTION: The `get_sigflags` method checks for the presence of signature fields in a PDF document by returning the value of the optional `/SigFlags` property. A return value of -1 indicates the property is not present or no signature fields are recorded. A value of 1 means at least one signature field exists, and 3 indicates signatures that may be invalidated upon file alteration.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_46

LANGUAGE: Python
CODE:
```
doc.get_sigflags()
```

----------------------------------------

TITLE: Calculating Area of Rect and IRect Objects - Python
DESCRIPTION: New 'get_area()' methods have been added to both 'fitz.Rect' and 'fitz.IRect' classes, providing a direct way to calculate the area covered by these rectangular objects.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_12

LANGUAGE: Python
CODE:
```
import fitz

# Create a Rect object
rect = fitz.Rect(0, 0, 100, 50)
area_rect = rect.get_area()
print(f"Area of Rect: {area_rect}")

# Create an IRect object
irec = fitz.IRect(0, 0, 100, 50)
area_irec = irec.get_area()
print(f"Area of IRect: {area_irec}")
```

----------------------------------------

TITLE: Setting Date Formatting and Keystroke Scripts for a PyMuPDF Widget (Python)
DESCRIPTION: This Python code snippet demonstrates how to assign JavaScript code strings to the `script_format` and `script_stroke` attributes of a PyMuPDF widget object. These scripts are executed by the PDF viewer to enforce a specific date format ("mm/dd/yyyy") and validate keystrokes for a text field, ensuring only valid date characters are entered. This is typically used for date input fields in PDF forms.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/widget.rst#_snippet_3

LANGUAGE: Python
CODE:
```
widget.script_format = 'AFDate_FormatEx("mm/dd/yyyy");'
widget.script_stroke = 'AFDate_KeystrokeEx("mm/dd/yyyy");'
```

----------------------------------------

TITLE: Removing a Key from a PDF Page XREF in PyMuPDF
DESCRIPTION: This snippet illustrates how to remove a key from a PDF page's cross-reference (xref) dictionary by setting its value to "null" using `doc.xref_set_key()`. This effectively removes the specified property, such as "Rotate", from the page definition. An alternative for array-type keys like "Annots" is to set an empty array `[]`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_15

LANGUAGE: Python
CODE:
```
doc.xref_set_key(page.xref, "Rotate", "null")
```

----------------------------------------

TITLE: Retrieving Page XObjects in PyMuPDF (Python)
DESCRIPTION: This method returns a list of Form XObjects referenced by the current page in a PDF document. It functions as a wrapper for the `Document.get_page_xobjects` method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_35

LANGUAGE: Python
CODE:
```
get_xobjects()
```

----------------------------------------

TITLE: Deleting XML Metadata in PyMuPDF
DESCRIPTION: Demonstrates how to remove XML metadata from a document using the `doc.del_xml_metadata()` method. This function helps clean up or reset XML-based metadata within the PDF.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_6

LANGUAGE: Python
CODE:
```
doc.del_xml_metadata()
```

----------------------------------------

TITLE: Setting PDF MarkInfo (PyMuPDF Python)
DESCRIPTION: This PDF-only method, introduced in v1.22.2, sets the `/MarkInfo` values, which provide information about Tagged PDF conventions. It requires a dictionary with boolean values for "Marked", "UserProperties", and "Suspects" as specified in the PDF specifications.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_26

LANGUAGE: Python
CODE:
```
doc.set_markinfo(value)
```

----------------------------------------

TITLE: Handling PDF Object Streams with PyMuPDF
DESCRIPTION: This code illustrates how to read and optionally update object streams in a PDF using PyMuPDF. Stream objects contain additional data like images or fonts. The `Document.xref_stream` method automatically decompresses the stream into a bytes object, and `Document.update_stream` handles recompression when writing back.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_1

LANGUAGE: Python
CODE:
```
xreflen = doc.xref_length() # number of objects in file
for xref in range(1, xreflen): # skip item 0!
    if stream := doc.xref_stream(xref):
        # do something with it (it is a bytes object or None)
        # e.g. just write it back:
        doc.update_stream(xref, stream)
```

----------------------------------------

TITLE: Assigning Optional Content Group to Existing Image in PyMuPDF (Python)
DESCRIPTION: This snippet shows how to assign an Optional Content Group (OCG) to an image that already exists in the document. It requires the `xref` of the existing image (`img_xref`) and the `xref` of the OCG. After this operation, the image's visibility will be controlled by the state of the assigned OCG.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-optional-content.rst#_snippet_2

LANGUAGE: Python
CODE:
```
doc.set_oc(img_xref, xref)
```

----------------------------------------

TITLE: Convert RGB Image to Tkinter PhotoImage with PyMuPDF
DESCRIPTION: Shows how to convert an RGB image (without an alpha channel) loaded via PyMuPDF into a Tkinter PhotoImage object. It uses the PPM format as an intermediate step compatible with Tkinter.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_12

LANGUAGE: python
CODE:
```
import tkinter as tk
pix = pymupdf.Pixmap("input.jpg")  # or any RGB / no-alpha image
tkimg = tk.PhotoImage(data=pix.tobytes("ppm"))
```

----------------------------------------

TITLE: Accessing and Modifying XML Metadata in PyMuPDF (Python)
DESCRIPTION: This example demonstrates how to extract XML metadata from a PDF using `doc.get_xml_metadata()`. While PyMuPDF doesn't directly interpret XML, it allows reading and writing this stream object. Modified XML metadata can be written back to the document using `doc.set_xml_metadata()`, enabling external XML processing.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_5

LANGUAGE: Python
CODE:
```
xmlmetadata = doc.get_xml_metadata()
print(xmlmetadata)
```

LANGUAGE: Python
CODE:
```
# write back modified XML metadata:
doc.set_xml_metadata(xmlmetadata)

# XML metadata can be deleted like this:
```

----------------------------------------

TITLE: Retrieving Nested Key Value with Path Notation in PyMuPDF
DESCRIPTION: This snippet shows how to retrieve the value of a key located within a nested dictionary structure in a PDF object using PyMuPDF. It uses a path-like notation (e.g., "Resources/XObject/Im1") with `doc.xref_get_key()` to access the specific key, demonstrating support for hierarchical key lookups.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_17

LANGUAGE: Python
CODE:
```
doc.xref_get_key(page.xref, "Resources/XObject/Im1")
```

----------------------------------------

TITLE: Creating Transparent Pixmap from Base and Mask Images in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to combine a base image and a mask image to create a new PyMuPDF Pixmap object that includes transparency. It requires 'block' to be a dictionary containing 'image' and 'mask' keys, typically obtained from an image block.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/textpage.rst#_snippet_0

LANGUAGE: Python
CODE:
```
base = pymupdf.Pixmap(block["image"])
mask = pymupdf.Pixmap(block["mask"])
result = pymupdf.Pixmap(base, mask)
```

----------------------------------------

TITLE: Accessing Coordinates of Geometric Objects by Index - Python
DESCRIPTION: PyMuPDF's geometric objects like IRect, Rect, Point, and Matrix now support the 'len()' method and allow coordinate properties to be accessed via indices, providing a more flexible way to interact with their components.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_3

LANGUAGE: Python
CODE:
```
import fitz

irec = fitz.IRect(10, 20, 100, 200)

# Accessing coordinates by property name
x1_prop = irec.x1

# Accessing coordinates by index
x1_indexed = irec[2] # IRect[0]=x0, IRect[1]=y0, IRect[2]=x1, IRect[3]=y1

print(f"x1 via property: {x1_prop}, x1 via index: {x1_indexed}")
print(f"Length of IRect: {len(irec)}")
```

----------------------------------------

TITLE: Inserting Image with Optional Content Group in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to insert a new image onto a page and immediately associate it with an Optional Content Group (OCG). The `oc` parameter takes the `xref` of a previously created OCG, making the image's visibility dependent on the OCG's state. This requires a `page` object and a defined `xref` for the OCG.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-optional-content.rst#_snippet_1

LANGUAGE: Python
CODE:
```
img_xref = page.insert_image(rect, filename="image.file", oc=xref)
```

----------------------------------------

TITLE: Retrieving PDF Object Keys with PyMuPDF
DESCRIPTION: Demonstrates how to obtain a list of all keys associated with a specific PDF object, such as a page, using the `doc.xref_get_keys()` method. This allows for granular inspection of object properties and their structure.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_10

LANGUAGE: Python
CODE:
```
import pymupdf
doc = pymupdf.open("pymupdf.pdf")
page = doc[0]
from pprint import pprint
pprint(doc.xref_get_keys(page.xref))
```

----------------------------------------

TITLE: Adding Members to pymupdf.Archive in Python
DESCRIPTION: This snippet demonstrates how to initialize a `pymupdf.Archive` object and add multiple members (directories and files) using the `add` method. It shows how to prepare a tuple of members and specifies a `path` within the archive. The `pprint` output illustrates the structure of the `entry_list` after the additions. Note that `dir1` is assumed to be a previously defined directory.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/archive-class.rst#_snippet_1

LANGUAGE: python
CODE:
```
dir2 = "fitz-64"  # a folder name
img = ("nur-ruhig.jpg", "img")  # an image file
members = (dir1, img, dir2)  # we want to append these in one go
arch = pymupdf.Archive()
arch.add(members, path="mypath")
pprint(arch.entry_list)
[{'entries': ['310', '37', '38', '39'], 'fmt': 'dir', 'path': 'mypath'},
{'entries': ['img'], 'fmt': 'tree', 'path': 'mypath'},
{'entries': ['310', '311', '37', '38', '39', 'pypy'],
'fmt': 'dir',
'path': 'mypath'}]
```

----------------------------------------

TITLE: Adding a New Operation to Journal - PyMuPDF Python
DESCRIPTION: This snippet adds a new operation (drawing a line) to the document's journal. When a new operation is added after an undo, it effectively truncates the redo history, making previous redoable operations no longer available.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-journalling.rst#_snippet_5

LANGUAGE: Python
CODE:
```
doc.journal_start_op("Draw some line")
page.draw_line((100,150), (300,150))
doc.journal_stop_op()
```

----------------------------------------

TITLE: Tile an Image with PyMuPDF Pixmap
DESCRIPTION: Demonstrates how to create a new image composed of multiple tiled copies of an original source image using PyMuPDF's Pixmap. It calculates the target dimensions and copies the source Pixmap repeatedly.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_14

LANGUAGE: python
CODE:
```
import pymupdf
src = pymupdf.Pixmap("img-7edges.png")      # create pixmap from a picture
col = 3                                  # tiles per row
lin = 4                                  # tiles per column
tar_w = src.width * col                  # width of target
tar_h = src.height * lin                 # height of target

# create target pixmap
tar_pix = pymupdf.Pixmap(src.colorspace, (0, 0, tar_w, tar_h), src.alpha)

# now fill target with the tiles
for i in range(col):
    for j in range(lin):
        src.set_origin(src.width * i, src.height * j)
        tar_pix.copy(src, src.irect) # copy input to new loc

tar_pix.save("tar.png")
```

----------------------------------------

TITLE: Setting Document XML Metadata (PyMuPDF Python)
DESCRIPTION: This PDF-only method sets or updates the XML metadata of the document. It accepts any string as input, however, no validation is performed by this method to ensure the string is valid XML syntax.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_23

LANGUAGE: Python
CODE:
```
doc.set_xml_metadata(xml)
```

----------------------------------------

TITLE: Calculating Image Bbox using Transformation Matrix - PyMuPDF Python
DESCRIPTION: Shows the mathematical relationship between the original image rectangle, a shrink matrix, and the transformation matrix to compute the image's bounding box on a page. It defines the initial image rectangle and the shrink matrix based on image dimensions, then shows the formula `imgrect * shrink * transform` to get the bbox.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app3.rst#_snippet_0

LANGUAGE: Python
CODE:
```
imgrect = pymupdf.Rect(0, 0, width, height)
shrink = pymupdf.Matrix(1/width, 0, 0, 1/height, 0, 0)
bbox = imgrect * shrink * transform
```

----------------------------------------

TITLE: Printing Button States (Python)
DESCRIPTION: Demonstrates how to retrieve and print the field name and the possible 'On'/'Off' states for a button widget using the `button_states` method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/widget.rst#_snippet_0

LANGUAGE: Python
CODE:
```
print(field.field_name, field.button_states())
```

----------------------------------------

TITLE: Rounding a Rect to IRect in PyMuPDF (Python)
DESCRIPTION: Demonstrates how the `round()` method converts a floating-point `Rect` to the smallest containing integer `IRect`. The top-left corner is rounded up/left, and the bottom-right is rounded down/right.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/rect.rst#_snippet_0

LANGUAGE: Python
CODE:
```
pymupdf.Rect(0.5, -0.01, 123.88, 455.123456).round()
```

----------------------------------------

TITLE: Setting OCG Base State in PyMuPDF
DESCRIPTION: This example demonstrates how to permanently change the base state of Optional Content Groups (OCGs) using `doc.set_layer`. It sets the default configuration layer's base state to 'OFF' and then retrieves and prints the current layer configuration to verify the change.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_7

LANGUAGE: Python
CODE:
```
doc.set_layer(-1, basestate="OFF")  # only changes the base state
pprint(doc.get_layer())
```

----------------------------------------

TITLE: Building and Installing PyMuPDF for Specific Python Version and Architecture (Windows Pip)
DESCRIPTION: On Windows, this command changes to the PyMuPDF source directory and uses the py launcher with -m pip to build and install PyMuPDF specifically for the 32-bit Python 3.10 interpreter.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/installation.rst#_snippet_9

LANGUAGE: cmd
CODE:
```
cd PyMuPDF && py -3.10-32 -m pip install .
```

----------------------------------------

TITLE: Link Destination Kind: GoTo (PyMuPDF Constant)
DESCRIPTION: Represents a link destination of kind 'GoTo'. Points to a specific location within the current document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_29

LANGUAGE: Python
CODE:
```
LINK_GOTO = 1
```

----------------------------------------

TITLE: Accessing 'skyblue' Color Value in PyMuPDF pdfcolor
DESCRIPTION: This snippet demonstrates how to access the RGB tuple value for the color 'skyblue' from the `pymupdf.pdfcolor` dictionary.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/functions.rst#_snippet_6

LANGUAGE: python
CODE:
```
pymupdf.pdfcolor["skyblue"] = (0.5294117647058824, 0.807843137254902, 0.9215686274509803)
```

----------------------------------------

TITLE: Logging Skipped Links in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to print a message to the console indicating the number of named links that were skipped during processing, along with the total number of links found in the input. It uses string formatting to embed variable values (`link_skip` and `link_cnti`) into the output message.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-common-issues-and-their-solutions.rst#_snippet_2

LANGUAGE: Python
CODE:
```
print("Skipped %i named links of a total of %i in input." % (link_skip, link_cnti))
```

----------------------------------------

TITLE: Getting/Setting NeedAppearances Property in PyMuPDF
DESCRIPTION: The `need_appearances` method allows getting or setting the `/NeedAppearances` property for Form PDFs. This property controls whether appearance streams and dictionaries are constructed for widget annotations. Passing a boolean `value` sets the property; omitting it or passing `None` inquires the current value. It returns `True`/`False` if set/found, or `None` if not a Form PDF.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_45

LANGUAGE: Python
CODE:
```
doc.need_appearances(value=None)
```

----------------------------------------

TITLE: Retrieving PDF Object Source by XREF in PyMuPDF (Python)
DESCRIPTION: This method returns the definition source of a PDF object given its cross-reference (xref) number. A value of -1 for xref returns the PDF trailer source. Options are available to generate compact output (compressed) and ASCII-encode binary data (ascii). This method was new in v1.16.8 and changed in v1.18.10.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_55

LANGUAGE: Python
CODE:
```
doc.xref_object(xref_number)
```

----------------------------------------

TITLE: Retrieving PDF Catalog XREF in PyMuPDF (Python)
DESCRIPTION: This method returns the cross-reference (xref) number of the PDF catalog (or root) object. This xref can then be used with Document.xref_object to inspect its source. This method was new in v1.16.8.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_56

LANGUAGE: Python
CODE:
```
doc.pdf_catalog()
```

----------------------------------------

TITLE: Check Stamp Text Length in PyMuPDF Python
DESCRIPTION: This Python code snippet demonstrates how to check if the length of text intended for a 'Stamp' annotation exceeds the maximum allowed length (190 points) when using the default font ('Times-Bold') and size (20). This check is recommended when using the `set_name` method with arbitrary text for 'Stamp' annotations to ensure the text fits within the annotation rectangle.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/annot.rst#_snippet_0

LANGUAGE: Python
CODE:
```
pymupdf.get_text_length(text, fontname="tibo", fontsize=20) <= 190
```

----------------------------------------

TITLE: Listing Embedded File Names in PyMuPDF (Python)
DESCRIPTION: This method returns a list of names of all embedded files in a PDF document. The order of names in the list corresponds to their physical sequence within the document.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_52

LANGUAGE: Python
CODE:
```
doc.embfile_names()
```

----------------------------------------

TITLE: Performing Multiple Undo Operations - PyMuPDF Python
DESCRIPTION: This code block demonstrates how to revert previous operations using `journal_undo()`. It iterates three times, effectively undoing the last three journaled operations, which in this context would be the last three text insertions.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-journalling.rst#_snippet_3

LANGUAGE: Python
CODE:
```
for i in range(3):  # revert last three operations
        doc.journal_undo()
```

----------------------------------------

TITLE: Getting Paper Rectangle Dimensions - PyMuPDF Python
DESCRIPTION: This snippet demonstrates how to use the `paper_rect` method to obtain the dimensions of a standard paper format as a `Rect` object. It's useful for calculating page sizes or positioning elements based on common paper standards.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/changes.txt#_snippet_0

LANGUAGE: Python
CODE:
```
fitz.paper_rect("letter") = fitz.Rect(0.0, 0.0, 612.0, 792.0)
```

----------------------------------------

TITLE: Listing All Keys of a PDF Page XREF in PyMuPDF
DESCRIPTION: This snippet demonstrates how to iterate through and print all keys and their corresponding values for a specific page's cross-reference (xref) dictionary in a PDF document using PyMuPDF. It utilizes `doc.xref_get_keys()` to get all keys and `doc.xref_get_key()` to retrieve the value for each key. The output shows the key-value pairs, including their PDF object types.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_13

LANGUAGE: Python
CODE:
```
for key in doc.xref_get_keys(page.xref):
       print("%s = %s" % (key, doc.xref_get_key(page.xref, key)))
```

----------------------------------------

TITLE: Retrieving All OCG Details in PyMuPDF
DESCRIPTION: This example shows how to retrieve a dictionary containing detailed information for all Optional Content Groups (OCGs) in a document using `doc.get_ocgs`. The output is a pretty-printed dictionary where keys are OCG xrefs and values are dictionaries of OCG properties.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_8

LANGUAGE: Python
CODE:
```
pprint(doc.get_ocgs())
```

----------------------------------------

TITLE: Default Text Extraction Flags (PyMuPDF Constant)
DESCRIPTION: A combination of flags representing the default settings for general text extraction. Includes preserving ligatures and whitespace, clipping to the mediabox, and using CID for unknown Unicode characters.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_19

LANGUAGE: Python
CODE:
```
TEXTFLAGS_TEXT = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_USE_CID_FOR_UNKNOWN_UNICODE
```

----------------------------------------

TITLE: Drawing Quadratic Curves in PyMuPDF (Python)
DESCRIPTION: Draws a quadratic Bézier curve in a PDF document, which is a special case of the draw_bezier() method. It uses three points (p1, p2, p3) to define the curve. Similar to other drawing methods, it provides parameters for color, fill, width, dashes, line caps, joins, overlay, and opacity.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_26

LANGUAGE: Python
CODE:
```
draw_curve(p1, p2, p3, color=(0,), fill=None, width=1, dashes=None, lineCap=0, lineJoin=0, overlay=True, closePath=False, morph=None, stroke_opacity=1, fill_opacity=1, oc=0)
```

----------------------------------------

TITLE: Fetch PDF and Load with Fitz (Python)
DESCRIPTION: This Python code, intended to be executed within a Pyodide environment, imports the `pyodide.http` module, fetches a PDF file from a specified URL using `pyfetch`, reads the response body as bytes, and then loads these bytes into a `fitz.Document` object.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/_static/pymupdf-console.html#_snippet_6

LANGUAGE: Python
CODE:
```
import pyodide.http
r = await pyodide.http.pyfetch('https://mupdf.com/docs/mupdf_explored.pdf')
data = await r.bytes()
doc = fitz.Document(stream=data)
```

----------------------------------------

TITLE: Add Number to Rect and Check Inclusion in PyMuPDF Python
DESCRIPTION: Shows how to add a scalar value to a PyMuPDF Rect object, effectively shifting its coordinates. Also demonstrates checking if a number is present within the Rect's coordinate tuple using the `in` operator.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> pymupdf.Rect(1, 2, 3, 4) + 5
pymupdf.Rect(6.0, 7.0, 8.0, 9.0)
>>> 3 in pymupdf.Rect(1, 2, 3, 4)
True
>>>
```

----------------------------------------

TITLE: Checking Rectangle and Quad Containment in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates the difference in containment checking for a rectangle's bottom-right point when checked against the rectangle itself versus its quad representation in PyMuPDF. Rectangles are defined as 'open' (excluding bottom and right edges), while quads do not have this 'openness' concept, leading to different containment results for boundary points.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/quad.rst#_snippet_0

LANGUAGE: Python
CODE:
```
rect.br in rect
# but:
rect.br in rect.quad
```

----------------------------------------

TITLE: Retrieving Page Label - PyMuPDF
DESCRIPTION: Returns the label string for the page, such as 'vii' for Roman numbering, or an empty string if not defined. This method was introduced in PyMuPDF v1.18.6.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_20

LANGUAGE: Python
CODE:
```
page.get_label()
```

----------------------------------------

TITLE: Adding Optional Content Group to Document in PyMuPDF (Python)
DESCRIPTION: This snippet demonstrates how to add a new Optional Content Group (OCG) to a PDF document. If the PDF previously lacked OC support, this method automatically performs the necessary setup. The method returns the `xref` of the newly created OCG, which is then used to associate PDF objects with it.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-optional-content.rst#_snippet_0

LANGUAGE: Python
CODE:
```
xref = doc.add_ocg()
```

----------------------------------------

TITLE: Removing Optional Content Group from Image in PyMuPDF (Python)
DESCRIPTION: This snippet illustrates how to remove an Optional Content Group (OCG) association from an image. By setting the OCG `xref` parameter to `0`, the image will no longer be controlled by any OCG and will become permanently visible, assuming no other visibility constraints apply. It requires the `xref` of the image (`img_xref`).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-optional-content.rst#_snippet_3

LANGUAGE: Python
CODE:
```
doc.set_oc(img_xref, 0)
```

----------------------------------------

TITLE: Verifying Journal State After Undo - PyMuPDF Python
DESCRIPTION: After performing undo operations, this snippet re-checks the journal's position and capabilities. The output reflects the reduced number of active operations and indicates that redo is now possible.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-journalling.rst#_snippet_4

LANGUAGE: Python
CODE:
```
doc.journal_position();doc.journal_can_do()
```

----------------------------------------

TITLE: Accessing Specific Font Descriptor Details in PyMuPDF
DESCRIPTION: This snippet demonstrates how to retrieve the detailed information for a specific font descriptor, keyed by its reserved name (e.g., 'fimo'), from the `pymupdf.fitz_fontdescriptors` dictionary.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/functions.rst#_snippet_4

LANGUAGE: python
CODE:
```
pymupdf.fitz_fontdescriptors["fimo"]
```

----------------------------------------

TITLE: PyMuPDF TextWriter Class Definition
DESCRIPTION: Defines the TextWriter class, a MuPDF text object designed for preparing and outputting text to PDF pages. It requires a fixed page rectangle upon creation for internal positioning calculations.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/textwriter.rst#_snippet_0

LANGUAGE: Python
CODE:
```
class TextWriter:
```

----------------------------------------

TITLE: Define TEXT_INHIBIT_SPACES Constant (Python)
DESCRIPTION: Defines an integer constant used as a flag for text extraction. If set, MuPDF will not attempt to add missing space characters where there are large gaps between characters. The default in PyMuPDF is "off", meaning spaces are generated.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_10

LANGUAGE: Python
CODE:
```
TEXT_INHIBIT_SPACES = 8
```

----------------------------------------

TITLE: Define TEXT_ALIGN_RIGHT Constant (Python)
DESCRIPTION: Defines an integer constant representing the right text alignment option. This flag is used in text layout operations within PyMuPDF.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_0

LANGUAGE: Python
CODE:
```
TEXT_ALIGN_RIGHT = 2
```

----------------------------------------

TITLE: Define TEXT_USE_CID_FOR_UNKNOWN_UNICODE Constant (Python)
DESCRIPTION: Defines an integer constant used as a flag for text extraction. If set, raw character codes (CID) are used for unknown unicode instead of U+FFFD. This is the default for text extraction in PyMuPDF and can be toggled to detect missing encoding information by scanning for U+FFFD.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_14

LANGUAGE: Python
CODE:
```
TEXT_USE_CID_FOR_UNKNOWN_UNICODE = 128
```

----------------------------------------

TITLE: Link Destination Kind: Launch (PyMuPDF Constant)
DESCRIPTION: Represents a link destination of kind 'Launch'. Used to open another file of any executable type. PyMuPDF treats external links starting with 'file:' or not containing a colon as LINK_LAUNCH.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_31

LANGUAGE: Python
CODE:
```
LINK_LAUNCH = 3
```

----------------------------------------

TITLE: Accessing and Printing Font Flags in PyMuPDF
DESCRIPTION: Shows how to access the 'flags' attribute of a Font object, which returns a dictionary of boolean properties describing the font, such as whether it is bold, italic, or serif.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/font.rst#_snippet_5

LANGUAGE: Python
CODE:
```
pprint(font.flags)
# Expected Output (example for Helvetica):
# {'bold': 0,
#  'fake-bold': 0,
#  'fake-italic': 0,
#  'invalid-bbox': 0,
#  'italic': 0,
#  'mono': 0,
#  'opentype': 0,
#  'serif': 1,
#  'stretch': 0,
#  'substitute': 0}
```

----------------------------------------

TITLE: Convert PNG with Alpha to Tkinter PhotoImage with PyMuPDF
DESCRIPTION: Illustrates converting a PNG image that may have an alpha channel into a Tkinter PhotoImage. It explicitly checks for and removes the alpha channel before converting to the PPM format required by Tkinter.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_13

LANGUAGE: python
CODE:
```
import tkinter as tk
pix = pymupdf.Pixmap("input.png")  # may have an alpha channel
if pix.alpha:  # we have an alpha channel!
    pix = pymupdf.Pixmap(pix, 0)  # remove it
tkimg = tk.PhotoImage(data=pix.tobytes("ppm"))
```

----------------------------------------

TITLE: Displaying Nested PDF Dictionary Structure in PyMuPDF
DESCRIPTION: This snippet demonstrates how to print the full content of a PDF page's cross-reference (xref) object, revealing its hierarchical structure. It shows how keys like "Resources" can contain nested dictionaries such as "XObject" and "Font", which in turn hold their own key-value pairs. This is useful for understanding the complex internal layout of PDF objects.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_16

LANGUAGE: Python
CODE:
```
print(doc.xref_object(page.xref))
```

----------------------------------------

TITLE: Example PyMuPDF RAWDICT/RAWJSON Chars Structure
DESCRIPTION: This snippet shows the structure of the "chars" list within a span in the RAWDICT/RAWJSON output format (TextPage.extractRAWDICT or Page.get_text("rawdict")). It details how each individual character's origin, bounding box, and character value ('c') are represented.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app1.rst#_snippet_6

LANGUAGE: JSON
CODE:
```
"chars": [{
    "origin": (50.0, 100.0),
    "bbox": (50.0, 88.17500305175781, 57.336997985839844, 103.28900146484375),
    "c": "S"
}, {
    "origin": (57.33700180053711, 100.0),
    "bbox": (57.33700180053711, 88.17500305175781, 63.4530029296875, 103.28900146484375),
    "c": "o"
}, {
    "origin": (63.4530029296875, 100.0),
    "bbox": (63.4530029296875, 88.17500305175781, 72.61600494384766, 103.28900146484375),
    "c": "m"
}, {
    "origin": (72.61600494384766, 100.0),
    "bbox": (72.61600494384766, 88.17500305175781, 78.73200225830078, 103.28900146484375),
    "c": "e"
}, {
    "origin": (78.73200225830078, 100.0),
    "bbox": (78.73200225830078, 88.17500305175781, 81.79000091552734, 103.28900146484375),
    "c": " "
< ... deleted ... >
}, {
    "origin": (163.11297607421875, 100.0),
    "bbox": (163.11297607421875, 88.17500305175781, 166.1709747314453, 103.28900146484375),
    "c": "."
}]
```

----------------------------------------

TITLE: PDF Text Widget Specific Flag Bit Constants (PyMuPDF/MuPDF)
DESCRIPTION: Defines bit flags specific to text form widgets, controlling properties like multiline input, password masking, and spell check behavior.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_47

LANGUAGE: Constants
CODE:
```
PDF_TX_FIELD_IS_MULTILINE  1 << 12
PDF_TX_FIELD_IS_PASSWORD  1 << 13
PDF_TX_FIELD_IS_FILE_SELECT  1 << 20
PDF_TX_FIELD_IS_DO_NOT_SPELL_CHECK  1 << 22
PDF_TX_FIELD_IS_DO_NOT_SCROLL  1 << 23
PDF_TX_FIELD_IS_COMB  1 << 24
PDF_TX_FIELD_IS_RICH_TEXT  1 << 25
```

----------------------------------------

TITLE: Opening C# File with PyMuPDF (Python)
DESCRIPTION: This snippet shows how to open a C# source code file (.cs) using PyMuPDF by treating it as a plain text file. The `filetype="txt"` parameter is crucial for instructing PyMuPDF to handle the file content as text.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/how-to-open-a-file.rst#_snippet_4

LANGUAGE: python
CODE:
```
doc = pymupdf.open("MyClass.cs", filetype="txt")
```

----------------------------------------

TITLE: Accessing Link Color Properties in PyMuPDF
DESCRIPTION: Returns a dictionary containing the stroke and fill colors of the link. Meaningful only for PDF documents; otherwise, returns `None`. The fill color is always `None` for links. The stroke color is used for the border. The tuple length indicates the colorspace (1=GRAY, 3=RGB, 4=CMYK), with float values from 0 to 1.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/link.rst#_snippet_4

LANGUAGE: Python
CODE:
```
Link.colors
```

----------------------------------------

TITLE: Displaying Raw PDF Object Definition with PyMuPDF
DESCRIPTION: Illustrates how to retrieve and print the complete, raw definition of a PDF object, including its type, contents, resources, and other properties, using the `doc.xref_object()` method. This provides a low-level, direct view of the object's internal structure.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_11

LANGUAGE: Python
CODE:
```
print(doc.xref_object(page.xref))
```

----------------------------------------

TITLE: Link Destination Flag: Horizontal Fit (PyMuPDF Constant)
DESCRIPTION: A bit flag (bit 4) indicating that the destination view should be fitted horizontally.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_38

LANGUAGE: Python
CODE:
```
LINK_FLAG_FIT_H = 16
```

----------------------------------------

TITLE: Checking Journal Position and Capabilities - PyMuPDF Python
DESCRIPTION: This snippet queries the current state of the document's journal. `journal_position()` returns a tuple indicating the current operation index and total operations, while `journal_can_do()` returns a dictionary showing if undo or redo operations are currently possible.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-journalling.rst#_snippet_2

LANGUAGE: Python
CODE:
```
doc.journal_position();doc.journal_can_do()
```

----------------------------------------

TITLE: Example: Show PDF Info with Correct Password (Shell)
DESCRIPTION: Illustrates the output of the `pymupdf show` command when successfully authenticating with the correct password. It displays basic file information like pages, objects, size, version, encryption, and embedded file count.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_11

LANGUAGE: Shell
CODE:
```
pymupdf show x.pdf -pass jorjmckie
```

----------------------------------------

TITLE: PDF Stamp Annotation Icon Constants (PyMuPDF/MuPDF)
DESCRIPTION: Lists the integer identifiers for predefined icons available for use with rubber stamp annotations in MuPDF.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_51

LANGUAGE: Constants
CODE:
```
STAMP_Approved 0
STAMP_AsIs 1
STAMP_Confidential 2
STAMP_Departmental 3
STAMP_Experimental 4
STAMP_Expired 5
STAMP_Final 6
STAMP_ForComment 7
STAMP_ForPublicRelease 8
STAMP_NotApproved 9
STAMP_NotForPublicRelease 10
STAMP_Sold 11
STAMP_TopSecret 12
STAMP_Draft 13
```

----------------------------------------

TITLE: Initializing CMYK Colorspace in PyMuPDF
DESCRIPTION: This snippet initializes a predefined Colorspace object for the CMYK color model. It uses the `pymupdf.CS_CMYK` constant to specify the CMYK colorspace, typically used for print applications. The `csCMYK` object represents a four-channel color space (Cyan, Magenta, Yellow, Black).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/colorspace.rst#_snippet_2

LANGUAGE: Python
CODE:
```
csCMYK = pymupdf.Colorspace(pymupdf.CS_CMYK)
```

----------------------------------------

TITLE: Accessing Link Border Characteristics in PyMuPDF
DESCRIPTION: Returns a dictionary describing the border characteristics of the link. Meaningful only for PDF documents; otherwise, returns `None`. An empty dictionary is returned if no border information exists. Keys include 'width' (float, -1.0 if unspecified) and 'dashes' (sequence of integers for dash pattern).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/link.rst#_snippet_5

LANGUAGE: Python
CODE:
```
Link.border
```

----------------------------------------

TITLE: Running PyMuPDF DisplayList through a Device in Python
DESCRIPTION: Processes the display list using a specified device (like a draw device or text device). A transformation matrix and an optional clipping area can be applied. This method is typically used internally by specialized methods like get_pixmap or get_textpage.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/displaylist.rst#_snippet_2

LANGUAGE: Python
CODE:
```
run(device, matrix, area)
```

----------------------------------------

TITLE: Configure Text Extraction Segmenting Page (PyMuPDF Constant)
DESCRIPTION: Attempt to segment the page content into different regions or blocks during text extraction.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_18

LANGUAGE: Python
CODE:
```
TEXT_SEGMENT = 4096
```

----------------------------------------

TITLE: Define TEXT_DEHYPHENATE Constant (Python)
DESCRIPTION: Defines an integer constant used as a flag for text extraction and search. If set, hyphens at line ends are ignored, and the text is joined with the next line, potentially altering span bboxes. Used internally by search functions but available for extraction.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_11

LANGUAGE: Python
CODE:
```
TEXT_DEHYPHENATE = 16
```

----------------------------------------

TITLE: Get Help for Deleting Embedded Files (PyMuPDF CLI)
DESCRIPTION: Displays the help message and usage syntax for the `pymupdf embed-del` command, outlining options for specifying the entry name, password, and output file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_17

LANGUAGE: Shell
CODE:
```
pymupdf embed-del -h
usage: pymupdf embed-del [-h] [-password PASSWORD] [-output OUTPUT] -name NAME input

--------------------------- delete embedded file --------------------------

positional arguments:
  input                 PDF filename

optional arguments:
  -h, --help            show this help message and exit
  -password PASSWORD    password
  -output OUTPUT        output PDF filename, incremental save if none
  -name NAME            name of entry to delete
```

----------------------------------------

TITLE: Setting TESSDATA_PREFIX on Unix/Bash
DESCRIPTION: Use the `declare -x` command in a Unix-like shell (like Bash) to export the TESSDATA_PREFIX environment variable. This command sets the variable for the current session; to make it permanent, add it to your shell's startup file (e.g., ~/.bashrc, ~/.profile).
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/installation.rst#_snippet_13

LANGUAGE: Bash
CODE:
```
declare -x TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
```

----------------------------------------

TITLE: Recalculate Shape Rectangle After Morphing (Python)
DESCRIPTION: Provides a Python code snippet to manually recalculate the Shape.rect attribute after a morphing operation. The rect attribute is not automatically updated by morphing methods, so this code is necessary to get the correct bounding box after transformation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/shape.rst#_snippet_2

LANGUAGE: python
CODE:
```
>>> # assuming ...
>>> morph = (point, matrix)
>>> # ... recalculate the shape rectangle like so:
>>> shape.rect = (shape.rect - pymupdf.Rect(point, point)) * ~matrix + pymupdf.Rect(point, point)
```

----------------------------------------

TITLE: Accessing PyMuPDF DisplayList Mediabox in Python
DESCRIPTION: An attribute that provides access to the rectangle defining the boundaries of the display list. This typically corresponds to the mediabox of the page from which the display list was created.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/displaylist.rst#_snippet_5

LANGUAGE: Python
CODE:
```
rect
```

----------------------------------------

TITLE: Convert JPEG to Photoshop PSD with PyMuPDF
DESCRIPTION: A specific example showing how to convert a JPEG image file into an Adobe Photoshop Document (PSD) file using PyMuPDF's Pixmap save method.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-images.rst#_snippet_11

LANGUAGE: python
CODE:
```
pix = pymupdf.Pixmap("myfamily.jpg")
pix.save("myfamily.psd")
```

----------------------------------------

TITLE: Retrieving Full Integer RGB Color Information in PyMuPDF (Python)
DESCRIPTION: This snippet illustrates how to use the `getColorInfoList` function from `pymupdf.utils`. This function returns a list of tuples, where each tuple contains the color name (string) and its corresponding integer RGB values (three integers). This is useful for seeing the original integer representation of the colors in the database.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/colors.rst#_snippet_2

LANGUAGE: Python
CODE:
```
# to see the full integer color coding
from pymupdf.utils import getColorInfoList
il = getColorInfoList()
il
```

----------------------------------------

TITLE: Checking Character Visibility with PyMuPDF Flags
DESCRIPTION: This Python snippet illustrates how to check if a character is invisible based on its `char_flags`. Specifically, it checks if the character is neither filled (bit 3) nor stroked (bit 4) using bitwise operations. If both conditions are true, the text is considered invisible.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/textpage.rst#_snippet_4

LANGUAGE: Python
CODE:
```
if not (char_flags & 2**3 & 2**4):
    # then the text will be invisible
```

----------------------------------------

TITLE: Opening Documents for Attachment with PyMuPDF (Python)
DESCRIPTION: This snippet shows the initial steps for attaching a file to a PDF page using PyMuPDF. It opens the main document ('test.pdf') and the document intended as an attachment ('my-attachment.pdf'), and then accesses the first page of the main document. This code sets up the necessary document and page objects before the attachment operation itself.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_11

LANGUAGE: python
CODE:
```
import pymupdf

doc = pymupdf.open("test.pdf") # open main document
attachment = pymupdf.open("my-attachment.pdf") # open document you want to attach

page = doc[0] # get the 1st page of the document
```

----------------------------------------

TITLE: Creating Nested Dictionaries and Keys in PyMuPDF
DESCRIPTION: This snippet illustrates PyMuPDF's ability to automatically create intermediate dictionaries when setting a key using path notation if those dictionaries do not already exist. It shows how `doc.xref_set_key()` can build a nested structure (e.g., A/B/C/D) and assign a value to the deepest key, simplifying the process of adding complex data to PDF objects.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_19

LANGUAGE: Python
CODE:
```
print(doc.xref_object(xref))
doc.xref_set_key(xref, "A/B/C/D", "[1 2 3 4]")
print(doc.xref_object(xref))
```

----------------------------------------

TITLE: PyMuPDF Rect.round() Empty Result Paradox (Python)
DESCRIPTION: Illustrates the paradox where `Rect.round()` can return an empty `IRect` even if the original `Rect` is not empty, due to MuPDF's internal tolerance (1e-3). This shows that `rect.is_empty` being False does not guarantee `rect.round().is_empty` will also be False.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/rect.rst#_snippet_1

LANGUAGE: Python
CODE:
```
r = pymupdf.Rect(100, 100, 200, 100.001)
r.is_empty  # rect is NOT empty
r.round()  # but its irect IS empty!
r.round().is_empty
```

----------------------------------------

TITLE: Building and Installing PyMuPDF for Specific Python Version (Windows Pip)
DESCRIPTION: On Windows, this command changes to the PyMuPDF source directory and uses the py launcher with -m pip to build and install PyMuPDF specifically for the Python 3.9 interpreter.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/installation.rst#_snippet_8

LANGUAGE: cmd
CODE:
```
cd PyMuPDF && py -3.9 -m pip install .
```

----------------------------------------

TITLE: Listing Optional Content Groups by Status in PyMuPDF
DESCRIPTION: This method retrieves a dictionary detailing the status of optional content groups (OCGs) within a specified configuration layer. The returned dictionary categorizes OCGs into 'on', 'off', and 'rbgroups' lists based on their current visibility state.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_6

LANGUAGE: Python
CODE:
```
pprint(doc.get_layer())
```

----------------------------------------

TITLE: Accessing the PDF File Trailer in PyMuPDF (Python)
DESCRIPTION: This snippet illustrates how to retrieve the PDF file trailer, a dictionary located at the end of the file containing crucial metadata and pointers. It can be accessed via `doc.pdf_trailer()` or by using `doc.xref_object(-1)`, providing details such as the cross-reference table size, root catalog, and file ID.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_4

LANGUAGE: Python
CODE:
```
import pymupdf
doc=pymupdf.open("PyMuPDF.pdf")
print(doc.xref_object(-1))  # or: print(doc.pdf_trailer())
```

----------------------------------------

TITLE: Perform Operations with Point-like Tuples in PyMuPDF Python
DESCRIPTION: Shows that PyMuPDF Point objects can interact with tuples of numbers of the same length using arithmetic operators like addition and in-place addition (`+=`). This allows treating sequences of numbers as "like" objects for operations.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/algebra.rst#_snippet_4

LANGUAGE: Python
CODE:
```
>>> p1 + p2
Point(4712.0, 3143.0)
>>> p1 + (4711, 3141)
Point(4712.0, 3143.0)
>>> p1 += (4711, 3141)
>>> p1
Point(4712.0, 3143.0)
>>>
```

----------------------------------------

TITLE: Listing All Available Color Names in PyMuPDF (Python)
DESCRIPTION: This example shows how to import and use the `getColorList` function from `pymupdf.utils`. Calling this function returns a list of all predefined color names available in the PyMuPDF color database. The names are returned as uppercase strings.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/colors.rst#_snippet_1

LANGUAGE: Python
CODE:
```
# to get a list of all existing names
from pymupdf.utils import getColorList
cl = getColorList()
cl
```

----------------------------------------

TITLE: Default HTML Extraction Flags (PyMuPDF Constant)
DESCRIPTION: A combination of flags representing the default settings for extracting text as HTML. Includes preserving ligatures, whitespace, clipping to mediabox, preserving images, and using CID for unknown Unicode.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_24

LANGUAGE: Python
CODE:
```
TEXTFLAGS_HTML = TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_PRESERVE_IMAGES | TEXT_USE_CID_FOR_UNKNOWN_UNICODE
```

----------------------------------------

TITLE: PyMuPDF Color Definitions for Redaction
DESCRIPTION: This snippet illustrates the color definitions used in PyMuPDF for fill and text colors in redaction annotations. Colors are represented as RGB tuples, with common defaults like white for fill and black for text.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/page.rst#_snippet_11

LANGUAGE: Python
CODE:
```
white = (1, 1, 1)
black = (0, 0, 0)
```

----------------------------------------

TITLE: Example: Show PDF Info with Incorrect Password (Shell)
DESCRIPTION: Shows the output of the `pymupdf show` command when attempting to open a password-protected PDF with an incorrect password. The output indicates an authentication failure.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/module.rst#_snippet_10

LANGUAGE: Shell
CODE:
```
pymupdf show x.pdf -pass hugo
```

----------------------------------------

TITLE: Demonstrating PyMuPDF Object Invalidation (Page)
DESCRIPTION: Shows how setting a parent object (like a Page) to None invalidates its child objects (like Annotations). Accessing properties of the orphaned child object results in a RuntimeError.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app3.rst#_snippet_4

LANGUAGE: Python
CODE:
```
page = doc[n]
annot = page.first_annot
annot.type
page = None
annot.type
```

----------------------------------------

TITLE: Demonstrating PyMuPDF Object Invalidation (Immediate Deletion)
DESCRIPTION: Illustrates that creating a child object (Annotation) from a temporary parent object (Page obtained via `doc[n]`) immediately invalidates the child because the parent is garbage collected right after creation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app3.rst#_snippet_5

LANGUAGE: Python
CODE:
```
annot = doc[n].first_annot
annot.type
```

----------------------------------------

TITLE: Demonstrating PyMuPDF Cascading Invalidation (Document)
DESCRIPTION: Shows the cascading effect of invalidating the top-level document object (e.g., using `del doc` or `doc.close()`). All child objects like Pages and Annotations become orphaned and raise a RuntimeError when accessed.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/app3.rst#_snippet_6

LANGUAGE: Python
CODE:
```
doc = pymupdf.open("some.pdf")
page = doc[n]
annot = page.first_annot
page.rect
annot.type
del doc
page.rect
annot.type
```

----------------------------------------

TITLE: Retrieving PDF Dictionary Keys with PyMuPDF (Python)
DESCRIPTION: This snippet illustrates how to use `pymupdf.Document.xref_get_keys` to obtain a tuple of dictionary keys for a given xref number. It shows examples for a specific page's xref and the special `-1` xref for the PDF trailer, printing the results using `pprint`.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_13

LANGUAGE: Python
CODE:
```
from pprint import pprint
import pymupdf
doc=pymupdf.open("pymupdf.pdf")
xref = doc.page_xref(0)  # xref of page 0
pprint(doc.xref_get_keys(xref))  # primary level keys of a page
pprint(doc.xref_get_keys(-1))  # primary level keys of the trailer
```

----------------------------------------

TITLE: Iterating through the PDF xref Table in PyMuPDF
DESCRIPTION: This snippet demonstrates how to loop through a PDF's cross-reference (xref) table using PyMuPDF. It skips the reserved entry '0' and prints the definition and stream status for each object. The xref table lists all objects in the file, which can be very large.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_0

LANGUAGE: Python
CODE:
```
xreflen = doc.xref_length()  # length of objects table
for xref in range(1, xreflen):  # skip item 0!
    print("")
    print("object %i (stream: %s)" % (xref, doc.xref_is_stream(xref)))
    print(doc.xref_object(xref, compressed=False))
```

----------------------------------------

TITLE: Default Search Flags (PyMuPDF Constant)
DESCRIPTION: A combination of flags representing the default settings for text searching. Includes preserving whitespace, clipping to the mediabox, and attempting to dehyphenate words.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/vars.rst#_snippet_27

LANGUAGE: Python
CODE:
```
TEXTFLAGS_SEARCH = TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP | TEXT_DEHYPHENATE
```

----------------------------------------

TITLE: Extracting and Saving a Font with PyMuPDF
DESCRIPTION: This snippet demonstrates how to use the `doc.extract_font()` method to extract an embedded font file from a PDF document using its xref number. It retrieves the font's base name, extension, and binary content, then shows how to write this content to an external file, creating a usable font file.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/document.rst#_snippet_63

LANGUAGE: python
CODE:
```
name, ext, _, content = doc.extract_font(4711)
# assuming content is not None:
ofile = open(name + "." + ext, "wb")
ofile.write(content)
ofile.close()
```

----------------------------------------

TITLE: Attaching File Annotation with PyMuPDF (Partial) - Python
DESCRIPTION: Demonstrates how to add a file annotation to a specific point on a page using `page.add_file_annot`. It shows preparing the point and the file data. Note that this snippet assumes `page` and `attachment` objects are already defined.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/the-basics.rst#_snippet_12

LANGUAGE: Python
CODE:
```
point = pymupdf.Point(100, 100) # create the point where you want to add the attachment
attachment_data = attachment.tobytes() # get the document byte data as a buffer

# add the file annotation with the point, data and the file name
file_annotation = page.add_file_annot(point, attachment_data, "attachment.pdf")

doc.save("document-with-attachment.pdf") # save the document
```

----------------------------------------

TITLE: Calculating Text and Character Lengths in PyMuPDF
DESCRIPTION: Demonstrates how to calculate the total length of a string using Font.text_length and pymupdf.get_text_length, and how to get the length of individual characters using Font.char_lengths. Shows that the sum of character lengths equals the total text length.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/font.rst#_snippet_3

LANGUAGE: Python
CODE:
```
font = pymupdf.Font("helv")
text = "PyMuPDF"
font.text_length(text)
pymupdf.get_text_length(text, fontname="helv")
sum(font.char_lengths(text))
```

----------------------------------------

TITLE: Accessing Single PDF Object Key Value with PyMuPDF
DESCRIPTION: Demonstrates how to directly access the value of a specific key within a PDF object using `doc.xref_get_key()`. The method returns the value as a string along with type information, aiding in its proper interpretation.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_12

LANGUAGE: Python
CODE:
```
doc.xref_get_key(page.xref, "MediaBox")
```

----------------------------------------

TITLE: Setting a New Key in a PDF Page XREF in PyMuPDF
DESCRIPTION: This snippet demonstrates how to add or modify a key-value pair in a PDF page's cross-reference (xref) dictionary using PyMuPDF. It first checks if the "Rotate" key exists, then sets its value to "90" using `doc.xref_set_key()`, and finally prints the updated xref object to confirm the change. This method can introduce new properties to a PDF object.
SOURCE: https://github.com/pymupdf/pymupdf/blob/main/docs/recipes-low-level-interfaces.rst#_snippet_14

LANGUAGE: Python
CODE:
```
doc.xref_get_key(page.xref, "Rotate")
doc.xref_set_key(page.xref, "Rotate", "90")
print(doc.xref_object(page.xref))
```