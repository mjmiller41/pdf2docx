TITLE: Adding a Paragraph to a Document (Python)
DESCRIPTION: Adds a new paragraph containing the specified text to the end of the document and returns a reference to the newly added paragraph.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_1

LANGUAGE: Python
CODE:
```
paragraph = document.add_paragraph('Lorem ipsum dolor sit amet.')
```

----------------------------------------

TITLE: Create and Read a .docx File (Python)
DESCRIPTION: Demonstrates the basic usage of the python-docx library to create a new document, add text, save it to a file, and then open the saved file to read its content.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/README.md#_snippet_1

LANGUAGE: python
CODE:
```
>>> from docx import Document

>>> document = Document()
>>> document.add_paragraph("It was a dark and stormy night.")
<docx.text.paragraph.Paragraph object at 0x10f19e760>
>>> document.save("dark-and-stormy.docx")

>>> document = Document("dark-and-stormy.docx")
>>> document.paragraphs[0].text
'It was a dark and stormy night.'
```

----------------------------------------

TITLE: Opening a New Document with python-docx (Python)
DESCRIPTION: Demonstrates how to create a new Word document using the built-in default template by initializing the `Document` class without arguments and saving it to a file named 'test.docx'.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/documents.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx import Document

document = Document()
document.save('test.docx')
```

----------------------------------------

TITLE: Opening and Saving an Existing Document with python-docx (Python)
DESCRIPTION: Shows how to open an existing Word document by passing the filename to the `Document` constructor and then saving it to a potentially different filename. This method supports Word 2007 and later (.docx) files.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/documents.rst#_snippet_1

LANGUAGE: Python
CODE:
```
document = Document('existing-document-file.docx')
document.save('new-file-name.docx')
```

----------------------------------------

TITLE: Opening a Document with python-docx (Python)
DESCRIPTION: Imports the `Document` class from the `docx` library and creates a new, blank document object based on the default template.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx import Document

document = Document()
```

----------------------------------------

TITLE: Creating a Basic Word Document with python-docx
DESCRIPTION: This snippet demonstrates how to use the python-docx library to create a new Word document. It shows how to add headings, paragraphs with bold and italic text, bulleted and numbered lists, insert a picture, create and populate a table, add a page break, and save the document to a file. Requires the 'python-docx' library.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/index.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx import Document
from docx.shared import Inches

document = Document()

document.add_heading('Document Title', 0)

p = document.add_paragraph('A plain paragraph having some ')
p.add_run('bold').bold = True
p.add_run(' and some ')
p.add_run('italic.').italic = True

document.add_heading('Heading, level 1', level=1)
document.add_paragraph('Intense quote', style='Intense Quote')

document.add_paragraph(
    'first item in unordered list', style='List Bullet'
)
document.add_paragraph(
    'first item in ordered list', style='List Number'
)

document.add_picture('monty-truth.png', width=Inches(1.25))

records = (
    (3, '101', 'Spam'),
    (7, '422', 'Eggs'),
    (4, '631', 'Spam, spam, eggs, and spam')
)

table = document.add_table(rows=1, cols=3)
hdr_cells = table.rows[0].cells
hdr_cells[0].text = 'Qty'
hdr_cells[1].text = 'Id'
hdr_cells[2].text = 'Desc'
for qty, id, desc in records:
    row_cells = table.add_row().cells
    row_cells[0].text = str(qty)
    row_cells[1].text = id
    row_cells[2].text = desc

document.add_page_break()

document.save('demo.docx')
```

----------------------------------------

TITLE: Accessing Style by Name (Python)
DESCRIPTION: Shows how to retrieve a specific style object from the Styles collection using dictionary-style access with the style's English name as the key.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_1

LANGUAGE: Python
CODE:
```
styles['Normal']
```

----------------------------------------

TITLE: Accessing Table Cells in python-docx
DESCRIPTION: Demonstrates the three primary ways to access a specific cell within a table using Table.cell(), Row.cells, and Column.cells. Shows that these methods return the same cell object for a given grid position. Requires a document object and a table added to it.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> table = document.add_table(3, 3)
>>> middle_cell = table.cell(1, 1)
>>> table.rows[1].cells[1] == middle_cell
True
>>> table.columns[1].cells[1] == middle_cell
True
```

----------------------------------------

TITLE: Setting Text Content of a Table Cell (Python)
DESCRIPTION: Assigns the specified string value as the text content of the table cell object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_8

LANGUAGE: Python
CODE:
```
cell.text = 'parrot, possibly dead'
```

----------------------------------------

TITLE: Applying a Paragraph Style After Creation in python-docx
DESCRIPTION: This snippet shows an alternative way to apply a paragraph style. A paragraph is created first, and then its `style` attribute is set to the desired style name string.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_19

LANGUAGE: Python
CODE:
```
paragraph = document.add_paragraph('Lorem ipsum dolor sit amet.')
paragraph.style = 'List Bullet'
```

----------------------------------------

TITLE: Setting Paragraph Alignment (python-docx) - Python
DESCRIPTION: Shows how to access the `ParagraphFormat` object and set the `alignment` property using values from the `WD_ALIGN_PARAGRAPH` enumeration. It also shows how to check the current alignment.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx.enum.text import WD_ALIGN_PARAGRAPH
document = Document()
paragraph = document.add_paragraph()
paragraph_format = paragraph.paragraph_format

paragraph_format.alignment
paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
paragraph_format.alignment
```

----------------------------------------

TITLE: Install python-docx with pip
DESCRIPTION: Installs the python-docx library using the pip package installer. This is the recommended method and automatically handles dependencies.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/install.rst#_snippet_0

LANGUAGE: bash
CODE:
```
pip install python-docx
```

----------------------------------------

TITLE: Populating Table Cells in python-docx
DESCRIPTION: This snippet demonstrates how to access table cells by row and column index and assign text content to them. It also shows how to iterate through data items and add new rows to the table, populating the cells in each new row.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_14

LANGUAGE: Python
CODE:
```
heading_cells = table.rows[0].cells
heading_cells[0].text = 'Qty'
heading_cells[1].text = 'SKU'
heading_cells[2].text = 'Description'

# add a data row for each item
for item in items:
    cells = table.add_row().cells
    cells[0].text = str(item.qty)
    cells[1].text = item.sku
    cells[2].text = item.desc
```

----------------------------------------

TITLE: Adding Inline Picture using python-docx API
DESCRIPTION: Demonstrates the Python API method `add_picture` on a run object to insert an inline image. It shows how to get a run, add the picture using a file-like object, and set the width and height of the resulting inline shape.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> run = paragraph.add_run()
>>> inline_shape = run.add_picture(file_like_image, MIME_type=None)
>>> inline_shape.width = width
>>> inline_shape.height = height
```

----------------------------------------

TITLE: Adding a Hard Page Break (Python)
DESCRIPTION: Inserts a hard page break at the current position in the document, forcing subsequent content onto a new page.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_5

LANGUAGE: Python
CODE:
```
document.add_page_break()
```

----------------------------------------

TITLE: Opening and Saving a File-Like Document with python-docx (Python)
DESCRIPTION: Illustrates how to open a document from and save a document to a file-like object (such as an open file handle or a StringIO/BytesIO stream). The source stream must be opened in binary read mode ('rb').
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/documents.rst#_snippet_2

LANGUAGE: Python
CODE:
```
f = open('foobar.docx', 'rb')
document = Document(f)
f.close()

# or

with open('foobar.docx', 'rb') as f:
    source_stream = StringIO(f.read())
document = Document(source_stream)
source_stream.close()
...
target_stream = StringIO()
document.save(target_stream)
```

----------------------------------------

TITLE: Adding a Picture with Specified Width in python-docx
DESCRIPTION: This example shows how to add a picture and control its size by specifying the desired width. It requires importing measurement units like `Inches` from `docx.shared`. Specifying one dimension allows python-docx to calculate the other while preserving the aspect ratio.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_17

LANGUAGE: Python
CODE:
```
from docx.shared import Inches

document.add_picture('image-filename.png', width=Inches(1.0))
```

----------------------------------------

TITLE: Adding a Heading with Specific Level (Python)
DESCRIPTION: Adds a new heading paragraph with the specified text and applies the specified heading level (1-9). Level 0 adds a 'Title' paragraph.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_4

LANGUAGE: Python
CODE:
```
document.add_heading('The role of dolphins', level=2)
```

----------------------------------------

TITLE: Accessing and Modifying Inline Shape Dimensions (Python)
DESCRIPTION: This snippet demonstrates how to access the first inline shape in a collection, verify its type, retrieve its current width and height, and then set new dimensions using the `width` and `height` properties. It shows the interactive output confirming the changes.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/shapes-inline-size.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> inline_shape = inline_shapes[0]
>>> assert inline_shape.type == MSO_SHAPE_TYPE.PICTURE
>>> inline_shape.width
914400
>>> inline_shape.height
457200
>>> inline_shape.width = 457200
>>> inline_shape.height = 228600
>>> inline_shape.width, inline_shape.height
457200, 228600
```

----------------------------------------

TITLE: Add Explicit Header Definition in python-docx (Python)
DESCRIPTION: Demonstrates how to check the default state of `is_linked_to_previous` for a header object and how to assign `False` to this property to add an explicit header definition for the section. This action stops the section from inheriting the header content from a previous section.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/hdrftr.rst#_snippet_4

LANGUAGE: Python
CODE:
```
>>> header.is_linked_to_previous
True
>>> header.is_linked_to_previous = False
>>> header.is_linked_to_previous
False
```

----------------------------------------

TITLE: Setting Paragraph Alignment in python-docx (Python)
DESCRIPTION: Demonstrates how to import the WD_ALIGN_PARAGRAPH enumeration and set the alignment of a paragraph to center using python-docx. Requires a 'document' object to be initialized.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdAlignParagraph.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx.enum.text import WD_ALIGN_PARAGRAPH

paragraph = document.add_paragraph()
paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
```

----------------------------------------

TITLE: Set Run Character Style by Name (python-docx) - Python
DESCRIPTION: Shows how to apply a character style to a run by assigning the style's name string (e.g., 'Emphasis') to the `run.style` property.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_1

LANGUAGE: python
CODE:
```
run.style = 'Emphasis'
run.style.name
```

----------------------------------------

TITLE: Accessing and Setting Page Margins in python-docx
DESCRIPTION: Demonstrates how to access and modify various margin properties of a `Section` object, including left, right, top, bottom, gutter, header distance, and footer distance. It shows how to use the `Inches` helper for setting margin values. Requires a `Section` object and the `Inches` class from `docx.shared`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/sections.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from docx.shared import Inches
section.left_margin, section.right_margin
section.top_margin, section.bottom_margin
section.gutter
section.header_distance, section.footer_distance
section.left_margin = Inches(1.5)
section.right_margin = Inches(1)
section.left_margin, section.right_margin
```

----------------------------------------

TITLE: Adding a Table to a Document (Python)
DESCRIPTION: Adds a new table with the specified number of rows and columns to the end of the document and returns a reference to the table object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_6

LANGUAGE: Python
CODE:
```
table = document.add_table(rows=2, cols=2)
```

----------------------------------------

TITLE: Applying Style by Object Assignment (Python)
DESCRIPTION: Shows how to apply an existing style to a paragraph by assigning a style object obtained from document.styles to the paragraph's .style attribute. It also demonstrates checking the initial and final style name.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_3

LANGUAGE: Python
CODE:
```
document = Document()
paragraph = document.add_paragraph()
paragraph.style
paragraph.style.name
paragraph.style = document.styles['Heading 1']
paragraph.style.name
```

----------------------------------------

TITLE: Accessing Sections in python-docx
DESCRIPTION: Demonstrates how to access the sections collection of a Document object, check the number of sections, retrieve a specific section by index, and iterate through sections to inspect their start types. Requires a `Document` object instance.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/sections.rst#_snippet_0

LANGUAGE: Python
CODE:
```
document = Document()
sections = document.sections
sections
len(sections)
section = sections[0]
section
for section in sections:
    print(section.start_type)
```

----------------------------------------

TITLE: Adding Runs to a Paragraph in python-docx
DESCRIPTION: This code illustrates how to add multiple 'runs' to a single paragraph. Runs are used to apply character-level formatting like bold or italic. Text is added to the paragraph in segments using the `add_run` method.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_20

LANGUAGE: Python
CODE:
```
paragraph = document.add_paragraph('Lorem ipsum ')
paragraph.add_run('dolor sit amet.')
```

----------------------------------------

TITLE: Demonstrating Tri-State Boolean Run Property in Python-docx
DESCRIPTION: This interactive Python session demonstrates how to access and modify a boolean run property, specifically 'bold', showing its tri-state behavior. It shows querying the initial state (None), setting it to True, then False, and finally back to None, observing the value after each change.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> run = p.add_run()
>>> run.bold
None
>>> run.bold = True
>>> run.bold
True
>>> run.bold = False
>>> run.bold
False
>>> run.bold = None
>>> run.bold
None
```

----------------------------------------

TITLE: Creating Paragraph Style with Formatting (python-docx) - Python
DESCRIPTION: Provides an example of adding a new paragraph style to a document and configuring its formatting properties, including indentation, spacing, and widow/orphan control.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_15

LANGUAGE: Python
CODE:
```
from docx.enum.style import WD_STYLE_TYPE
from docx.shared import Inches, Pt
document = Document()
style = document.styles.add_style('Indent', WD_STYLE_TYPE.PARAGRAPH)
paragraph_format = style.paragraph_format
paragraph_format.left_indent = Inches(0.25)
paragraph_format.first_line_indent = Inches(-0.25)
paragraph_format.space_before = Pt(12)
paragraph_format.widow_control = True
```

----------------------------------------

TITLE: Setting Font Name and Size in python-docx
DESCRIPTION: Shows how to set the font typeface and size for a run using the Font object's name and size properties. Requires importing Pt for size units.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_11

LANGUAGE: Python
CODE:
```
>>> from docx.shared import Pt
>>> font.name = 'Calibri'
>>> font.size = Pt(12)
```

----------------------------------------

TITLE: Applying Style by Name Assignment (Python)
DESCRIPTION: Demonstrates a shortcut for applying a style by assigning the style's English name (a string) directly to the paragraph's .style attribute. The library performs the lookup internally.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_4

LANGUAGE: Python
CODE:
```
paragraph.style = 'List Bullet'
paragraph.style
paragraph.style.name
```

----------------------------------------

TITLE: Iterate Paragraph Content with Hyperlinks Python
DESCRIPTION: Shows how to iterate through the contents of a paragraph, including both `Run` and `Hyperlink` objects, in their document order using `iter_inner_content()`. Useful for processing paragraph content sequentially. Requires a paragraph object. Returns an iterator yielding `Run` and `Hyperlink` objects.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_1

LANGUAGE: python
CODE:
```
list(paragraph.iter_inner_content())
[
  <docx.text.run.Run at 0x7f...>
  <docx.text.hyperlink.Hyperlink at 0x7f...>
  <docx.text.run.Run at 0x7f...>
]
```

----------------------------------------

TITLE: Adding Simple Text to a Section Header (python-docx)
DESCRIPTION: Shows how to add basic text content to the first paragraph of a section's header. This action automatically creates a header definition for the section, changing its `is_linked_to_previous` status to `False`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/hdrftr.rst#_snippet_1

LANGUAGE: python
CODE:
```
# Assuming 'header' object is obtained from a section
# from docx import Document
# document = Document()
# section = document.sections[0]
# header = section.header

paragraph = header.paragraphs[0]
paragraph.text = "Title of my document"

# After adding content, the header is no longer linked to previous
# print(header.is_linked_to_previous)
```

----------------------------------------

TITLE: Applying Style at Creation (Object) (Python)
DESCRIPTION: Demonstrates applying a style to a paragraph at creation time by passing a style object (obtained from document.styles) as the style argument to the document.add_paragraph() method.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_6

LANGUAGE: Python
CODE:
```
body_text_style = document.styles['Body Text']
paragraph = document.add_paragraph(style=body_text_style)
paragraph.style.name
```

----------------------------------------

TITLE: Setting Vertical Cell Alignment in python-docx (Python)
DESCRIPTION: This snippet demonstrates how to set the vertical alignment of a table cell using the WD_ALIGN_VERTICAL enumeration. It imports the required enumeration and applies the BOTTOM alignment to the first cell (0, 0) of a table. Requires a 'document' object and a 'table' object to be defined.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdCellVerticalAlignment.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx.enum.table import WD_ALIGN_VERTICAL

table = document.add_table(3, 3)
table.cell(0, 0).vertical_alignment = WD_ALIGN_VERTICAL.BOTTOM
```

----------------------------------------

TITLE: Setting Paragraph Line Spacing (Absolute/Relative) in python-docx Python
DESCRIPTION: Demonstrates setting line spacing using the line_spacing property. It shows setting it to an absolute value using Pt and a relative value using a float, which affects the line_spacing_rule.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_9

LANGUAGE: Python
CODE:
```
>>> from docx.shared import Length
>>> paragraph_format.line_spacing
None
>>> paragraph_format.line_spacing_rule
None

>>> paragraph_format.line_spacing = Pt(18)
>>> isinstance(paragraph_format.line_spacing, Length)
True
>>> paragraph_format.line_spacing.pt
18.0
>>> paragraph_format.line_spacing_rule
EXACTLY (4)

>>> paragraph_format.line_spacing = 1.75
>>> paragraph_format.line_spacing
1.75
>>> paragraph_format.line_spacing_rule
MULTIPLE (5)
```

----------------------------------------

TITLE: Iterate Paragraph Run-Level Items Python
DESCRIPTION: Demonstrates iterating through all run-level items within a paragraph, including both `Run` objects and `Hyperlink` objects, using the `paragraph.iter_run_level_items()` method. This is useful for processing all inline content sequentially. Requires a paragraph object. Returns an iterator yielding `Run` and `Hyperlink` objects.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_13

LANGUAGE: python
CODE:
```
paragraph = document.add_paragraph('A paragraph having a link to: ')
>>> paragraph.add_hyperlink(text='github', address='http://github.com')
>>> [item for item in paragraph.iter_run_level_items()]:
[<docx.text.paragraph.Run at 0x7fd...>, <docx.text.paragraph.Hyperlink at 0x7fe...>]
```

----------------------------------------

TITLE: Adding a Top-Level Heading (Python)
DESCRIPTION: Adds a new heading paragraph with the specified text to the end of the document. By default, this creates a 'Heading 1' style heading.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_3

LANGUAGE: Python
CODE:
```
document.add_heading('The REAL meaning of the universe')
```

----------------------------------------

TITLE: Accessing Style by Name or ID
DESCRIPTION: Illustrates how to retrieve a specific style from the collection using its name or style ID. Attempting to access a non-existent style raises a KeyError.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/styles.rst#_snippet_2

LANGUAGE: python
CODE:
```
>>> styles['Normal']
<docx.styles.style._ParagraphStyle object at 0x1045dd550>

>>> styles['undefined-style']
KeyError: no style with id or name 'undefined-style'
```

----------------------------------------

TITLE: Set Run Character Style by Object (python-docx) - Python
DESCRIPTION: Illustrates how to apply a character style to a run by assigning a style object (obtained from `document.styles`) to the `run.style` property.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_2

LANGUAGE: python
CODE:
```
run.style = document.styles['Strong']
run.style.name
```

----------------------------------------

TITLE: Getting and Setting Paragraph Indentation in python-docx
DESCRIPTION: Demonstrates how to access and modify the left, right, and first line indentation properties of a paragraph's format object using the python-docx library. Shows how to set values using Pt (points) and Inches and retrieve the value in points.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_6

LANGUAGE: python
CODE:
```
>>> paragraph_format.left_indent
None
>>> paragraph_format.right_indent
None
>>> paragraph_format.first_line_indent
None

>>> paragraph_format.left_indent = Pt(36)
>>> paragraph_format.left_indent.pt
36.0

>>> paragraph_format.right_indent = Inches(0.25)
>>> paragraph_format.right_indent.pt
18.0

>>> paragraph_format.first_line_indent = Pt(-18)
>>> paragraph_format.first_line_indent.pt
-18.0
```

----------------------------------------

TITLE: Setting Paragraph Left Indent (python-docx) - Python
DESCRIPTION: Illustrates how to set the `left_indent` property of a paragraph's `ParagraphFormat` using a `Length` value created with `Inches`. It also shows how to retrieve the set value and access it in inches.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from docx.shared import Inches
paragraph = document.add_paragraph()
paragraph_format = paragraph.paragraph_format

paragraph_format.left_indent
paragraph_format.left_indent = Inches(0.5)
paragraph_format.left_indent
paragraph_format.left_indent.inches
```

----------------------------------------

TITLE: Set Paragraph Spacing Before in python-docx (Python)
DESCRIPTION: Shows how to access and modify the space_before attribute of a paragraph's format using python-docx. It demonstrates setting the spacing using the Pt (points) helper and retrieving the value. Requires access to a document's styles and paragraph format.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> paragraph_format = document.styles['Normal'].paragraph_format
>>> paragraph_format.space_before
None
>>> paragraph_format.space_before = Pt(12)
>>> paragraph_format.space_before.pt
12.0
```

----------------------------------------

TITLE: Setting Paragraph Spacing (Before/After) in python-docx Python
DESCRIPTION: Shows how to set the spacing before and after a paragraph using the space_before and space_after properties. Spacing is specified using a Length object, typically Pt.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_8

LANGUAGE: Python
CODE:
```
>>> paragraph_format.space_before, paragraph_format.space_after
(None, None)  # inherited by default

>>> paragraph_format.space_before = Pt(18)
>>> paragraph_format.space_before.pt
18.0

>>> paragraph_format.space_after = Pt(12)
>>> paragraph_format.space_after.pt
12.0
```

----------------------------------------

TITLE: Applying Style at Creation (Name) (Python)
DESCRIPTION: Shows how to apply a style to a paragraph when it is created using the document.add_paragraph() method by passing the style's English name as the style argument.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_5

LANGUAGE: Python
CODE:
```
paragraph = document.add_paragraph(style='Body Text')
paragraph.style.name
```

----------------------------------------

TITLE: Iterating Through Table Rows and Cells (Python)
DESCRIPTION: Demonstrates how to iterate through all rows in a table and then through all cells within each row, printing the text content of each cell.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_10

LANGUAGE: Python
CODE:
```
for row in table.rows:
    for cell in row.cells:
        print(cell.text)
```

----------------------------------------

TITLE: Applying a Pre-formatted Table Style in python-docx
DESCRIPTION: This code shows how to apply one of Word's built-in pre-formatted table styles to a table object. The style is specified as a string, typically the style name with spaces removed.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_15

LANGUAGE: Python
CODE:
```
table.style = 'LightShading-Accent1'
```

----------------------------------------

TITLE: Setting Underline Property in python-docx
DESCRIPTION: Explains how to apply underlining to a run. True applies single underline, while specific types require members of the WdUnderline enumeration.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_13

LANGUAGE: Python
CODE:
```
>>> font.underline
None
>>> font.underline = True
>>> # or perhaps
>>> font.underline = WD_UNDERLINE.DOT_DASH
```

----------------------------------------

TITLE: Set Paragraph Alignment in python-docx (Python)
DESCRIPTION: Demonstrates how to get and set the alignment property of a paragraph using the python-docx library. It shows how to assign a specific alignment value (like WD_ALIGN_PARAGRAPH.RIGHT) and how to reset it to None to inherit from the style. Requires a paragraph object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> paragraph = body.add_paragraph()
>>> paragraph.alignment
None
>>> paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
>>> paragraph.alignment
RIGHT (2)
>>> paragraph.alignment = None
>>> paragraph.alignment
None
```

----------------------------------------

TITLE: Accessing Built-in Word Styles using python-docx
DESCRIPTION: This snippet demonstrates how to import the necessary classes and the WD_STYLE enumeration from the python-docx library, create a new document, access its style collection, and retrieve a specific built-in style (BODY_TEXT) using the enumeration member.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdBuiltinStyle.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx import Document
from docx.enum.style import WD_STYLE

document = Document()
styles = document.styles
style = styles[WD_STYLE.BODY_TEXT]
```

----------------------------------------

TITLE: Accessing Section Header and Checking Link Status (python-docx)
DESCRIPTION: Demonstrates how to obtain the header object for a specific section in a python-docx document and check its initial `is_linked_to_previous` status, which indicates if the section has its own header definition or inherits from the previous section.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/hdrftr.rst#_snippet_0

LANGUAGE: python
CODE:
```
from docx import Document

document = Document()
section = document.sections[0]
header = section.header

# The header object is always present
# print(header)

# Initially, a new section's header is linked to previous (or has no definition)
# print(header.is_linked_to_previous)
```

----------------------------------------

TITLE: Accessing Document Styles (Python)
DESCRIPTION: Demonstrates how to get the Styles object from a Document object using the .styles attribute. This object provides access to all styles defined in the document.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_0

LANGUAGE: Python
CODE:
```
document = Document()
styles = document.styles
styles
```

----------------------------------------

TITLE: Setting Font Highlight Color in python-docx
DESCRIPTION: Demonstrates how to set and retrieve the highlight color for a run's font using the `highlight_color` property and members of the `WD_COLOR_INDEX` enumeration. Shows setting to YELLOW, TURQUOISE, and resetting to None.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-highlight-color.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> font = paragraph.add_run().font
>>> font.highlight_color
None
>>> font.highlight_color = WD_COLOR_INDEX.YELLOW
>>> font.highlight_color
YELLOW (7)
>>> font.highlight_color = WD_COLOR_INDEX.TURQUOISE
>>> font.highlight_color
TURQUOISE (3)
>>> font.highlight_color = None
>>> font.highlight_color
None
```

----------------------------------------

TITLE: Setting Vertical Alignment for a docx Table Cell (Python)
DESCRIPTION: Demonstrates how to access a table cell from a row, check its initial vertical alignment (which is None by default), and set the vertical alignment using the `WD_CELL_ALIGN_VERTICAL` enumeration.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> from docx.enum.table import WD_CELL_ALIGN_VERTICAL
>>> cell = table.add_row().cells[0]
>>> cell
<docx.table._Cell object at 0x...>
>>> cell.vertical_alignment
None
>>> cell.vertical_alignment = WD_CELL_ALIGN_VERTICAL.CENTER
>>> print(cell.vertical_alignment)
CENTER (1)
```

----------------------------------------

TITLE: Setting Base Style (Python)
DESCRIPTION: Shows how to set the base style from which a newly added style inherits formatting. This is done by assigning an existing style object to the new style's base_style attribute.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_8

LANGUAGE: Python
CODE:
```
style.base_style
style.base_style = styles['Normal']
style.base_style
style.base_style.name
```

----------------------------------------

TITLE: Set Line Spacing in python-docx (Python)
DESCRIPTION: Illustrates how to set line spacing on a paragraph format object in python-docx. It shows setting spacing using points (Pt), single line multiplier (1), and multiple line multiplier (0.9), demonstrating how the line_spacing_rule changes accordingly. Requires a paragraph format object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_3

LANGUAGE: Python
CODE:
```
>>> paragraph_format.line_spacing, paragraph_format.line_spacing_rule
(None, None)

>>> paragraph_format.line_spacing = Pt(18)
>>> paragraph_format.line_spacing, paragraph_format.line_spacing_rule
(228600, WD_LINE_SPACING.EXACTLY (4))

>>> paragraph_format.line_spacing = 1
>>> paragraph_format.line_spacing, paragraph_format.line_spacing_rule
(152400, WD_LINE_SPACING.SINGLE (0))

>>> paragraph_format.line_spacing = 0.9
>>> paragraph_format.line_spacing, paragraph_format.line_spacing_rule
(137160, WD_LINE_SPACING.MULTIPLE (5))
```

----------------------------------------

TITLE: Accessing Document Settings in python-docx
DESCRIPTION: Demonstrates how to access the document-level settings object using the `.settings` property of a `Document` instance in the `python-docx` library. This property returns a `Settings` object which proxies access to the `settings.xml` part.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> document = Document()
>>> document.settings
<docx.settings.Settings object at 0xdeadbeef4>
```

----------------------------------------

TITLE: Getting and Setting Paragraph Page Placement Properties in python-docx
DESCRIPTION: Demonstrates how to access and modify page placement properties like keep_with_next, keep_together, page_break_before, and widow_control on a paragraph's format object using python-docx. These are tri-state boolean properties (True, False, None for inherit).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_9

LANGUAGE: python
CODE:
```
>>> paragraph_format.keep_with_next
None
>>> paragraph_format.keep_together
None
>>> paragraph_format.page_break_before
None
>>> paragraph_format.widow_control
None

>>> paragraph_format.keep_with_next = True
>>> paragraph_format.keep_with_next
True

>>> paragraph_format.keep_together = False
>>> paragraph_format.keep_together
False

>>> paragraph_format.page_break_before = True
>>> paragraph_format.widow_control = None
```

----------------------------------------

TITLE: Setting Font Underline Property (python-docx) - Python
DESCRIPTION: Explains how to set the underline property of a font, covering the tri-state behavior (True/None) for single underline and using the `WD_UNDERLINE` enumeration for other types.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_14

LANGUAGE: Python
CODE:
```
font.underline
None
font.underline = True
# or perhaps
font.underline = WD_UNDERLINE.DOT_DASH
```

----------------------------------------

TITLE: Setting Paragraph First-Line Indent (python-docx) - Python
DESCRIPTION: Explains how to set the `first_line_indent` property of a paragraph's `ParagraphFormat` using a `Length` value. It highlights that negative values create a hanging indent and shows how to retrieve the value in inches.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_3

LANGUAGE: Python
CODE:
```
paragraph_format.first_line_indent
paragraph_format.first_line_indent = Inches(-0.25)
paragraph_format.first_line_indent
paragraph_format.first_line_indent.inches
```

----------------------------------------

TITLE: Adding a Picture to a Document in python-docx
DESCRIPTION: This snippet demonstrates the basic method for adding an image to a document. It takes the path to an image file as an argument. The image will be inserted at its native size by default.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_16

LANGUAGE: Python
CODE:
```
document.add_picture('image-filename.png')
```

----------------------------------------

TITLE: Accessing Table Row and Cells by Index (Python)
DESCRIPTION: Retrieves a specific row from the table using its zero-based index, then accesses individual cells within that row by their zero-based column index to set their text content.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_9

LANGUAGE: Python
CODE:
```
row = table.rows[1]
row.cells[0].text = 'Foo bar to you.'
row.cells[1].text = 'And a hearty foo bar to you too sir!'
```

----------------------------------------

TITLE: Accessing Font Object from Run (Python)
DESCRIPTION: Demonstrates how to access the Font object associated with a Run object in python-docx. It shows the typical pattern of getting a Run from a Paragraph and then accessing its font property, verifying the object types.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> from docx import Document
>>> from docx.text.run import Font, Run
>>> run = Document().add_paragraph().add_run()
>>> isinstance(run, Run)
True
>>> font = run.font
>>> isinstance(font, Font)
True
```

----------------------------------------

TITLE: Setting Font Typeface and Size (python-docx) - Python
DESCRIPTION: Demonstrates how to set the font name (typeface) and size using `docx.shared.Pt` for a font object obtained from a style.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_12

LANGUAGE: Python
CODE:
```
from docx.shared import Pt
font.name = 'Calibri'
font.size = Pt(12)
```

----------------------------------------

TITLE: Changing Page Orientation and Dimensions in python-docx
DESCRIPTION: Illustrates how to retrieve and modify the page orientation, width, and height properties of a `Section` object. It shows how to swap width and height to change orientation from portrait to landscape. Requires a `Section` object and the `WD_ORIENT` enumeration.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/sections.rst#_snippet_3

LANGUAGE: Python
CODE:
```
section.orientation, section.page_width, section.page_height
new_width, new_height = section.page_height, section.page_width
section.orientation = WD_ORIENT.LANDSCAPE
section.page_width = new_width
section.page_height = new_height
section.orientation, section.page_width, section.page_height
```

----------------------------------------

TITLE: Get Hyperlink Address Python
DESCRIPTION: Demonstrates accessing the external address (URL or file path) of a hyperlink using the `.address` property. Requires a `Hyperlink` object. Returns a string containing the address, or an empty string for internal links.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_2

LANGUAGE: python
CODE:
```
hyperlink.address
'https://google.com/'
```

----------------------------------------

TITLE: Merging Two Cells Diagonally in python-docx
DESCRIPTION: Shows how to perform a basic cell merge operation by calling the merge() method on one cell, passing another cell as an argument. This merges the rectangular region defined by the two diagonal cells. Requires a table and two cell objects.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> table = document.add_table(3, 3)
>>> a = table.cell(0, 0)
>>> b = table.cell(1, 1)
>>> A = a.merge(b)
```

----------------------------------------

TITLE: Accessing Style Font Attribute (Python)
DESCRIPTION: Provides the initial setup code for accessing the font properties of a style, showing how to import Document and create a document object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_10

LANGUAGE: Python
CODE:
```
from docx import Document
document = Document()
```

----------------------------------------

TITLE: Configure Odd/Even Headers (python-docx)
DESCRIPTION: Shows how to enable or disable different headers for odd and even pages using the `odd_and_even_pages_header_footer` property on the document settings object in python-docx. It also checks the link status of the even page header.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_6

LANGUAGE: Python
CODE:
```
>>> document.settings.odd_and_even_pages_header_footer
False
>>> document.settings.odd_and_even_pages_header_footer = True
>>> section.even_page_header.is_linked_to_previous
True
```

----------------------------------------

TITLE: Demonstrating Tri-State Font Properties (python-docx) - Python
DESCRIPTION: Illustrates the use of tri-state properties (True, False, None) for font attributes like bold and italic, showing how to set and check their values.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_13

LANGUAGE: Python
CODE:
```
font.bold, font.italic
(None, None)
font.italic = True
font.italic
True
font.italic = False
font.italic
False
font.italic = None
font.italic
None
```

----------------------------------------

TITLE: Setting Paragraph Right Indent (python-docx) - Python
DESCRIPTION: Shows how to set the `right_indent` property of a paragraph's `ParagraphFormat` using a `Length` value created with `Pt`. It also demonstrates retrieving the set value and accessing it in points.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from docx.shared import Pt
paragraph_format.right_indent
paragraph_format.right_indent = Pt(24)
paragraph_format.right_indent
paragraph_format.right_indent.pt
```

----------------------------------------

TITLE: Adding a New Section in python-docx
DESCRIPTION: Shows how to add a new section to the end of a document using the `add_section` method. It illustrates how to specify the start type for the new section and verifies the change. Requires a `Document` object and the `WD_SECTION` enumeration.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/sections.rst#_snippet_1

LANGUAGE: Python
CODE:
```
current_section = document.sections[-1]  # last section in document
current_section.start_type
new_section = document.add_section(WD_SECTION.ODD_PAGE)
new_section.start_type
```

----------------------------------------

TITLE: Identifying Style Properties (Python)
DESCRIPTION: Demonstrates how to access basic identification properties of a style object in `python-docx`, including its name, ID, and type using the `name`, `style_id`, and `type` attributes.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_21

LANGUAGE: python
CODE:
```
>>> style = document.styles['Body Text']
>>> style.name
'Body Text'
>>> style.style_id
'BodyText'
>>> style.type
WD_STYLE_TYPE.PARAGRAPH (1)
```

----------------------------------------

TITLE: Setting Row Height and Rule in python-docx
DESCRIPTION: Demonstrates how to access and set the `height_rule` and `height` properties of a `docx.table._Row` object using the `WD_ROW_HEIGHT` enumeration and `Pt` measurement.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-row.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> from docx.enum.table import WD_ROW_HEIGHT
>>> row = table.add_row()
>>> row
<docx.table._Row object at 0x...>
>>> row.height_rule
None
>>> row.height_rule = WD_ROW_HEIGHT.EXACTLY
>>> row.height
None
>>> row.height = Pt(24)
```

----------------------------------------

TITLE: Access Hyperlinks in Paragraph Python
DESCRIPTION: Demonstrates how to retrieve a list of all hyperlink objects contained within a specific paragraph using the `.hyperlinks` property. Requires a paragraph object. Returns a list of `Hyperlink` objects.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_0

LANGUAGE: python
CODE:
```
hyperlinks = paragraph.hyperlinks
[<docx.text.hyperlink.Hyperlink at 0x7f...>]
```

----------------------------------------

TITLE: Setting Section Start Type in python-docx
DESCRIPTION: Explains how to get and set the `start_type` property of a `Section` object. This property determines the type of break preceding the section. Requires a `Section` object and members of the `WdSectionStart` enumeration (like `WD_SECTION.ODD_PAGE`).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/sections.rst#_snippet_2

LANGUAGE: Python
CODE:
```
section.start_type
section.start_type = WD_SECTION.ODD_PAGE
section.start_type
```

----------------------------------------

TITLE: Setting Tri-State Font Properties in python-docx
DESCRIPTION: Illustrates how to set tri-state font properties like bold and italic. These properties can be True, False, or None (for inheritance).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_12

LANGUAGE: Python
CODE:
```
>>> font.bold, font.italic
(None, None)
>>> font.italic = True
>>> font.italic
True
>>> font.italic = False
>>> font.italic
False
>>> font.italic = None
>>> font.italic
None
```

----------------------------------------

TITLE: Set Table Alignment in python-docx
DESCRIPTION: Demonstrates how to create a table and set its alignment property using the WD_TABLE_ALIGNMENT enumeration in python-docx.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-props.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> table = document.add_table(rows=2, cols=2)
>>> table.alignment
None
>>> table.alignment = WD_TABLE_ALIGNMENT.RIGHT
>>> table.alignment
RIGHT (2)
```

----------------------------------------

TITLE: Setting Page Orientation in python-docx
DESCRIPTION: This snippet demonstrates how to set the page orientation of the last section in a document using the WD_ORIENT enum from the python-docx library. It imports the necessary enum and assigns the desired orientation value (LANDSCAPE) to the section's orientation property.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdOrientation.rst#_snippet_0

LANGUAGE: python
CODE:
```
from docx.enum.section import WD_ORIENT

section = document.sections[-1]
section.orientation = WD_ORIENT.LANDSCAPE
```

----------------------------------------

TITLE: Setting Font Color using Theme Color Index (Python)
DESCRIPTION: Shows how assigning a theme color index (from MsoThemeColorIndex) to the color.theme_color property sets the font color to a theme color. This action automatically updates the color.type to MSO_COLOR_TYPE.THEME.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_6

LANGUAGE: Python
CODE:
```
>>> font.color.type
RGB (1)
>>> font.color.theme_color = MSO_THEME_COLOR.ACCENT_2
>>> font.color.type
THEME (2)
>>> font.color.theme_color
ACCENT_2 (6)
```

----------------------------------------

TITLE: Applying Underline Styles in python-docx (Python)
DESCRIPTION: Demonstrates how to get and set the underline property on a run object. It shows setting single underline with `True` or `WD_UNDERLINE.SINGLE`, setting other styles like `WD_UNDERLINE.DOUBLE`, and removing underline with `False`, `WD_UNDERLINE.NONE`, or `None`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/underline.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> run = paragraph.add_run()
>>> run.underline
None
>>> run.underline = True
>>> run.underline
True
>>> run.underline = WD_UNDERLINE.SINGLE
>>> run.underline
True
>>> run.underline = WD_UNDERLINE.DOUBLE
>>> str(run.underline)
DOUBLE (3)
>>> run.underline = False
>>> run.underline
False
>>> run.underline = WD_UNDERLINE.NONE
>>> run.underline
False
>>> run.underline = None
>>> run.underline
None
```

----------------------------------------

TITLE: Install python-docx Library (Shell)
DESCRIPTION: Installs the python-docx library using pip, the standard package installer for Python. This command should be run in your terminal or command prompt.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
pip install python-docx
```

----------------------------------------

TITLE: Adding a New Style to the Collection
DESCRIPTION: Provides an example of adding a new custom style to the styles collection using the add_style() method, specifying its name and type.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/styles.rst#_snippet_3

LANGUAGE: python
CODE:
```
>>> style = styles.add_style('Citation', WD_STYLE_TYPE.PARAGRAPH)
>>> style.name
'Citation'
>>> style.type
PARAGRAPH (1)
>>> style.builtin
False
```

----------------------------------------

TITLE: Inserting a Paragraph Before Another (Python)
DESCRIPTION: Inserts a new paragraph containing the specified text directly before the `paragraph` object and returns a reference to the new paragraph. Useful for modifying existing documents.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_2

LANGUAGE: Python
CODE:
```
prior_paragraph = paragraph.insert_paragraph_before('Lorem ipsum')
```

----------------------------------------

TITLE: Accessing Font Object in python-docx
DESCRIPTION: Demonstrates how to obtain the Font object associated with a Run, which is necessary for applying character formatting.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_10

LANGUAGE: Python
CODE:
```
>>> from docx import Document
>>> document = Document()
>>> run = document.add_paragraph().add_run()
>>> font = run.font
```

----------------------------------------

TITLE: Accessing and Modifying Core Document Properties (Python)
DESCRIPTION: Demonstrates how to instantiate a Document object, access its core_properties attribute, retrieve the current author, and update the author property using the python-docx library.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/coreprops.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> document = Document()
>>> core_properties = document.core_properties
>>> core_properties.author
'python-docx'
>>> core_properties.author = 'Brian'
>>> core_properties.author
'Brian'
```

----------------------------------------

TITLE: Applying a Paragraph Style on Creation in python-docx
DESCRIPTION: This code demonstrates how to apply a Word paragraph style when creating a new paragraph using the `add_paragraph` method. The style is specified by its name as a string.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_18

LANGUAGE: Python
CODE:
```
document.add_paragraph('Lorem ipsum dolor sit amet.', style='ListBullet')
```

----------------------------------------

TITLE: Setting Font Name in python-docx
DESCRIPTION: Demonstrates how to access the font object of a style and set its name property using the python-docx library. Setting the `font.name` property updates both the `w:ascii` and `w:hAnsi` attributes in the underlying document XML.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> font = document.styles['Normal'].font
>>> font.name
None
>>> font.name = 'Arial'
>>> font.name
'Arial'
```

----------------------------------------

TITLE: Setting Font Color with RGB in python-docx
DESCRIPTION: Shows how to set a specific font color using an RGB value. Requires importing RGBColor from docx.shared.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_14

LANGUAGE: Python
CODE:
```
>>> from docx.shared import RGBColor
>>> font.color.rgb = RGBColor(0x42, 0x24, 0xE9)
```

----------------------------------------

TITLE: Setting Font Color with Theme Color in python-docx
DESCRIPTION: Demonstrates how to set a font color using a theme color from the MsoThemeColorIndex enumeration. Requires importing MSO_THEME_COLOR.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_15

LANGUAGE: Python
CODE:
```
>>> from docx.enum.dml import MSO_THEME_COLOR
>>> font.color.theme_color = MSO_THEME_COLOR.ACCENT_1
```

----------------------------------------

TITLE: Iterating Row Cells Handling Omitted Columns - python-docx - Python
DESCRIPTION: Provides a generator function `iter_row_cell_texts` that iterates through a row's cells while explicitly yielding empty strings for grid columns that are omitted (not covered by any cell). This method helps maintain column alignment and integrity when dealing with complex table layouts.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/tables.rst#_snippet_1

LANGUAGE: Python
CODE:
```
def iter_row_cell_texts(row: _Row) -> Iterator[str]:
    for _ in range(row.grid_cols_before):
        yield ""
    for c in row.cells:
        yield c.text
    for _ in range(row.grid_cols_after):
        yield ""
```

LANGUAGE: Python
CODE:
```
[tuple(iter_row_cell_texts(r)) for r in table.rows]
```

----------------------------------------

TITLE: Adding a Row to a Table Incrementally (Python)
DESCRIPTION: Adds a new, empty row to the end of the table and returns a reference to the newly added row object. Useful for populating tables dynamically.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_12

LANGUAGE: Python
CODE:
```
row = table.add_row()
```

----------------------------------------

TITLE: Get Hyperlink Runs Python
DESCRIPTION: Retrieves a list of `Run` objects that constitute the visible text of the hyperlink using the `.runs` property. Requires a `Hyperlink` object. Returns a list of `Run` objects.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_5

LANGUAGE: python
CODE:
```
hyperlink.runs
[
  <docx.text.run.Run at 0x7f...>
  <docx.text.run.Run at 0x7f...>
  <docx.text.run.Run at 0x7f...>
]
```

----------------------------------------

TITLE: Control Table Autofit in python-docx
DESCRIPTION: Shows how to create a table and control its autofit behavior by setting the allow_autofit property to True or False in python-docx.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-props.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> table = document.add_table(rows=2, cols=2)
>>> table.allow_autofit
True
>>> table.allow_autofit = False
>>> table.allow_autofit
False
```

----------------------------------------

TITLE: Adding Tab Stop with Alignment and Leader in python-docx Python
DESCRIPTION: Illustrates adding a tab stop with specific alignment and leader character using members of the WD_TAB_ALIGNMENT and WD_TAB_LEADER enumerations.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_6

LANGUAGE: Python
CODE:
```
>>> from docx.enum.text import WD_TAB_ALIGNMENT, WD_TAB_LEADER
>>> tab_stop = tab_stops.add_tab_stop(Inches(1.5), WD_TAB_ALIGNMENT.RIGHT, WD_TAB_LEADER.DOTS)
>>> print(tab_stop.alignment)
RIGHT (2)
>>> print(tab_stop.leader)
DOTS (1)
```

----------------------------------------

TITLE: Getting Table Row and Column Counts (Python)
DESCRIPTION: Uses the `len()` function on the `.rows` and `.columns` properties of a table object to get the total number of rows and columns, respectively.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_11

LANGUAGE: Python
CODE:
```
row_count = len(table.rows)
col_count = len(table.columns)
```

----------------------------------------

TITLE: Set Run Character Style on Creation (python-docx) - Python
DESCRIPTION: Shows how to specify the character style for a run directly when creating it using the `p.add_run()` method's `style` argument.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_4

LANGUAGE: python
CODE:
```
run = p.add_run(style='Strong')
run.style.name
```

----------------------------------------

TITLE: Getting Font Object from Style (python-docx) - Python
DESCRIPTION: Accessing the font object associated with a specific style, such as 'Normal', from a document's styles collection.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_11

LANGUAGE: Python
CODE:
```
style = document.styles['Normal']
font = style.font
```

----------------------------------------

TITLE: Accessing RGB Font Color Value (Python)
DESCRIPTION: Demonstrates retrieving the type and rgb properties of the ColorFormat object when the color type is MSO_COLOR_TYPE.RGB. It shows how to access the specific RGBColor object representing the color value.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_3

LANGUAGE: Python
CODE:
```
>>> font.color.type
RGB (1)
>>> font.color.rgb
RGBColor(0x3f, 0x2c, 0x36)
```

----------------------------------------

TITLE: Setting Table Alignment with WD_TABLE_ALIGNMENT in Python
DESCRIPTION: This snippet demonstrates how to set the horizontal alignment of a table to center using the `WD_TABLE_ALIGNMENT.CENTER` enumeration member in python-docx. It requires an existing `document` object and adds a new table before setting its alignment.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdRowAlignment.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx.enum.table import WD_TABLE_ALIGNMENT

table = document.add_table(3, 3)
table.alignment = WD_TABLE_ALIGNMENT.CENTER
```

----------------------------------------

TITLE: Accessing Builtin Styles by Enumeration
DESCRIPTION: Demonstrates accessing builtin styles using the WD_STYLE enumeration, contrasting it with attempting to access them directly by name before they are loaded, which results in a KeyError.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/styles.rst#_snippet_4

LANGUAGE: python
CODE:
```
>>> style = document.styles['Heading1']
KeyError: no style with id or name 'Heading1'
>>> style = document.styles[WD_STYLE.HEADING_1]
>>> assert style == document.styles['Heading1']
```

----------------------------------------

TITLE: Merging Cells with cell().merge() in python-docx
DESCRIPTION: Demonstrates the syntax for merging cells in python-docx using the cell().merge() method. Valid merges require a rectangular region.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_6

LANGUAGE: Python
CODE:
```
cell(0, 0).merge(cell(1, 2))
```

----------------------------------------

TITLE: Adding New Style (Python)
DESCRIPTION: Explains how to add a new custom style to the document using the styles.add_style() method, specifying a unique name and the style type using WD_STYLE_TYPE.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from docx.enum.style import WD_STYLE_TYPE
styles = document.styles
style = styles.add_style('Citation', WD_STYLE_TYPE.PARAGRAPH)
style.name
style.type
```

----------------------------------------

TITLE: Get Hyperlink Full URL Python
DESCRIPTION: Provides the combined address and fragment of an external hyperlink as a single URL string using the `.url` property. Requires a `Hyperlink` object. Returns a string containing the full URL (address + '#' + fragment), or just the address for links without fragments.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_6

LANGUAGE: python
CODE:
```
hyperlink.url
'https://us.com#introduction'
```

----------------------------------------

TITLE: Setting Font Color using RGBColor (Python)
DESCRIPTION: Shows how assigning an RGBColor object to the color.rgb property sets the font color to a specific RGB value. This action automatically updates the color.type to MSO_COLOR_TYPE.RGB.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_4

LANGUAGE: Python
CODE:
```
>>> font.color.type
None
>>> font.color.rgb = RGBColor(0x3f, 0x2c, 0x36)
>>> font.color.type
RGB (1)
>>> font.color.rgb
RGBColor(0x3f, 0x2c, 0x36)
```

----------------------------------------

TITLE: Modify Hyperlink Properties Python
DESCRIPTION: Illustrates how to change the properties of an existing hyperlink, such as its visible text (`.text`), address (`.address`), and fragment/anchor (`.anchor`). Note the automatic URL encoding for special characters in the address. Requires a `Hyperlink` object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_11

LANGUAGE: python
CODE:
```
hyperlink.text = 'Froogle'
>>> hyperlink.text
'Froogle'
>>> hyperlink.address = 'mailto:info@froogle.com?subject=sup dawg?'
>>> hyperlink.address
'mailto:info@froogle.com?subject=sup%20dawg%3F'
>>> hyperlink.anchor = None
>>> hyperlink.anchor
None
```

----------------------------------------

TITLE: Adding Zoned Header Content with Tabs and Style (python-docx)
DESCRIPTION: Illustrates how to create a header with multiple zones (left, center, right) by inserting tab characters (`\t`) into the paragraph text and applying the built-in "Header" style to ensure proper alignment based on default tab stops.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/hdrftr.rst#_snippet_2

LANGUAGE: python
CODE:
```
# Assuming 'header' and 'document' objects are obtained
# from docx import Document
# document = Document()
# section = document.sections[0]
# header = section.header

paragraph = header.paragraphs[0]
paragraph.text = "Left Text\tCenter Text\tRight Text"
paragraph.style = document.styles["Header"]
```

----------------------------------------

TITLE: Accessing and Asserting Style Type in python-docx
DESCRIPTION: Demonstrates how to access the styles collection of a Document object and assert the type of the first style using the WD_STYLE_TYPE enumeration. Requires the `docx` library.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdStyleType.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx import Document
from docx.enum.style import WD_STYLE_TYPE

styles = Document().styles
assert styles[0].type == WD_STYLE_TYPE.PARAGRAPH
```

----------------------------------------

TITLE: Accessing a Table Cell by Index (Python)
DESCRIPTION: Retrieves a specific cell from the table using zero-based row and column indices. Returns a reference to the cell object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_7

LANGUAGE: Python
CODE:
```
cell = table.cell(0, 1)
```

----------------------------------------

TITLE: Add Runs to Hyperlink Text Python
DESCRIPTION: Shows how to add new runs to the visible text of a hyperlink using `hyperlink.insert_run()`. This allows for applying different formatting (like bold) to parts of the hyperlink's display text. Requires a `Hyperlink` object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_12

LANGUAGE: python
CODE:
```
hyperlink.text = 'A '
# .insert_run inserts a new run at idx, defaults to idx=-1
>>> hyperlink.insert_run(' link').bold = True
>>> hyperlink.insert_run('formatted', idx=1).bold = True
>>> hyperlink.text
'A formatted link'
>>> [r for r in hyperlink.iter_runs()]
[<docx.text.run.Run at 0x7fa...>,
 <docx.text.run.Run at 0x7fb...>,
 <docx.text.run.Run at 0x7fc...>]
```

----------------------------------------

TITLE: Iterating and Getting Length of Styles Collection
DESCRIPTION: Shows how to get the number of styles in the collection using len() and how to iterate through the styles, optionally filtering by type.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/styles.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> len(styles)
10
>>> list_styles = [s for s in styles if s.type == WD_STYLE_TYPE.LIST]
>>> len(list_styles)
3
```

----------------------------------------

TITLE: Getting RGB Font Color Value in python-docx
DESCRIPTION: Demonstrates how to retrieve the RGB color value when the font color type is MSO_COLOR_TYPE.RGB.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_18

LANGUAGE: Python
CODE:
```
>>> font.color.rgb
RGBColor(0x42, 0x24, 0xe9)
```

----------------------------------------

TITLE: Remove Run Character Style (python-docx) - Python
DESCRIPTION: Explains how to remove an applied character style from a run by assigning `None` to the `run.style` property. The run will then inherit the default character style.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_3

LANGUAGE: python
CODE:
```
run.style = None
run.style.name
```

----------------------------------------

TITLE: Accessing Theme Font Color Value (Python)
DESCRIPTION: Demonstrates retrieving the type and theme_color properties of the ColorFormat object when the color type is MSO_COLOR_TYPE.THEME. It shows how to access the specific MsoThemeColorIndex member representing the theme color.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_5

LANGUAGE: Python
CODE:
```
>>> font.color.type
THEME (2)
>>> font.color.theme_color
ACCENT_1 (5)
```

----------------------------------------

TITLE: Remove Style from Quick Gallery (python-docx)
DESCRIPTION: This code shows how to prevent a style from appearing in the quick style gallery by setting its quick_style property to False. It retrieves the style by name and modifies its visibility settings.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_19

LANGUAGE: Python
CODE:
```
style = document.styles['Normal']

style.hidden = False
style.quick_style = False
```

----------------------------------------

TITLE: Restoring Default Next Paragraph Style (python-docx) - Python
DESCRIPTION: Demonstrates how to reset the `next_paragraph_style` property back to its default behavior (applying the same style) by assigning the style object itself or `None`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_17

LANGUAGE: Python
CODE:
```
heading_1_style = styles['Heading 1']
heading_1_style.next_paragraph_style.name
'Body Text'

heading_1_style.next_paragraph_style = heading_1_style
heading_1_style.next_paragraph_style.name
'Heading 1'

heading_1_style.next_paragraph_style = None
heading_1_style.next_paragraph_style.name
'Heading 1'
```

----------------------------------------

TITLE: Adding Cell Widths Upon Merging in python-docx
DESCRIPTION: Demonstrates that when cells with defined widths are merged, the width of the resulting merged cell is the sum of the widths of the original cells. Requires cells with defined width properties.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_4

LANGUAGE: Python
CODE:
```
>>> a, b = row.cells[:2]
>>> a.width.inches, b.width.inches
(1.0, 1.0)
>>> A = a.merge(b)
>>> A.width.inches
2.0
```

----------------------------------------

TITLE: Applying Exact Line Spacing in python-docx (Python)
DESCRIPTION: This snippet demonstrates how to import the WD_LINE_SPACING enum and apply the 'EXACTLY' line spacing rule to a paragraph's format in a python-docx document. It requires an existing 'document' object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdLineSpacing.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx.enum.text import WD_LINE_SPACING

paragraph = document.add_paragraph()
paragraph.paragraph_format.line_spacing_rule = WD_LINE_SPACING.EXACTLY
```

----------------------------------------

TITLE: Setting Row Height Rule in python-docx
DESCRIPTION: This snippet demonstrates how to import the WD_ROW_HEIGHT_RULE enum and apply a specific height rule (EXACTLY) to the first row of a newly created table in a python-docx document.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdRowHeightRule.rst#_snippet_0

LANGUAGE: python
CODE:
```
from docx.enum.table import WD_ROW_HEIGHT_RULE

table = document.add_table(3, 3)
table.rows[0].height_rule = WD_ROW_HEIGHT_RULE.EXACTLY
```

----------------------------------------

TITLE: Get Run Character Style (python-docx) - Python
DESCRIPTION: Demonstrates how to retrieve the character style applied to a run object using the `run.style` property and access its name.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_0

LANGUAGE: python
CODE:
```
run = p.add_run()
run.style
run.style.name
```

----------------------------------------

TITLE: Accessing Styles Collection in python-docx
DESCRIPTION: Demonstrates how to access the styles collection object from a document instance. If the styles part is not present, it is added automatically.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/styles.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> styles = document.styles  # default styles part added if not present
>>> styles
<docx.styles.styles.Styles object at 0x1045dd550>
```

----------------------------------------

TITLE: Accessing Read-Only Font Color Property (Python)
DESCRIPTION: Illustrates how to access the ColorFormat object via the font.color property. It also confirms that this property is read-only and attempting to assign a value to it will raise an AttributeError.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> from docx.dml.color import ColorFormat
>>> color = font.color
>>> isinstance(font.color, ColorFormat)
True
>>> font.color = 'anything'
AttributeError: can't set attribute
```

----------------------------------------

TITLE: Display Style in Word Gallery (python-docx)
DESCRIPTION: This snippet demonstrates how to modify a style's properties (hidden, quick_style, priority) to control its visibility and order within the Microsoft Word style gallery using the python-docx library. It retrieves a style by name and sets its behavioral properties.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_18

LANGUAGE: Python
CODE:
```
from docx import Document
document = Document()
style = document.styles['Body Text']

style.hidden = False
style.quick_style = True
style.priorty = 1
```

----------------------------------------

TITLE: Accessing Section Header in python-docx
DESCRIPTION: Demonstrates how to access the default header object associated with a specific section in a document using the `.header` property of the section object. Every section is guaranteed to have a header object, even if it's linked to the previous section.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> header = section.header
>>> header
<docx.hdrftr.Header object at 0x02468ACE>
```

----------------------------------------

TITLE: Setting and Getting Style Priority in python-docx
DESCRIPTION: Demonstrates how to access and modify the 'priority' attribute of a style object in python-docx. Shows getting the initial value, setting it to a positive integer, and setting it to a negative integer (which is treated as 0).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> style = document.styles['Foobar']
>>> style.priority
None
>>> style.priority = 7
>>> style.priority
7
>>> style.priority = -42
>>> style.priority
0
```

----------------------------------------

TITLE: Checking Initial Font Color Type (Python)
DESCRIPTION: Shows how to access the type property of the ColorFormat object to determine the color type applied to the font. When no direct color is set, this property returns None.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_2

LANGUAGE: Python
CODE:
```
>>> font.color.type
None
```

----------------------------------------

TITLE: Checking Font Color Type (Python)
DESCRIPTION: This snippet demonstrates how to check the color type of a font object using the MSO_COLOR_TYPE enumeration. It requires importing MSO_COLOR_TYPE from docx.enum.dml. The example asserts that the font's color type is MSO_COLOR_TYPE.THEME.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/MsoColorType.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from docx.enum.dml import MSO_COLOR_TYPE

assert font.color.type == MSO_COLOR_TYPE.THEME
```

----------------------------------------

TITLE: Creating RGBColor object with hex values (Python)
DESCRIPTION: Shows how to instantiate an RGBColor object using hexadecimal integer notation for the red, green, and blue components, which can enhance readability when working with standard hex color codes.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/shared.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> lavender = RGBColor(0xff, 0x99, 0xcc)
```

----------------------------------------

TITLE: Accessing TabStops Object in python-docx Python
DESCRIPTION: Demonstrates how to access the TabStops object for a paragraph's format using the tab_stops property. This object manages the collection of tab stops defined for the paragraph.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_4

LANGUAGE: Python
CODE:
```
>>> tab_stops = paragraph_format.tab_stops
>>> tab_stops
<docx.text.tabstops.TabStops object at 0x106b802d8>
```

----------------------------------------

TITLE: Interact with Latent Styles (python-docx)
DESCRIPTION: This code illustrates common operations on the LatentStyles object, including getting the count of latent styles, iterating through them to get names, and accessing a specific latent style definition by its name using dictionary-like syntax. It also shows accessing a property of a retrieved latent style.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_21

LANGUAGE: Python
CODE:
```
len(latent_styles)
latent_style_names = [ls.name for ls in latent_styles]
latent_style_names
latent_quote = latent_styles['Quote']
latent_quote
latent_quote.priority
```

----------------------------------------

TITLE: Accessing Inline Shape Properties (Python)
DESCRIPTION: Demonstrates how to access the collection of inline shapes in a document's body, retrieve the first shape, and assert its type is a picture using the `MSO_SHAPE_TYPE` enumeration.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/shapes-inline.rst#_snippet_0

LANGUAGE: Python
CODE:
```
inline_shapes = document.body.inline_shapes
>>> inline_shape = inline_shapes[0]
>>> assert inline_shape.type == MSO_SHAPE_TYPE.PICTURE
```

----------------------------------------

TITLE: Iterating Paragraph Styles (Python)
DESCRIPTION: Illustrates how to iterate through all styles in the document and filter for paragraph styles using the WD_STYLE_TYPE enumeration. It then prints the name of each paragraph style.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from docx.enum.style import WD_STYLE_TYPE
styles = document.styles
paragraph_styles = [
    s for s in styles if s.type == WD_STYLE_TYPE.PARAGRAPH
]
for style in paragraph_styles:
    print(style.name)
```

----------------------------------------

TITLE: Set Table Direction using WD_TABLE_DIRECTION in Python-Docx
DESCRIPTION: This snippet demonstrates how to import the WD_TABLE_DIRECTION enum and use it to set the direction of a table to Right-to-Left (RTL). It requires a 'document' object to be available, typically an instance of `docx.Document`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdTableDirection.rst#_snippet_0

LANGUAGE: python
CODE:
```
from docx.enum.table import WD_TABLE_DIRECTION

table = document.add_table(3, 3)
table.direction = WD_TABLE_DIRECTION.RTL
```

----------------------------------------

TITLE: Setting Up Table Population Example (Python)
DESCRIPTION: Defines sample data and initializes a table with one row and three columns, preparing for population from the data. The snippet is incomplete.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/quickstart.rst#_snippet_13

LANGUAGE: Python
CODE:
```
# get table data -------------
items = (
    (7, '1024', 'Plush kittens'),
    (3, '2042', 'Furbees'),
    (1, '1288', 'French Poodle Collars, Deluxe'),
)

# add table ------------------
table = document.add_table(1, 3)

# populate header row --------
```

----------------------------------------

TITLE: Checking Font Color Type in python-docx
DESCRIPTION: Shows how to determine the type of color applied to a font (RGB, Theme, Auto, or None) using the color.type property.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_17

LANGUAGE: Python
CODE:
```
>>> font.color.type
RGB (1)
```

----------------------------------------

TITLE: Accessing Tab Stop by Index in python-docx Python
DESCRIPTION: Explains how to access individual TabStop objects within the TabStops collection using sequence indexing, similar to accessing elements in a Python list.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> tab_stops[0]
<docx.text.tabstops.TabStop object at 0x1105427e8>
```

----------------------------------------

TITLE: Accessing Length object properties (Python)
DESCRIPTION: Demonstrates accessing the raw value (in EMUs) and the converted value (in inches) of a Length object, typically representing dimensions like height or width of an inline shape.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/shared.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> inline_shape.height
914400
>>> inline_shape.height.inches
1.0
```

----------------------------------------

TITLE: Setting Font Color Brightness (Tint/Shade) (Python)
DESCRIPTION: Explains how to use the brightness property to apply a tint (positive value) or shade (negative value) to a theme color. It shows that this property can only be set when the color type is THEME, raising a ValueError otherwise.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> font.color.type
None
>>> font.color.brightness
0.0
>>> font.color.brightness = 0.4
ValueError: not a theme color

>>> font.color.theme_color = MSO_THEME_COLOR.TEXT_1
>>> font.color.brightness = 0.4
>>> font.color.brightness
0.4
```

----------------------------------------

TITLE: Adding Breaks using python-docx Python
DESCRIPTION: Demonstrates how to add line, page, and column breaks to a run object in python-docx using the add_break() method and the WD_BREAK enumeration. Shows how to check existing breaks.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/breaks.rst#_snippet_0

LANGUAGE: Python
CODE:
```
>>> run = p.add_run()
>>> run.breaks
[]

>>> run.add_break()  # by default adds WD_BREAK.LINE
>>> run.breaks
[<docx.text.Break object at 0x10a7c4f50>]
>>> run.breaks[0].type.__name__
WD_BREAK.LINE

>>> run.add_break(WD_BREAK.LINE)
>>> run.breaks
[<docx.text.Break object at 0x10a7c4f50>, <docx.text.Break object at 0x10a7c4f58>]

>>> run.add_break(WD_BREAK.PAGE)
>>> run.add_break(WD_BREAK.COLUMN)
>>> run.add_break(WD_BREAK.LINE_CLEAR_LEFT)
>>> run.add_break(WD_BREAK.LINE_CLEAR_RIGHT)
>>> run.add_break(WD_BREAK.TEXT_WRAPPING)
```

----------------------------------------

TITLE: Accessing InlineShape Dimensions in Python
DESCRIPTION: This Python code demonstrates how to access the `height` property of an `inline_shape` object, which returns a `Length` instance. It then shows how to use the `.inches` property of the `Length` object to get the height value converted to inches.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/shape.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> inline_shape.height
914400
>>> inline_shape.height.inches
1.0
```

----------------------------------------

TITLE: Managing Tab Stops with python-docx
DESCRIPTION: Demonstrates how to access, add, modify, delete, and clear tab stops on a paragraph's format object using the TabStops collection and TabStop objects. Shows how properties like position, alignment, and leader are handled and how the collection maintains sorted order.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/tab-stops.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> tab_stops = paragraph.paragraph_format.tab_stops
>>> tab_stops
<docx.text.parfmt.TabStops object at 0x104ea8c30>

>>> tab_stop = tab_stops.add_tab_stop(Inches(2), WD_TAB_ALIGNMENT.LEFT, WD_TAB_LEADER.DOTS)

# add_tab_stop defaults to WD_TAB_ALIGNMENT.LEFT, WD_TAB_LEADER.SPACES

>>> tab_stop = tab_stops.add_tab_stop(Inches(0.5))
>>> tab_stop.alignment
WD_TAB_ALIGNMENT.LEFT
>>> tab_stop.leader
WD_TAB_LEADER.SPACES

# TabStop properties are read/write

>>> tab_stop.position = Inches(2.5)
>>> tab_stop.alignment = WD_TAB_ALIGNMENT.CENTER
>>> tab_stop.leader = WD_TAB_LEADER.DASHES

# Tab stops are sorted into position order as created or modified

>>> [(t.position, t.alignment) for t in tab_stops]
[(914400, WD_TAB_ALIGNMENT.LEFT), (2286000, WD_TAB_ALIGNMENT.CENTER)]

# A tab stop is deleted using del statement

>>> len(tab_stops)
2
>>> del tab_stops[1]
>>> len(tab_stops)
1

# Restore default tabs

>>> tab_stops.clear()
```

----------------------------------------

TITLE: Change Latent Style Defaults (python-docx)
DESCRIPTION: This snippet demonstrates how to access and modify the default behavioral properties applied to built-in styles that lack explicit latent style definitions or specific attribute values. It shows getting and setting the default_to_locked property on the LatentStyles object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_22

LANGUAGE: Python
CODE:
```
latent_styles.default_to_locked
latent_styles.default_to_locked = True
latent_styles.default_to_locked
```

----------------------------------------

TITLE: Add Internal Hyperlink to Paragraph Python
DESCRIPTION: Demonstrates adding an internal hyperlink (linking to a bookmark or location within the document) to a paragraph using `paragraph.add_hyperlink()`, providing the display text and the fragment (bookmark name). Requires a paragraph object. Returns the newly created `Hyperlink` object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_10

LANGUAGE: python
CODE:
```
hyperlink = paragraph.add_hyperlink('Section 1', fragment='Section_1')
>>> hyperlink.text
'Section 1'
>>> hyperlink.fragment
'Section_1'
>>> hyperlink.address
''
```

----------------------------------------

TITLE: Setting and Getting Style Semi-Hidden Status in python-docx
DESCRIPTION: Illustrates how to check and change the 'semi-hidden' status of a style object using the 'hidden' attribute in python-docx. Shows getting the initial value and setting it to True.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> style = document.styles['Foo']
>>> style.hidden
False
>>> style.hidden = True
>>> style.hidden
True
```

----------------------------------------

TITLE: Setting Next Paragraph Style (python-docx) - Python
DESCRIPTION: Shows how to modify the `next_paragraph_style` property of a paragraph style, which determines the style applied to a new paragraph inserted after one with the current style.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_16

LANGUAGE: Python
CODE:
```
from docx import Document
document = Document()
styles = document.styles

styles['Heading 1'].next_paragraph_style = styles['Body Text']
```

----------------------------------------

TITLE: Access Latent Styles Object (python-docx)
DESCRIPTION: This snippet demonstrates how to obtain the LatentStyles object associated with a document's styles collection. The LatentStyles object provides access to the definitions and default properties of built-in styles not explicitly defined in the document's styles.xml.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_20

LANGUAGE: Python
CODE:
```
document = Document()
latent_styles = document.styles.latent_styles
```

----------------------------------------

TITLE: Removing a Section Header (python-docx)
DESCRIPTION: Explains how to remove a header definition from a section by setting its `is_linked_to_previous` attribute to `True`. This action irreversibly deletes the header's content and causes the section to inherit the header from the preceding section.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/hdrftr.rst#_snippet_3

LANGUAGE: python
CODE:
```
# Assuming 'header' object is obtained from a section
# from docx import Document
# document = Document()
# section = document.sections[0]
# header = section.header

header.is_linked_to_previous = True

# The header is now linked to previous (or removed if it's the first section)
# print(header.is_linked_to_previous)
```

----------------------------------------

TITLE: Get Hyperlink Visible Text Python
DESCRIPTION: Retrieves the concatenated visible text of all runs within the hyperlink using the `.text` property. Requires a `Hyperlink` object. Returns a string containing the display text.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_8

LANGUAGE: python
CODE:
```
hyperlink.text
'an excellent Wikipedia article on ferrets'
```

----------------------------------------

TITLE: Check Header Link Status (python-docx)
DESCRIPTION: Demonstrates how to check if a header is linked to the previous section's header using the `is_linked_to_previous` property in python-docx.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_5

LANGUAGE: Python
CODE:
```
>>> header.is_linked_to_previous
True
```

----------------------------------------

TITLE: Adding Tab Stop by Position in python-docx Python
DESCRIPTION: Shows how to add a new tab stop to the TabStops collection using the add_tab_stop method. The position is specified using a Length object, such as Inches.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_5

LANGUAGE: Python
CODE:
```
>>> tab_stop = tab_stops.add_tab_stop(Inches(1.5))
>>> tab_stop.position
1371600
>>> tab_stop.position.inches
1.5
```

----------------------------------------

TITLE: Deleting Header Definition by Linking
DESCRIPTION: Demonstrates how to delete an existing header definition from a section by assigning `True` to the `.is_linked_to_previous` property. This causes the section to inherit the header definition from the prior section.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_4

LANGUAGE: Python
CODE:
```
>>> header.is_linked_to_previous
False
>>> header.is_linked_to_previous = True
```

----------------------------------------

TITLE: Setting Style Base Style (Python)
DESCRIPTION: Demonstrates how to get and set the base style for a given style object in `python-docx`. It shows how to assign an existing style from the document's styles collection as the base style and verify the assignment.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_23

LANGUAGE: python
CODE:
```
>>> style = styles.add_style('Citation', WD_STYLE_TYPE.PARAGRAPH)
>>> style.base_style
None
>>> style.base_style = styles['Normal']
>>> style.base_style
<docx.styles.style._ParagraphStyle object at 0x10a7a9550>
>>> style.base_style.name
'Normal'
```

----------------------------------------

TITLE: Defining CT_LsdException XML Type
DESCRIPTION: Defines the complex type for a style exception within the list of style definitions (LSD). It specifies attributes like the exception name, locked status, UI priority, and visibility flags (semiHidden, unhideWhenUsed, qFormat). The 'name' attribute is required.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/index.rst#_snippet_3

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_LsdException">
    <xsd:attribute name="name"           type="s:ST_String"   use="required"/>
    <xsd:attribute name="locked"         type="s:ST_OnOff"/>
    <xsd:attribute name="uiPriority"     type="ST_DecimalNumber"/>
    <xsd:attribute name="semiHidden"     type="s:ST_OnOff"/>
    <xsd:attribute name="unhideWhenUsed" type="s:ST_OnOff"/>
    <xsd:attribute name="qFormat"        type="s:ST_OnOff"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Accessing and Setting next_paragraph_style in Python
DESCRIPTION: Demonstrates how to retrieve a paragraph style from a document's styles collection, access its next_paragraph_style property, compare it to other styles, and assign a new style object or None to change the next paragraph style.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/paragraph-style.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> styles = document.styles

>>> paragraph_style = styles['Foo']
>>> paragraph_style.next_paragraph_style == paragraph_style
True

>>> paragraph_style.next_paragraph_style = styles['Bar']
>>> paragraph_style.next_paragraph_style == styles['Bar']
True

>>> paragraph_style.next_paragraph_style = None
>>> paragraph_style.next_paragraph_style == paragraph_style
True
```

----------------------------------------

TITLE: Get Hyperlink Fragment Python
DESCRIPTION: Shows how to retrieve the internal anchor or URI fragment of a hyperlink using the `.fragment` property. Requires a `Hyperlink` object. Returns a string containing the fragment identifier (without the '#'), or `None` if no fragment is present.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_3

LANGUAGE: python
CODE:
```
hyperlink.fragment
'introduction'
```

----------------------------------------

TITLE: Setting Style Unhide When Used Property (Python)
DESCRIPTION: Demonstrates how to get and set the `unhide_when_used` property of a style object in `python-docx`. This property controls whether a style becomes visible in the Word UI when it is applied to content.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_6

LANGUAGE: python
CODE:
```
>>> style = document.styles['Foo']
>>> style.unhide_when_used
False
>>> style.unhide_when_used = True
>>> style.unhide_when_used
True
```

----------------------------------------

TITLE: Accessing Paragraph Text Including Hyperlinks in Python
DESCRIPTION: Demonstrates how the `paragraph.text` property in python-docx now includes the text content of hyperlinks within the paragraph.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_14

LANGUAGE: Python
CODE:
```
>>> paragraph.text
'A paragraph having a link to: github'
```

----------------------------------------

TITLE: Add Latent Style Definition (python-docx)
DESCRIPTION: This code shows how to create a new latent style definition for a built-in style, such as 'List Bullet', using the add_latent_style method. It first attempts to access the style (which raises a KeyError if it doesn't exist) and then adds it, setting its behavioral properties like hidden, priority, and quick_style.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_23

LANGUAGE: Python
CODE:
```
latent_style = latent_styles['List Bullet']
latent_style = latent_styles.add_latent_style('List Bullet')
latent_style.hidden = False
latent_style.priority = 2
latent_style.quick_style = True
```

----------------------------------------

TITLE: Check Hyperlink for Page Break Python
DESCRIPTION: Checks if a hyperlink contains a rendered page break within its content using the `.contains_page_break` property. Requires a `Hyperlink` object. Returns a boolean.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_7

LANGUAGE: python
CODE:
```
hyperlink.contains_page_break
False
```

----------------------------------------

TITLE: Check Hyperlink Visited Status Python
DESCRIPTION: Accesses the history status of a hyperlink using the `.history` property. According to the comment, `True` indicates the link has *not* been visited yet. Requires a `Hyperlink` object. Returns a boolean.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_4

LANGUAGE: python
CODE:
```
hyperlink.history
True
```

----------------------------------------

TITLE: Delete Latent Style Definition (python-docx)
DESCRIPTION: This snippet demonstrates how to remove a specific latent style definition from the document's LatentStyles collection. It accesses the latent style by name and then calls its delete() method, showing that subsequent access to the deleted style raises a KeyError.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_24

LANGUAGE: Python
CODE:
```
latent_styles['Light Grid']
latent_styles['Light Grid'].delete()
latent_styles['Light Grid']
```

----------------------------------------

TITLE: Deleting Style (Python)
DESCRIPTION: Demonstrates how to remove a style definition from the document by calling the .delete() method on the specific style object. It also shows checking the number of styles before and after deletion.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/styles-using.rst#_snippet_9

LANGUAGE: Python
CODE:
```
styles = document.styles
len(styles)
styles['Citation'].delete()
len(styles)
```

----------------------------------------

TITLE: Accessing and Setting Properties on a python-docx _LatentStyle
DESCRIPTION: Demonstrates how to access an individual _LatentStyle object from the collection and get/set its specific properties like name, priority, locked, and quick_style.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/latent-styles.rst#_snippet_5

LANGUAGE: python
CODE:
```
>>> latent_style = latent_styles.latent_styles[0]

>>> latent_style.name
'Normal'

>>> latent_style.priority
None
>>> latent_style.priority = 10
>>> latent_style.priority
10

>>> latent_style.locked
None
>>> latent_style.locked = True
>>> latent_style.locked
True

>>> latent_style.quick_style
None
>>> latent_style.quick_style = True
>>> latent_style.quick_style
True
```

----------------------------------------

TITLE: Run with Emphasis Style XML (python-docx) - XML
DESCRIPTION: Displays the Open XML structure for a run within a paragraph where the 'Emphasis' character style has been applied using the `<w:rStyle>` element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_6

LANGUAGE: xml
CODE:
```
<w:p>
  <w:r>
    <w:rPr>
      <w:rStyle w:val="Emphasis"/>
    </w:rPr>
    <w:t>This paragraph appears in Emphasis character style.</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Accessing Latent Styles Collection in python-docx
DESCRIPTION: Demonstrates how to obtain the LatentStyles collection object from the document's styles property. This object represents the collection of latent style definitions.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/latent-styles.rst#_snippet_0

LANGUAGE: python
CODE:
```
>>> latent_styles = document.styles.latent_styles
>>> latent_styles
<docx.styles.LatentStyles object at 0x1045dd550>
```

----------------------------------------

TITLE: Accessing Cells After Merging in python-docx
DESCRIPTION: Illustrates how accessing cells by grid position works after a merge. It shows that the length of Row.cells remains equal to the number of grid columns and that accessing any grid position within a merged span returns the top-leftmost cell of that span. Requires a table and cell objects.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_2

LANGUAGE: Python
CODE:
```
>>> table = document.add_table(2, 3)
>>> row = table.rows[0]
>>> len(row.cells)
3
>>> row.cells[0] == row.cells[1]
False

>>> a, b = row.cells[:2]
>>> a.merge(b)

>>> len(row.cells)
3
>>> row.cells[0] == row.cells[1]
True
```

----------------------------------------

TITLE: Deleting a Style (Python)
DESCRIPTION: Shows how to delete a style from the document's styles collection using the `delete()` method. It verifies the removal by checking the collection length before and after deletion and attempting to access the deleted style, which raises a `KeyError`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_22

LANGUAGE: python
CODE:
```
>>> len(styles)
6
>>> style.delete()
>>> len(styles)
5
>>> styles['Citation']
KeyError: no style with id or name 'Citation'
```

----------------------------------------

TITLE: Accessing and Setting Boolean Properties in python-docx LatentStyles
DESCRIPTION: Provides an example of accessing and setting one of the boolean properties (default_to_hidden) on the LatentStyles collection. This protocol applies to several boolean attributes controlling default UI behavior.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/latent-styles.rst#_snippet_3

LANGUAGE: python
CODE:
```
>>> latent_styles.default_to_hidden
False
>>> latent_styles.default_to_hidden = True
>>> latent_styles.default_to_hidden
True
```

----------------------------------------

TITLE: Accessing and Setting load_count in python-docx LatentStyles
DESCRIPTION: Illustrates how to retrieve and modify the load_count property of the LatentStyles collection. This property indicates the number of latent styles.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/latent-styles.rst#_snippet_2

LANGUAGE: python
CODE:
```
>>> latent_styles.load_count
276
>>> latent_styles.load_count = 242
>>> latent_styles.load_count
242
```

----------------------------------------

TITLE: WordprocessingML XML Before Page Break Insertion
DESCRIPTION: Shows the initial WordprocessingML XML structure of two paragraphs before a hard page break is inserted between them.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/breaks.rst#_snippet_3

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:t>Before inserting a page break, the cursor was here }</w:t>
  </w:r>
</w:p>
<w:p>
  <w:r>
    <w:t>This was the following paragraph, the last in the document</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Define 'm:mathPr' Element Reference
DESCRIPTION: References the 'mathPr' element from the MathML namespace ('m'), specifying mathematical properties. It is optional.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_73

LANGUAGE: XML
CODE:
```
<xsd:element  ref="m:mathPr"                                             minOccurs="0"/>
```

----------------------------------------

TITLE: Setting Section Start Type in python-docx Python
DESCRIPTION: This snippet demonstrates how to set the start type for a section in a Word document using the python-docx library. It imports the WD_SECTION enumeration and assigns the NEW_PAGE value to the start_type property of the first section.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/WdSectionStart.rst#_snippet_0

LANGUAGE: python
CODE:
```
from docx.enum.section import WD_SECTION

section = document.sections[0]
section.start_type = WD_SECTION.NEW_PAGE
```

----------------------------------------

TITLE: Breaking Header Linkage by Editing
DESCRIPTION: Illustrates that performing a constructive edit operation, such as assigning text to the header's `.text` property, automatically breaks the linkage to the previous section if one exists. A new header definition is created in the current section.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_2

LANGUAGE: Python
CODE:
```
>>> header = document.sections[0].header
>>> header.is_linked_to_previous
True
>>> header.text = 'foobar'
>>> header.is_linked_to_previous
False
```

----------------------------------------

TITLE: Configure Different First Page Header (python-docx)
DESCRIPTION: Illustrates how to set a distinct header for the first page of a section using the `different_first_page_header_footer` property in python-docx. It also verifies the property value and the link status of the first page header.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_7

LANGUAGE: Python
CODE:
```
>>> section.different_first_page_header_footer
False
>>> section.different_first_page_header_footer = True
>>> section.different_first_page_header_footer
True
>>> section.first_page_header.is_linked_to_previous
True
```

----------------------------------------

TITLE: Accessing Default Row Cells (Merged Cells) - python-docx - Python
DESCRIPTION: Demonstrates the default behavior of accessing cells via `_Row.cells`, which repeats the text of a merged cell for each grid column it spans. This approach simplifies the representation into a uniform matrix but duplicates data for merged areas.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/tables.rst#_snippet_0

LANGUAGE: Python
CODE:
```
[tuple(c.text for c in r.cells) for r in table.rows]
```

----------------------------------------

TITLE: Setting Style Locked Property (Python)
DESCRIPTION: Demonstrates how to get and set the `locked` property of a style object in `python-docx`. This property prevents the style from being applied if formatting protection is enabled in Word.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_16

LANGUAGE: python
CODE:
```
>>> style = document.styles['Foo']
>>> style.locked
False
>>> style.locked = True
>>> style.locked
True
```

----------------------------------------

TITLE: Breaking Header Linkage by Assignment
DESCRIPTION: Explains how to explicitly break the linkage of a header to the previous section by assigning `False` to the `.is_linked_to_previous` property. This creates a blank header definition for the current section if one didn't exist.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_3

LANGUAGE: Python
CODE:
```
>>> header.is_linked_to_previous
True
>>> header.is_linked_to_previous = False
>>> header.is_linked_to_previous
False
```

----------------------------------------

TITLE: Setting Font Theme Color in python-docx (Python)
DESCRIPTION: This snippet demonstrates how to set the theme color of a font object using the MSO_THEME_COLOR enumeration from the docx.enum.dml module. It shows importing the enumeration and assigning a specific theme color value, such as ACCENT_1, to the font's theme_color property.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/api/enum/MsoThemeColorIndex.rst#_snippet_0

LANGUAGE: python
CODE:
```
from docx.enum.dml import MSO_THEME_COLOR

font.color.theme_color = MSO_THEME_COLOR.ACCENT_1
```

----------------------------------------

TITLE: Getting Theme Font Color Value in python-docx
DESCRIPTION: Shows how to retrieve the theme color value when the font color type is MSO_COLOR_TYPE.THEME.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_19

LANGUAGE: Python
CODE:
```
>>> font.color.theme_color
ACCENT_1 (5)
```

----------------------------------------

TITLE: Add External Hyperlink to Paragraph Python
DESCRIPTION: Shows how to add an external hyperlink to a paragraph using the `paragraph.add_hyperlink()` method, specifying the display text, address, and optional fragment. Note that the text indicates this functionality was "not yet implemented" at the time of writing, but the example shows the intended usage and resulting properties. Requires a paragraph object. Returns the newly created `Hyperlink` object.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_9

LANGUAGE: python
CODE:
```
hyperlink = paragraph.add_hyperlink(
  'About', address='http://us.com', fragment='about'
)
>>> hyperlink
<docx.text.hyperlink.Hyperlink at 0x7f...>
>>> hyperlink.text
'About'
>>> hyperlink.address
'http://us.com'
>>> hyperlink.fragment
'about'
>>> hyperlink.url
'http://us.com#about'
```

----------------------------------------

TITLE: Defining Bookmarks for Internal Hyperlink Anchors in WordprocessingML XML
DESCRIPTION: Illustrates the XML structure for a bookmark (`w:bookmarkStart` and `w:bookmarkEnd`) that serves as the target location for an internal hyperlink referenced by its `w:anchor` attribute.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_19

LANGUAGE: XML
CODE:
```
<w:p>
  <w:bookmarkStart w:id="0" w:name="Section_4"/>
    <w:r>
      <w:t>Section 4</w:t>
    </w:r>
  <w:bookmarkEnd w:id="0"/>
</w:p>
```

----------------------------------------

TITLE: Resetting Font Color to Inherited in python-docx
DESCRIPTION: Explains how to remove a directly applied font color, allowing it to inherit from the style hierarchy, by setting the rgb or theme_color property to None.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/text.rst#_snippet_16

LANGUAGE: Python
CODE:
```
>>> font.color.rgb = None
```

----------------------------------------

TITLE: WordprocessingML XML for next_paragraph_style
DESCRIPTION: Shows the XML structure within a <w:style> element that defines the next_paragraph_style using the <w:next w:val="..."> child element, linking to another style by its ID.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/paragraph-style.rst#_snippet_0

LANGUAGE: xml
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
  <w:next w:val="Bar"/>
</w:style>
```

----------------------------------------

TITLE: WordprocessingML XML for Line Break (Simplified)
DESCRIPTION: Presents a simplified WordprocessingML XML structure for a line break where the <w:br/> element is included within the same run as the surrounding text. This is accepted by Word but modified on next save.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/breaks.rst#_snippet_2

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:t>Text before</w:t>
    <w:br/>
    <w:t>and after line break</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Setting Style Quick Style Property (Python)
DESCRIPTION: Demonstrates how to get and set the `quick_style` property of a style object in `python-docx`. This property determines if the style appears in the Word style gallery.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_11

LANGUAGE: python
CODE:
```
>>> style = document.styles['Foo']
>>> style.quick_style
False
>>> style.quick_style = True
>>> style.quick_style
True
```

----------------------------------------

TITLE: Checking Header Linkage to Previous Section
DESCRIPTION: Shows how to check if a header definition for the current section is inherited from the prior section using the `.is_linked_to_previous` property. A value of `True` indicates the header is linked and does not have its own definition in this section.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_1

LANGUAGE: Python
CODE:
```
>>> header.is_linked_to_previous
True
```

----------------------------------------

TITLE: XML for Double Line Spacing (WordprocessingML)
DESCRIPTION: Shows the WordprocessingML XML structure (<w:pPr>/<w:spacing>) for specifying line spacing. The w:line attribute is set to 480 twips and w:lineRule is 'exact', which results in double spacing.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_5

LANGUAGE: XML
CODE:
```
<w:pPr>
  <w:spacing w:line="480" w:lineRule="exact"/>
</w:pPr>
```

----------------------------------------

TITLE: Specimen XML for Latent Styles
DESCRIPTION: This XML snippet shows a typical structure for the `w:latentStyles` element in a WordprocessingML document, including default attributes and several `w:lsdException` elements demonstrating how specific latent style properties like `semiHidden`, `uiPriority`, `unhideWhenUsed`, and `qFormat` are stored.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/latent-styles.rst#_snippet_6

LANGUAGE: xml
CODE:
```
<w:latentStyles w:defLockedState="0" w:defUIPriority="99" w:defSemiHidden="1"
                  w:defUnhideWhenUsed="1" w:defQFormat="0" w:count="276">
    <w:lsdException w:name="Normal" w:semiHidden="0" w:uiPriority="0"
                    w:unhideWhenUsed="0" w:qFormat="1"/>
    <w:lsdException w:name="heading 1" w:semiHidden="0" w:uiPriority="9"
                    w:unhideWhenUsed="0" w:qFormat="1"/>
    <w:lsdException w:name="caption" w:uiPriority="35" w:qFormat="1"/>
    <w:lsdException w:name="Default Paragraph Font" w:uiPriority="1"/>
    <w:lsdException w:name="Bibliography" w:uiPriority="37"/>
    <w:lsdException w:name="TOC Heading" w:uiPriority="39" w:qFormat="1"/>
  </w:latentStyles>
```

----------------------------------------

TITLE: Example XML for Word Styles (w:styles)
DESCRIPTION: This snippet shows a typical example of the styles.xml part found within a .docx file. It includes default document properties, latent styles definitions, and examples of default and custom style definitions for paragraphs, characters, tables, and numbering.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/index.rst#_snippet_0

LANGUAGE: xml
CODE:
```
<?xml version='1.0' encoding='UTF-8' standalone='yes'?>
<w:styles
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"
    xmlns:w14="http://schemas.microsoft.com/office/word/2010/wordml"
    xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"
    mc:Ignorable="w14"
    >
  <w:docDefaults>
    <w:rPrDefault>
      <w:rPr>
        <w:rFonts w:asciiTheme="minorHAnsi" w:eastAsiaTheme="minorEastAsia"
                  w:hAnsiTheme="minorHAnsi" w:cstheme="minorBidi"/>
        <w:sz w:val="24"/>
        <w:szCs w:val="24"/>
        <w:lang w:val="en-US" w:eastAsia="en-US" w:bidi="ar-SA"/>
      </w:rPr>
    </w:rPrDefault>
    <w:pPrDefault/>
  </w:docDefaults>
  <w:latentStyles w:defLockedState="0" w:defUIPriority="99" w:defSemiHidden="1"
                  w:defUnhideWhenUsed="1" w:defQFormat="0" w:count="276">
    <w:lsdException w:name="Normal" w:semiHidden="0" w:uiPriority="0"
                    w:unhideWhenUsed="0" w:qFormat="1"/>
    <w:lsdException w:name="heading 1" w:semiHidden="0" w:uiPriority="9"
                    w:unhideWhenUsed="0" w:qFormat="1"/>
    <w:lsdException w:name="heading 2" w:uiPriority="9" w:qFormat="1"/>
    <w:lsdException w:name="Default Paragraph Font" w:uiPriority="1"/>
  </w:latentStyles>
  <w:style w:type="paragraph" w:default="1" w:styleId="Normal">
    <w:name w:val="Normal"/>
    <w:qFormat/>
  </w:style>
  <w:style w:type="character" w:default="1" w:styleId="DefaultParagraphFont">
    <w:name w:val="Default Paragraph Font"/>
    <w:uiPriority w:val="1"/>
    <w:semiHidden/>
    <w:unhideWhenUsed/>
  </w:style>
  <w:style w:type="table" w:default="1" w:styleId="TableNormal">
    <w:name w:val="Normal Table"/>
    <w:uiPriority w:val="99"/>
    <w:semiHidden/>
    <w:unhideWhenUsed/>
    <w:tblPr>
      <w:tblInd w:w="0" w:type="dxa"/>
      <w:tblCellMar>
        <w:top w:w="0" w:type="dxa"/>
        <w:left w:w="108" w:type="dxa"/>
        <w:bottom w:w="0" w:type="dxa"/>
        <w:right w:w="108" w:type="dxa"/>
      </w:tblCellMar>
    </w:tblPr>
  </w:style>
  <w:style w:type="numbering" w:default="1" w:styleId="NoList">
    <w:name w:val="No List"/>
    <w:uiPriority w:val="99"/>
    <w:semiHidden/>
    <w:unhideWhenUsed/>
  </w:style>
  <w:style w:type="paragraph" w:customStyle="1" w:styleId="Foobar">
    <w:name w:val="Foobar"/>
    <w:qFormat/>
    <w:rsid w:val="004B54E0"/>
  </w:style>
</w:styles>
```

----------------------------------------

TITLE: Accessing and Setting default_priority in python-docx LatentStyles
DESCRIPTION: Shows the protocol for getting and setting the default_priority property on the LatentStyles collection. It notes that while the attribute can be omitted (returning None), it is typically explicitly set to 99 in default Word documents.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/latent-styles.rst#_snippet_1

LANGUAGE: python
CODE:
```
>>> # return None if attribute is omitted
>>> latent_styles.default_priority
None
>>> # but expect is will almost always be explicitly 99
>>> latent_styles.default_priority
99
>>> latent_styles.default_priority = 42
>>> latent_styles.default_priority
42
```

----------------------------------------

TITLE: Specimen XML for a docx Table Cell (`w:tc`)
DESCRIPTION: Shows a sample Open XML structure for a table cell (`<w:tc>`), including its properties (`<w:tcPr>`) like width (`<w:tcW>`) and vertical alignment (`<w:vAlign>`), and the content contained within the cell (a paragraph `<w:p>`).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_1

LANGUAGE: xml
CODE:
```
<w:tc>
  <w:tcPr>
    <w:tcW w:w="7038" w:type="dxa"/>
    <w:vAlign w:val="bottom"/>
  </w:tcPr>
  <w:p>
    <w:pPr>
      <w:pStyle w:val="ListBullet"/>
    </w:pPr>
    <w:r>
      <w:t>Amy earned her BA in American Studies</w:t>
    </w:r>
  </w:p>
</w:tc>
```

----------------------------------------

TITLE: WordprocessingML for Unhide When Used True (XML)
DESCRIPTION: Shows the WordprocessingML XML structure for a style when its `unhide_when_used` property is set to `True` in `python-docx`. It includes the `<w:semiHidden/>` and `<w:unhideWhenUsed/>` elements.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_7

LANGUAGE: xml
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
  <w:semiHidden/>
  <w:unhideWhenUsed/>
</w:style>
```

----------------------------------------

TITLE: WordprocessingML Alternate Quick Style False (XML)
DESCRIPTION: Shows an alternate WordprocessingML XML structure where `w:qFormat` has a `w:val="0"`. `python-docx` should interpret this as `False` but will not write XML in this specific format.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_14

LANGUAGE: xml
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
  <w:qFormat w:val="0"/>  <!-- style.quick_style is False -->
</w:style>
```

----------------------------------------

TITLE: WordprocessingML for Quick Style True (XML)
DESCRIPTION: Shows the WordprocessingML XML structure for a style when its `quick_style` property is set to `True` in `python-docx`. It includes the presence of the `<w:qFormat/>` element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_12

LANGUAGE: xml
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
  <w:qFormat/>
</w:style>
```

----------------------------------------

TITLE: Specifying Left, Right, and First Line Indent in WordprocessingML
DESCRIPTION: Shows the XML representation (w:ind element within w:pPr) for setting left (w:start), right (w:end), and first line (w:firstLine) indentation for a paragraph in WordprocessingML. Values are specified in twips.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_7

LANGUAGE: xml
CODE:
```
<w:pPr>
  <w:ind w:start="1440" w:end="720" w:firstLine="720"/>
</w:pPr>
```

----------------------------------------

TITLE: XML Schema for CT_P Element
DESCRIPTION: Defines the structure of the CT_P complex type, representing a paragraph in WordprocessingML. It includes definitions for the paragraph properties (pPr), allowed content groups (EG_PContent, EG_RunLevelElts, EG_RunInnerContent), and the CT_R (run) complex type, outlining the possible elements within a paragraph and a run.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/schema/ct_p.rst#_snippet_0

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_P">
  <xsd:sequence>
    <xsd:element name="pPr" type="CT_PPr" minOccurs="0"/>
    <xsd:group   ref="EG_PContent"        minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="rsidRPr"      type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidR"        type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidDel"      type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidP"        type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidRDefault" type="ST_LongHexNumber"/>
</xsd:complexType>

<xsd:group name="EG_PContent">  <!-- denormalized -->
  <xsd:choice>
    <xsd:element name="r"               type="CT_R"/>
    <xsd:element name="hyperlink"       type="CT_Hyperlink"/>
    <xsd:element name="fldSimple"       type="CT_SimpleField"/>
    <xsd:element name="sdt"             type="CT_SdtRun"/>
    <xsd:element name="customXml"       type="CT_CustomXmlRun"/>
    <xsd:element name="smartTag"        type="CT_SmartTagRun"/>
    <xsd:element name="dir"             type="CT_DirContentRun"/>
    <xsd:element name="bdo"             type="CT_BdoContentRun"/>
    <xsd:element name="subDoc"          type="CT_Rel"/>
    <xsd:group    ref="EG_RunLevelElts"/>
  </xsd:choice>
</xsd:group>

<xsd:group name="EG_RunLevelElts">
  <xsd:choice>
    <xsd:element name="proofErr"                    type="CT_ProofErr"/>
    <xsd:element name="permStart"                   type="CT_PermStart"/>
    <xsd:element name="permEnd"                     type="CT_Perm"/>
    <xsd:element name="bookmarkStart"               type="CT_Bookmark"/>
    <xsd:element name="bookmarkEnd"                 type="CT_MarkupRange"/>
    <xsd:element name="moveFromRangeStart"          type="CT_MoveBookmark"/>
    <xsd:element name="moveFromRangeEnd"            type="CT_MarkupRange"/>
    <xsd:element name="moveToRangeStart"            type="CT_MoveBookmark"/>
    <xsd:element name="moveToRangeEnd"              type="CT_MarkupRange"/>
    <xsd:element name="commentRangeStart"           type="CT_MarkupRange"/>
    <xsd:element name="commentRangeEnd"             type="CT_MarkupRange"/>
    <xsd:element name="customXmlInsRangeStart"      type="CT_TrackChange"/>
    <xsd:element name="customXmlInsRangeEnd"        type="CT_Markup"/>
    <xsd:element name="customXmlDelRangeStart"      type="CT_TrackChange"/>
    <xsd:element name="customXmlDelRangeEnd"        type="CT_Markup"/>
    <xsd:element name="customXmlMoveFromRangeStart" type="CT_TrackChange"/>
    <xsd:element name="customXmlMoveFromRangeEnd"   type="CT_Markup"/>
    <xsd:element name="customXmlMoveToRangeStart"   type="CT_TrackChange"/>
    <xsd:element name="customXmlMoveToRangeEnd"     type="CT_Markup"/>
    <xsd:element name="ins"                         type="CT_RunTrackChange"/>
    <xsd:element name="del"                         type="CT_RunTrackChange"/>
    <xsd:element name="moveFrom"                    type="CT_RunTrackChange"/>
    <xsd:element name="moveTo"                      type="CT_RunTrackChange"/>
    <xsd:group   ref="EG_MathContent" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:choice>
</xsd:group>

<xsd:complexType name="CT_R">
  <xsd:sequence>
    <xsd:group ref="EG_RPr"             minOccurs="0"/>
    <xsd:group ref="EG_RunInnerContent" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="rsidRPr" type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidDel" type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidR"   type="ST_LongHexNumber"/>
</xsd:complexType>

<xsd:group name="EG_RunInnerContent">
  <xsd:choice>
    <xsd:element name="t"                     type="CT_Text"/>
    <xsd:element name="tab"                   type="CT_Empty"/>
    <xsd:element name="br"                    type="CT_Br"/>
    <xsd:element name="cr"                    type="CT_Empty"/>
    <xsd:element name="sym"                   type="CT_Sym"/>
    <xsd:element name="ptab"                  type="CT_PTab"/>
    <xsd:element name="softHyphen"            type="CT_Empty"/>
    <xsd:element name="contentPart"           type="CT_Rel"/>
    <xsd:element name="noBreakHyphen"         type="CT_Empty"/>
    <xsd:element name="fldChar"               type="CT_FldChar"/>
    <xsd:element name="instrText"             type="CT_Text"/>
    <xsd:element name="dayShort"              type="CT_Empty"/>
    <xsd:element name="monthShort"            type="CT_Empty"/>
    <xsd:element name="yearShort"             type="CT_Empty"/>
    <xsd:element name="dayLong"               type="CT_Empty"/>
```

----------------------------------------

TITLE: Specifying Page Placement Settings in WordprocessingML
DESCRIPTION: Shows the XML representation (w:pPr element) for setting page placement properties like keep with next (w:keepNext), keep lines together (w:keepLines), page break before (w:pageBreakBefore), and widow/orphan control (w:widowControl) in WordprocessingML. These elements have "On/Off" semantics.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_10

LANGUAGE: xml
CODE:
```
<w:pPr>
  <w:keepNext/>
  <w:keepLines/>
  <w:pageBreakBefore w:val="0"/>
  <w:widowControl/>
</w:pPr>
```

----------------------------------------

TITLE: Basic WordprocessingML Document Structure (XML)
DESCRIPTION: Illustrates the minimal structure of a main document part in WordprocessingML, showing the root `w:document` element containing a `w:body` with a single paragraph `w:p`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/schema/ct_document.rst#_snippet_0

LANGUAGE: xml
CODE:
```
<w:document>
  <w:body>
    <w:p/>
  </w:body>
</w:document>
```

----------------------------------------

TITLE: Baseline Document XML Structure
DESCRIPTION: This XML snippet shows the basic structure of a Word document body with two paragraphs and a single section property element (<w:sectPr>) at the end of the body, representing the default section for the entire document.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/sections.rst#_snippet_0

LANGUAGE: xml
CODE:
```
<w:body>
  <w:p>
    <w:r>
      <w:t>Paragraph 1</w:t>
    </w:r>
  </w:p>
  <w:p>
    <w:r>
      <w:t>Paragraph 2</w:t>
    </w:r>
  </w:p>
  <w:sectPr>
    <w:pgSz w:w="12240" w:h="15840"/>
    <w:pgMar w:top="1440" w:right="1800" w:bottom="1440" w:left="1800"
             w:header="720" w:footer="720" w:gutter="0"/>
    <w:cols w:space="720"/>
    <w:docGrid w:linePitch="360"/>
  </w:sectPr>
</w:body>
```

----------------------------------------

TITLE: Example WordprocessingML Document Body
DESCRIPTION: Illustrates the basic structure of a WordprocessingML document containing a single paragraph within the w:body element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/schema/ct_body.rst#_snippet_0

LANGUAGE: XML
CODE:
```
<w:document>
  <w:body>
    <w:p/>
  </w:body>
</w:document>
```

----------------------------------------

TITLE: OpenXML Specimen Table XML
DESCRIPTION: Provides an example of the OpenXML markup representing a simple 2x2 table structure, including table properties (tblPr) and grid definition (tblGrid).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-props.rst#_snippet_2

LANGUAGE: xml
CODE:
```
<w:tbl>
  <w:tblPr>
    <w:tblStyle w:val="TableGrid"/>
    <w:tblW w:type="auto" w:w="0"/>
    <w:jc w:val="right"/>
    <w:tblLook w:firstColumn="1" w:firstRow="1" w:lastColumn="0"
               w:lastRow="0" w:noHBand="0" w:noVBand="1" w:val="04A0"/>
  </w:tblPr>
  <w:tblGrid>
    <w:gridCol w:w="4788"/>
    <w:gridCol w:w="4788"/>
  </w:tblGrid>
  <w:tr>
    <w:tc/>
      <w:tcPr>
        <w:tcW w:type="dxa" w:w="4788"/>
      </w:tcPr>
      <w:p/>
    </w:tc>
    <w:tc>
      <w:tcPr>
        <w:tcW w:type="dxa" w:w="4788"/>
      </w:tcPr>
      <w:p/>
    </w:tc>
  </w:tr>
  <w:tr>
    <w:tc>
      <w:tcPr>
        <w:tcW w:type="dxa" w:w="4788"/>
      </w:tcPr>
      <w:p/>
    </w:tc>
    <w:tc>
      <w:tcPr>
        <w:tcW w:type="dxa" w:w="4788"/>
      </w:tcPr>
      <w:p/>
    </w:tc>
  </w:tr>
</w:tbl>
```

----------------------------------------

TITLE: XML Representation of Semi-Hidden Style (False)
DESCRIPTION: Shows the WordprocessingML XML structure for a paragraph style named 'Foo' where the 'semi-hidden' property is set to False, indicated by the absence of the <w:semiHidden/> element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_3

LANGUAGE: XML
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
</w:style>
```

----------------------------------------

TITLE: WordprocessingML for Quick Style False (XML)
DESCRIPTION: Shows the WordprocessingML XML structure for a style when its `quick_style` property is set to `False` in `python-docx`. It demonstrates the absence of the `<w:qFormat/>` element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_13

LANGUAGE: xml
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
</w:style>
```

----------------------------------------

TITLE: Specimen XML for Text Highlighting
DESCRIPTION: Shows examples of the Open XML markup for text runs with and without highlight color applied. Demonstrates the use of the `<w:highlight>` element within `<w:rPr>` and the `w:val` attribute to specify the highlight color.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-highlight-color.rst#_snippet_2

LANGUAGE: XML
CODE:
```
<w:r>
  <w:t>Black text on white background</w:t>
</w:r>
```

LANGUAGE: XML
CODE:
```
<w:r>
  <w:rPr>
    <w:highlight w:val="green"/>
  </w:rPr>
  <w:t>Blue text on bright green background</w:t>
</w:r>
```

LANGUAGE: XML
CODE:
```
<w:r>
  <w:rPr>
    <w:highlight w:val="darkGreen"/>
  </w:rPr>
  <w:t>Red text on green background</w:t>
</w:r>
```

----------------------------------------

TITLE: WordprocessingML Styles Structure (XML)
DESCRIPTION: Provides a partial example of the `w:styles` XML element structure found within a WordprocessingML document. It shows the definition of default paragraph and character styles.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_24

LANGUAGE: xml
CODE:
```
<w:styles>

  <!-- ... -->

  <w:style w:type="paragraph" w:default="1" w:styleId="Normal">
    <w:name w:val="Normal"/>
    <w:qFormat/>
  </w:style>
  <w:style w:type="character" w:default="1" w:styleId="DefaultParagraphFont">

```

----------------------------------------

TITLE: XML for Paragraph Spacing (WordprocessingML)
DESCRIPTION: Shows the WordprocessingML XML structure (<w:pPr>/<w:spacing>) used to specify paragraph spacing. The w:before attribute sets space before the paragraph (in twips, 240 twips = 12 points), and w:after sets space after.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_2

LANGUAGE: XML
CODE:
```
<w:pPr>
  <w:spacing w:before="240" w:after="0"/>
</w:pPr>
```

----------------------------------------

TITLE: XML for Paragraph with Direct RGB Font Color
DESCRIPTION: Provides the WordprocessingML XML structure showing how a direct RGB color is represented. The color is specified using the <w:color> element with the w:val attribute set to the hexadecimal RGB value within the run properties (<w:rPr>).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_9

LANGUAGE: XML
CODE:
```
<w:p>
  <w:pPr>
    <w:rPr>
      <w:color w:val="0000FF"/>
    </w:rPr>
  </w:pPr>
  <w:r>
    <w:rPr>
      <w:color w:val="0000FF"/>
    </w:rPr>
    <w:t>Directly-applied color Blue.</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: XML for Line Spacing (14 points) (WordprocessingML)
DESCRIPTION: Shows the WordprocessingML XML structure (<w:pPr>/<w:spacing>) for specifying line spacing as a fixed value. The w:line attribute sets the spacing in twips (280 twips = 14 points).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_4

LANGUAGE: XML
CODE:
```
<w:pPr>
  <w:spacing w:line="280"/>
</w:pPr>
```

----------------------------------------

TITLE: Specimen XML for Tab Stops
DESCRIPTION: Provides an example of the WordprocessingML XML structure for defining tab stops within a paragraph's properties (w:pPr), showing the w:tabs element containing w:tab elements with attributes for value (w:val), leader (w:leader), and position (w:pos).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/tab-stops.rst#_snippet_1

LANGUAGE: xml
CODE:
```
<w:pPr>
  <w:tabs>
    <w:tab w:val="left" w:leader="dot" w:pos="2880"/>
    <w:tab w:val="decimal" w:pos="6480"/>
  </w:tabs>
</w:pPr>
```

----------------------------------------

TITLE: OpenXML Default, First, and Even Header References
DESCRIPTION: Illustrates the OpenXML structure within `<w:sectPr>` when distinct headers are defined for the first page (`w:type="first"`), even pages (`w:type="even"`), and all other pages (`w:type="default"`), including the `<w:titlePg/>` element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_12

LANGUAGE: XML
CODE:
```
<w:sectPr>
    <w:headerReference w:type="default" r:id="rId3"/>
    <w:headerReference w:type="first" r:id="rId4"/>
    <w:headerReference w:type="even" r:id="rId5"/>
    <w:titlePg/>
    ...
</w:sectPr>
```

----------------------------------------

TITLE: Specimen Word Table XML
DESCRIPTION: This XML snippet shows the structure generated by Microsoft Word for a simple 2x2 table. It illustrates the main elements: w:tbl (table), w:tblPr (table properties), w:tblGrid (grid column definitions), w:tr (table row), and w:tc (table cell).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/index.rst#_snippet_0

LANGUAGE: xml
CODE:
```
<w:tbl>
  <w:tblPr>
    <w:tblStyle w:val="TableGrid"/>
    <w:tblW w:type="auto" w:w="0"/>
    <w:tblLook w:firstColumn="1" w:firstRow="1" w:lastColumn="0"
               w:lastRow="0" w:noHBand="0" w:noVBand="1" w:val="04A0"/>
  </w:tblPr>
  <w:tblGrid>
    <w:gridCol w:w="4788"/>
    <w:gridCol w:w="4788"/>
  </w:tblGrid>
  <w:tr>
    <w:tc/>
      <w:tcPr>
        <w:tcW w:type="dxa" w:w="4788"/>
      </w:tcPr>
      <w:p/>
    </w:tc>
    <w:tc>
      <w:tcPr>
        <w:tcW w:type="dxa" w:w="4788"/>
      </w:tcPr>
      <w:p/>
    </w:tc>
  </w:tr>
  <w:tr>
    <w:tc>
      <w:tcPr>
        <w:tcW w:type="dxa" w:w="4788"/>
      </w:tcPr>
      <w:p/>
    </w:tc>
    <w:tc>
      <w:tcPr>
        <w:tcW w:type="dxa" w:w="4788"/>
      </w:tcPr>
      <w:p/>
    </w:tc>
  </w:tr>
</w:tbl>
```

----------------------------------------

TITLE: Default settings.xml Structure
DESCRIPTION: Provides an example of the default `settings.xml` part generated for a new document in Word 2016. This XML structure contains various document-level settings such as zoom, default tab stop, compatibility options, revision IDs, math properties, theme fonts, and more.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_1

LANGUAGE: xml
CODE:
```
<?xml version='1.0' encoding='UTF-8' standalone='yes'?>
<w:settings
    xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:o="urn:schemas-microsoft-com:office:office"
    xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"
    xmlns:sl="http://schemas.openxmlformats.org/schemaLibrary/2006/main"
    xmlns:v="urn:schemas-microsoft-com:vml"
    xmlns:w10="urn:schemas-microsoft-com:office:word"
    xmlns:w14="http://schemas.microsoft.com/office/word/2010/wordml"
    xmlns:w15="http://schemas.microsoft.com/office/word/2012/wordml"
    xmlns:w16cid="http://schemas.microsoft.com/office/word/2016/wordml/cid"
    xmlns:w16se="http://schemas.microsoft.com/office/word/2015/wordml/symex"
    xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"
    mc:Ignorable="w14 w15 w16se w16cid"
    >
  <w:zoom w:percent="150"/>
  <w:defaultTabStop w:val="720"/>
  <w:characterSpacingControl w:val="doNotCompress"/>
  <w:compat>
    <w:compatSetting w:name="compatibilityMode" w:uri="http://schemas.microsoft.com/office/word" w:val="15"/>
    <w:compatSetting w:name="overrideTableStyleFontSizeAndJustification" w:uri="http://schemas.microsoft.com/office/word" w:val="1"/>
    <w:compatSetting w:name="enableOpenTypeFeatures" w:uri="http://schemas.microsoft.com/office/word" w:val="1"/>
    <w:compatSetting w:name="doNotFlipMirrorIndents" w:uri="http://schemas.microsoft.com/office/word" w:val="1"/>
    <w:compatSetting w:name="differentiateMultirowTableHeaders" w:uri="http://schemas.microsoft.com/office/word" w:val="1"/>
    <w:compatSetting w:name="useWord2013TrackBottomHyphenation" w:uri="http://schemas.microsoft.com/office/word" w:val="0"/>
  </w:compat>
  <w:rsids>
    <w:rsidRoot w:val="005968A6"/>
    <w:rsid w:val="00480A2E"/>
    <w:rsid w:val="005968A6"/>
  </w:rsids>
  <m:mathPr>
    <m:mathFont m:val="Cambria Math"/>
    <m:brkBin m:val="before"/>
    <m:brkBinSub m:val="--"/>
    <m:smallFrac m:val="0"/>
    <m:dispDef/>
    <m:lMargin m:val="0"/>
    <m:rMargin m:val="0"/>
    <m:defJc m:val="centerGroup"/>
    <m:wrapIndent m:val="1440"/>
    <m:intLim m:val="subSup"/>
    <m:naryLim m:val="undOvr"/>
  </m:mathPr>
  <w:themeFontLang w:val="en-US"/>
  <w:clrSchemeMapping w:bg1="light1" w:t1="dark1" w:bg2="light2" w:t2="dark2" w:accent1="accent1" w:accent2="accent2" w:accent3="accent3" w:accent4="accent4" w:accent5="accent5" w:accent6="accent6" w:hyperlink="hyperlink" w:followedHyperlink="followedHyperlink"/>
  <w:decimalSymbol w:val="."/>
  <w:listSeparator w:val=","/>
  <w15:chartTrackingRefBased/>
  <w15:docId w15:val="{3E989880-FF70-7C4D-8D4E-02DC7E104B81}"/>
</w:settings>
```

----------------------------------------

TITLE: Defining CT_Style XML Type
DESCRIPTION: Defines the complex type for a WordprocessingML style, including its properties (paragraph, run, table, etc.) and attributes like type, styleId, and default status. It contains a sequence of optional elements representing various style properties and attributes defining the style's identity and behavior.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/index.rst#_snippet_2

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_Style">
    <xsd:sequence>
      <xsd:element name="name"            type="CT_String"        minOccurs="0"/>
      <xsd:element name="aliases"         type="CT_String"        minOccurs="0"/>
      <xsd:element name="basedOn"         type="CT_String"        minOccurs="0"/>
      <xsd:element name="next"            type="CT_String"        minOccurs="0"/>
      <xsd:element name="link"            type="CT_String"        minOccurs="0"/>
      <xsd:element name="autoRedefine"    type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="hidden"          type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="uiPriority"      type="CT_DecimalNumber" minOccurs="0"/>
      <xsd:element name="semiHidden"      type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="unhideWhenUsed"  type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="qFormat"         type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="locked"          type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="personal"        type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="personalCompose" type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="personalReply"   type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="rsid"            type="CT_LongHexNumber" minOccurs="0"/>
      <xsd:element name="pPr"             type="CT_PPrGeneral"    minOccurs="0"/>
      <xsd:element name="rPr"             type="CT_RPr"           minOccurs="0"/>
      <xsd:element name="tblPr"           type="CT_TblPrBase"     minOccurs="0"/>
      <xsd:element name="trPr"            type="CT_TrPr"          minOccurs="0"/>
      <xsd:element name="tcPr"            type="CT_TcPr"          minOccurs="0"/>
      <xsd:element name="tblStylePr"      type="CT_TblStylePr"    minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="type"        type="ST_StyleType"/>
    <xsd:attribute name="styleId"     type="s:ST_String"/>
    <xsd:attribute name="default"     type="s:ST_OnOff"/>
    <xsd:attribute name="customStyle" type="s:ST_OnOff"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: XML for Paragraph with No Font Color
DESCRIPTION: Provides the WordprocessingML XML structure for a paragraph containing a run of text that has no specific font color applied. The run properties (<w:rPr>) element is present but lacks the <w:color> child element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_8

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:t>Text with no color.</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: WordprocessingML XML for Intra-run Page Break (Simplified)
DESCRIPTION: Provides a simplified WordprocessingML XML structure where a page break (<w:br w:type="page"/>) is placed within a single run. Word accepts this but modifies it upon saving.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/breaks.rst#_snippet_5

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:t>Text before an intra-run page break</w:t>
    <w:br w:type="page"/>
    <w:t>Text after an intra-run page break</w:t>
  </w:r>
</w:p>
<w:p>
  <w:r>
    <w:t>following paragraph</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: XML Representation of Semi-Hidden Style (Alternate True)
DESCRIPTION: Shows an alternate WordprocessingML XML structure where the 'semi-hidden' property is explicitly set to True using @w:val="1". The documentation notes that python-docx would interpret this as True but does not write XML this way.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_5

LANGUAGE: XML
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
  <w:semiHidden w:val="1"/>  <!-- style.hidden is True -->
</w:style>
```

----------------------------------------

TITLE: OpenXML Enable Odd/Even Headers
DESCRIPTION: Demonstrates the OpenXML element `<w:evenAndOddHeaders w:val="1"/>` within the `<w:settings>` part, which enables different headers for odd and even pages in the document.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_9

LANGUAGE: XML
CODE:
```
<w:settings xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
   ...
   <w:evenAndOddHeaders w:val="1"/>
   ...
</w:settings>
```

----------------------------------------

TITLE: WordprocessingML XML for Line Break (Word Produced)
DESCRIPTION: Shows the WordprocessingML XML structure generated by Microsoft Word when a line break is inserted using Shift-Enter. The break element <w:br/> is placed in a new run.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/breaks.rst#_snippet_1

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:t>Text before</w:t>
  </w:r>
  <w:r>
    <w:br/>
    <w:t>and after line break</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: XML Representation of Semi-Hidden Style (Alternate False)
DESCRIPTION: Shows an alternate WordprocessingML XML structure where the 'semi-hidden' property is explicitly set to False using @w:val="0". The documentation notes that python-docx would interpret this as False but does not write XML this way.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_4

LANGUAGE: XML
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
  <w:semiHidden w:val="0"/>  <!-- style.hidden is False -->
</w:style>
```

----------------------------------------

TITLE: Applying Theme Color with Shade in WordprocessingML XML
DESCRIPTION: This XML snippet shows how to apply a theme color ('accent2') with a specific shade ('BF' representing 25%) to a text run (w:r) using the w:color element within the run properties (w:rPr). The w:val attribute seems redundant when themeColor and themeShade are used, but is included in the example.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_12

LANGUAGE: XML
CODE:
```
<w:r>
  <w:rPr>
    <w:color w:val="943634" w:themeColor="accent2" w:themeShade="BF"/>
  </w:rPr>
  <w:t>Theme color with 25% shade.</w:t>
</w:r>
```

----------------------------------------

TITLE: Mapping WD_COLOR_INDEX to XML Highlight Values
DESCRIPTION: Provides the mapping between the `WD_COLOR_INDEX` enumeration members used in `python-docx` and the corresponding string values used in the `w:val` attribute of the `<w:highlight>` XML element in the Open XML document.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-highlight-color.rst#_snippet_1

LANGUAGE: Python
CODE:
```
AUTO = 'default'
BLACK = 'black'
BLUE = 'blue'
BRIGHTGREEN = 'green'
DARKBLUE = 'darkBlue'
DARKRED = 'darkRed'
DARKYELLOW = 'darkYellow'
GRAY25 = 'lightGray'
GRAY50 = 'darkGray'
GREEN = 'darkGreen'
PINK = 'magenta'
RED = 'red'
TEAL = 'darkCyan'
TURQUOISE = 'cyan'
VOILET = 'darkMagenta'
WHITE = 'white'
YELLOW = 'yellow'
```

----------------------------------------

TITLE: WordprocessingML XML for Merged Table
DESCRIPTION: Provides a specimen of WordprocessingML (WML) XML showing how a 3x3 table with a 2x2 top-left merged area is represented. It illustrates the use of w:gridSpan for horizontal merging and w:vMerge for vertical merging, as produced by Microsoft Word.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_7

LANGUAGE: XML
CODE:
```
<w:tbl>
  <w:tblPr>
     <w:tblW w:w="0" w:type="auto" />
  </w:tblPr>
  <w:tblGrid>
     <w:gridCol w:w="3192" />
     <w:gridCol w:w="3192" />
     <w:gridCol w:w="3192" />
  </w:tblGrid>
  <w:tr>
     <w:tc>
        <w:tcPr>
           <w:tcW w:w="6384" w:type="dxa" />
           <w:gridSpan w:val="2" />
           <w:vMerge w:val="restart" />
        </w:tcPr>
     </w:tc>
     <w:tc>
        <w:tcPr>
           <w:tcW w:w="3192" w:type="dxa" />
        </w:tcPr>
     </w:tc>
  </w:tr>
  <w:tr>
     <w:tc>
        <w:tcPr>
           <w:tcW w:w="6384" w:type="dxa" />
           <w:gridSpan w:val="2" />
           <w:vMerge />
        </w:tcPr>
     </w:tc>
     <w:tc>
        <w:tcPr>
           <w:tcW w:w="3192" w:type="dxa" />
        </w:tcPr>
     </w:tc>
  </w:tr>
  <w:tr>
     <w:tc>
        <w:tcPr>
           <w:tcW w:w="3192" w:type="dxa" />
        </w:tcPr>
     </w:tc>
     <w:tc>
        <w:tcPr>
           <w:tcW w:w="3192" w:type="dxa" />
        </w:tcPr>
     </w:tc>
     <w:tc>
        <w:tcPr>
           <w:tcW w:w="3192" w:type="dxa" />
        </w:tcPr>
     </w:tc>
  </w:tr>
</w:tbl>
```

----------------------------------------

TITLE: OpenXML Default and Even Header References
DESCRIPTION: Displays the OpenXML structure within `<w:sectPr>` when both a default header and a specific even page header are referenced, using `w:type="default"` and `w:type="even"`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_10

LANGUAGE: XML
CODE:
```
<w:sectPr>
    <w:headerReference w:type="default" r:id="rId3"/>
    <w:headerReference w:type="even" r:id="rId4"/>
    ...
</w:sectPr>
```

----------------------------------------

TITLE: XML for Run with Theme Font Color
DESCRIPTION: Provides the WordprocessingML XML structure showing how a theme color is represented. The color is specified using the <w:color> element with the w:themeColor attribute set to the theme color name within the run properties (<w:rPr>).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_10

LANGUAGE: XML
CODE:
```
<w:r>
  <w:rPr>
    <w:color w:val="4F81BD" w:themeColor="accent1"/>
  </w:rPr>
  <w:t>Theme color Accent 1.</w:t>
</w:r>
```

----------------------------------------

TITLE: OpenXML Default and First Page Header References
DESCRIPTION: Shows the OpenXML structure within `<w:sectPr>` for referencing a default header and a distinct first page header (`w:type="first"`), along with the `<w:titlePg/>` element which indicates a different first page layout.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_11

LANGUAGE: XML
CODE:
```
<w:sectPr>
    <w:headerReference w:type="default" r:id="rId3"/>
    <w:headerReference w:type="first" r:id="rId4"/>
    <w:titlePg/>
    ...
</w:sectPr>
```

----------------------------------------

TITLE: WordprocessingML XML for Page Break (Word Produced)
DESCRIPTION: Displays the WordprocessingML XML generated by Microsoft Word after inserting a hard page break between two paragraphs. Note the creation of a new run containing the <w:br w:type="page"/> element and the addition of bookmarks.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/breaks.rst#_snippet_4

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:t>Before inserting a page break, the cursor was here }</w:t>
  </w:r>
</w:p>
<w:p>
  <w:r>
    <w:br w:type="page"/>
  </w:r>
</w:p>
<w:p>
  <w:bookmarkStart w:id="0" w:name="_GoBack"/>
  <w:bookmarkEnd w:id="0"/>
</w:p>
<w:p>
  <w:r>
    <w:t>This was the following paragraph, the last in the document</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Minimal OpenXML for Inline Picture
DESCRIPTION: Shows the minimum required DrawingML XML structure (`<pic:pic>`) to embed an inline picture in a Word document. It includes non-visual properties, the blip fill referencing the image part via r:embed, and shape properties defining position and size.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_1

LANGUAGE: xml
CODE:
```
<pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture">
  <pic:nvPicPr>
    <pic:cNvPr id="1" name="python-powered.png"/>
    <pic:cNvPicPr/>
  </pic:nvPicPr>
  <pic:blipFill>
    <a:blip r:embed="rId7"/>
    <a:stretch>
      <a:fillRect/>
    </a:stretch>
  </pic:blipFill>
  <pic:spPr>
    <a:xfrm>
      <a:off x="0" y="0"/>
      <a:ext cx="859536" cy="343814"/>
    </a:xfrm>
    <a:prstGeom prst="rect"/>
  </pic:spPr>
</pic:pic>
```

----------------------------------------

TITLE: WordprocessingML XML for Inline Picture Shape
DESCRIPTION: This XML snippet shows the structure within a <w:p> (paragraph) element that represents an inline picture shape. Key elements include <w:drawing>, <wp:inline> with <wp:extent> specifying dimensions, and <a:graphicData> containing the <pic:pic> element for the picture details, including its own <a:ext> for dimensions.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/shapes-inline-size.rst#_snippet_1

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:rPr/>
      <w:noProof/>
    </w:rPr>
    <w:drawing>
      <wp:inline distT="0" distB="0" distL="0" distR="0" wp14:anchorId="1BDE1558" wp14:editId="31E593BB">
        <wp:extent cx="859536" cy="343814"/>
        <wp:effectExtent l="0" t="0" r="4445" b="12065"/>
        <wp:docPr id="1" name="Picture 1"/>
        <wp:cNvGraphicFramePr>
          <a:graphicFrameLocks xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" noChangeAspect="1"/>
        </wp:cNvGraphicFramePr>
        <a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main">
          <a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture">

            <pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture">
              <pic:nvPicPr>
                <pic:cNvPr id="1" name="python-powered.png"/>
                <pic:cNvPicPr/>
              </pic:nvPicPr>
              <pic:blipFill>
                <a:blip r:embed="rId7">
                  <a:alphaModFix/>
                  <a:extLst>
                    <a:ext uri="{28A0092B-C50C-407E-A947-70E740481C1C}">
                      <a14:useLocalDpi xmlns:a14="http://schemas.microsoft.com/office/drawing/2010/main" val="0"/>
                    </a:ext>
                  </a:extLst>
                </a:blip>
                <a:stretch>
                  <a:fillRect/>
                </a:stretch>
              </pic:blipFill>
              <pic:spPr>
                <a:xfrm>
                  <a:off x="0" y="0"/>
                  <a:ext cx="859536" cy="343814"/>
                </a:xfrm>
                <a:prstGeom prst="rect">
                  <a:avLst/>
                </a:prstGeom>
              </pic:spPr>
            </pic:pic>

          </a:graphicData>
        </a:graphic>
      </wp:inline>
    </w:drawing>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Manually install python-docx from source
DESCRIPTION: Installs the python-docx library manually by downloading the source tarball, extracting it, and running the setup.py script. This method requires manual installation of dependencies like lxml.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/user/install.rst#_snippet_2

LANGUAGE: bash
CODE:
```
tar xvzf python-docx-{version}.tar.gz
cd python-docx-{version}
python setup.py install
```

----------------------------------------

TITLE: Specimen XML for w:latentStyles Element
DESCRIPTION: Shows an example of the w:latentStyles XML element as it might appear in a Word document's styles.xml, illustrating the attributes that correspond to the LatentStyles properties.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/latent-styles.rst#_snippet_4

LANGUAGE: xml
CODE:
```
<w:latentStyles w:defLockedState="0" w:defUIPriority="99" w:defSemiHidden="1"
                  w:defUnhideWhenUsed="1" w:defQFormat="0" w:count="276">
```

----------------------------------------

TITLE: XML After Odd-Page Section Break Before Paragraph 1
DESCRIPTION: This XML snippet shows the document structure after inserting an odd-page section break before the first paragraph. A new <w:sectPr> element is added to the first paragraph's properties, and a new empty paragraph is inserted immediately after it.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/sections.rst#_snippet_1

LANGUAGE: xml
CODE:
```
<w:body>
  <w:p>
    <w:pPr>
      <w:sectPr>
        <w:pgSz w:w="12240" w:h="15840"/>
        <w:pgMar w:top="1440" w:right="1800" w:bottom="1440" w:left="1800"
                 w:header="720" w:footer="720" w:gutter="0"/>
        <w:cols w:space="720"/>
        <w:docGrid w:linePitch="360"/>
      </w:sectPr>
    </w:pPr>
    <w:r>
      <w:t>Paragraph 1</w:t>
    </w:r>
  </w:p>
  <w:p/>
  <w:p>
    <w:r>
      <w:t>Paragraph 2</w:t>
    </w:r>
  </w:p>
  <w:sectPr w:rsidR="00F039D0" w:rsidSect="006006E7">
    <w:type w:val="oddPage"/>
    <w:pgSz w:w="12240" w:h="15840"/>
    <w:pgMar w:top="1440" w:right="1800" w:bottom="1440" w:left="1800"
             w:header="720" w:footer="720" w:gutter="0"/>
    <w:cols w:space="720"/>
    <w:docGrid w:linePitch="360"/>
  </w:sectPr>
</w:body>
```

----------------------------------------

TITLE: Representing External Hyperlinks in WordprocessingML XML
DESCRIPTION: Shows the XML structure within `document.xml` for a paragraph containing an external hyperlink. The link is identified by an `r:id` attribute referencing a relationship in `document.xml.rels`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_15

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:t xml:space="preserve">This is an external link to </w:t>
  </w:r>
  <w:hyperlink r:id="rId4">
    <w:r>
      <w:rPr>
        <w:rStyle w:val="Hyperlink"/>
      </w:rPr>
      <w:t>Google</w:t>
    </w:r>
  </w:hyperlink>
</w:p>
```

----------------------------------------

TITLE: WordprocessingML for Paragraph with Inherited Alignment
DESCRIPTION: Shows the basic XML structure for a paragraph (w:p) containing a run (w:r) with text (w:t), where the paragraph alignment is not explicitly set and thus inherited from styles or defaults.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_11

LANGUAGE: xml
CODE:
```
<w:p>
  <w:r>
    <w:t>Inherited paragraph alignment.</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Defining External Hyperlink Relationships in document.xml.rels
DESCRIPTION: Illustrates the corresponding entry in the `document.xml.rels` file that defines the target URL for an external hyperlink referenced by its `Id` attribute.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_16

LANGUAGE: XML
CODE:
```
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
  <Relationship Id="rId4" Mode="External" Type="http://..." Target="http://google.com/"/>
</Relationships>
```

----------------------------------------

TITLE: Single Underline Run XML (XML)
DESCRIPTION: Illustrates the XML representation for a run explicitly formatted with single underlining using the `w:u` element with `w:val="single"`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/underline.rst#_snippet_2

LANGUAGE: XML
CODE:
```
<w:r>
  <w:rPr>
    <w:u w:val="single"/>
  </w:rPr>
  <w:t>single underlined</w:t>
</w:r>
```

----------------------------------------

TITLE: XML After Even-Page Section Break Before Paragraph 2
DESCRIPTION: This XML snippet shows the document structure after inserting an even-page section break before the second paragraph. The <w:sectPr> element is added to the properties of the paragraph that *starts* the new section (Paragraph 2), and a <w:lastRenderedPageBreak/> element is included in its run.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/sections.rst#_snippet_2

LANGUAGE: xml
CODE:
```
<w:body>
  <w:p>
    <w:r>
      <w:t>Paragraph 1</w:t>
    </w:r>
  </w:p>
  <w:p>
    <w:pPr>
      <w:sectPr>
        <w:type w:val="oddPage"/>
        <w:pgSz w:w="12240" w:h="15840"/>
        <w:pgMar w:top="1440" w:right="1800" w:bottom="1440" w:left="1800"
                 w:header="720" w:footer="720" w:gutter="0"/>
        <w:cols w:space="720"/>
        <w:docGrid w:linePitch="360"/>
      </w:sectPr>
    </w:pPr>
  </w:p>
  <w:p>
    <w:r>
      <w:lastRenderedPageBreak/>
      <w:t>Paragraph 2</w:t>
    </w:r>
  </w:p>
  <w:sectPr>
    <w:type w:val="evenPage"/>
    <w:pgSz w:w="12240" w:h="15840"/>
    <w:pgMar w:top="1440" w:right="1800" w:bottom="1440" w:left="1800"
             w:header="720" w:footer="720" w:gutter="0"/>
    <w:cols w:space="720"/>
    <w:docGrid w:linePitch="360"/>
  </w:sectPr>
</w:body>
```

----------------------------------------

TITLE: WordprocessingML Section Properties Schema Excerpt
DESCRIPTION: This XML schema excerpt defines the structure for paragraph properties (CT_PPr) and section properties (CT_SectPr) in WordprocessingML. It includes definitions for elements like sectPr, pPrChange, headerReference, footerReference, pgSz (page size), pgMar (page margins), and types for section breaks (ST_SectionMark) and page orientation (ST_PageOrientation).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/sections.rst#_snippet_3

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_PPr">  <!-- denormalized -->
  <xsd:sequence>
    <!-- 34 others ... -->
    <xsd:element name="sectPr"    type="CT_SectPr"    minOccurs="0"/>
    <xsd:element name="pPrChange" type="CT_PPrChange" minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_SectPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="6"/>
      <xsd:element name="headerReference" type="CT_HdrFtrRef"/>
      <xsd:element name="footerReference" type="CT_HdrFtrRef"/>
    </xsd:choice>
    <xsd:element name="footnotePr"      type="CT_FtnProps"      minOccurs="0"/>
    <xsd:element name="endnotePr"       type="CT_EdnProps"      minOccurs="0"/>
    <xsd:element name="type"            type="CT_SectType"      minOccurs="0"/>
    <xsd:element name="pgSz"            type="CT_PageSz"        minOccurs="0"/>
    <xsd:element name="pgMar"           type="CT_PageMar"       minOccurs="0"/>
    <xsd:element name="paperSrc"        type="CT_PaperSource"   minOccurs="0"/>
    <xsd:element name="pgBorders"       type="CT_PageBorders"   minOccurs="0"/>
    <xsd:element name="lnNumType"       type="CT_LineNumber"    minOccurs="0"/>
    <xsd:element name="pgNumType"       type="CT_PageNumber"    minOccurs="0"/>
    <xsd:element name="cols"            type="CT_Columns"       minOccurs="0"/>
    <xsd:element name="formProt"        type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="vAlign"          type="CT_VerticalJc"    minOccurs="0"/>
    <xsd:element name="noEndnote"       type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="titlePg"         type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="textDirection"   type="CT_TextDirection" minOccurs="0"/>
    <xsd:element name="bidi"            type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="rtlGutter"       type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="docGrid"         type="CT_DocGrid"       minOccurs="0"/>
    <xsd:element name="printerSettings" type="CT_Rel"           minOccurs="0"/>
    <xsd:element name="sectPrChange"    type="CT_SectPrChange"  minOccurs="0"/>
  </xsd:sequence>
  <xsd:attribute name="rsidRPr"  type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidDel"  type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidR"    type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidSect" type="ST_LongHexNumber"/>
</xsd:complexType>

<xsd:complexType name="CT_HdrFtrRef">
  <xsd:attribute  ref="r:id"                  use="required"/>
  <xsd:attribute name="type" type="ST_HdrFtr" use="required"/>
</xsd:complexType>

<xsd:simpleType name="ST_HdrFtr">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="even"/>
    <xsd:enumeration value="default"/>
    <xsd:enumeration value="first"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:complexType name="CT_SectType">
  <xsd:attribute name="val" type="ST_SectionMark"/>
</xsd:complexType>

<xsd:simpleType name="ST_SectionMark">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="nextPage"/>
    <xsd:enumeration value="nextColumn"/>
    <xsd:enumeration value="continuous"/>
    <xsd:enumeration value="evenPage"/>
    <xsd:enumeration value="oddPage"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:complexType name="CT_PageSz">
  <xsd:attribute name="w"      type="s:ST_TwipsMeasure"/>
  <xsd:attribute name="h"      type="s:ST_TwipsMeasure"/>
  <xsd:attribute name="orient" type="ST_PageOrientation"/>
  <xsd:attribute name="code"   type="ST_DecimalNumber"/>
</xsd:complexType>

<xsd:simpleType name="ST_PageOrientation">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="portrait"/>
    <xsd:enumeration value="landscape"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:complexType name="CT_PageMar">
  <xsd:attribute name="top"    type="ST_SignedTwipsMeasure" use="required"/>
  <xsd:attribute name="right"  type="s:ST_TwipsMeasure"     use="required"/>
  <xsd:attribute name="bottom" type="ST_SignedTwipsMeasure" use="required"/>
  <xsd:attribute name="left"   type="s:ST_TwipsMeasure"     use="required"/>
  <xsd:attribute name="header" type="s:ST_TwipsMeasure"     use="required"/>
  <xsd:attribute name="footer" type="s:ST_TwipsMeasure"     use="required"/>
  <xsd:attribute name="gutter" type="s:ST_TwipsMeasure"     use="required"/>
</xsd:complexType>

<xsd:simpleType name="ST_SignedTwipsMeasure">
```

----------------------------------------

TITLE: Core Properties Schema Excerpt (XSD)
DESCRIPTION: Provides a partial XML Schema Definition (XSD) showing the target namespace and default namespace declaration for the core properties schema, defining the structure and types for the core.xml part in an Open XML package.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/coreprops.rst#_snippet_2

LANGUAGE: XSD
CODE:
```
<xs:schema
  targetNamespace="http://schemas.openxmlformats.org/package/2006/metadata/core-properties"
  xmlns="http://schemas.openxmlformats.org/package/2006/metadata/core-properties"
>
```

----------------------------------------

TITLE: WordprocessingML XML for Intra-run Page Break (Word Saved)
DESCRIPTION: Shows the WordprocessingML XML structure that Microsoft Word produces when saving a document containing a simplified intra-run page break. The single run is split into multiple runs around the break element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/breaks.rst#_snippet_6

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:t>Text before an intra-run page break</w:t>
  </w:r>
  <w:r>
    <w:br w:type="page"/>
  </w:r>
  <w:r>
    <w:lastRenderedPageBreak/>
    <w:t>Text after an intra-run page break</w:t>
  </w:r>
</w:p>
<w:p>
  <w:r>
    <w:t>following paragraph</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Define 'alwaysShowPlaceholderText' Element
DESCRIPTION: Defines the 'alwaysShowPlaceholderText' element, a boolean flag (CT_OnOff) indicating whether placeholder text should always be displayed. It is optional.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_59

LANGUAGE: XML
CODE:
```
<xsd:element name="alwaysShowPlaceholderText"  type="CT_OnOff"           minOccurs="0"/>
```

----------------------------------------

TITLE: XML Schema for Styles and Latent Styles
DESCRIPTION: This schema excerpt defines the complex types (`CT_Styles`, `CT_LatentStyles`, `CT_LsdException`) and simple types (`ST_OnOff`, `ST_String`) used to structure and validate the XML elements related to styles and latent style exceptions within the WordprocessingML schema.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/latent-styles.rst#_snippet_7

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Styles">
    <xsd:sequence>
      <xsd:element name="docDefaults"  type="CT_DocDefaults"  minOccurs="0"/>
      <xsd:element name="latentStyles" type="CT_LatentStyles" minOccurs="0"/>
      <xsd:element name="style"        type="CT_Style"        minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CT_LatentStyles">
    <xsd:sequence>
      <xsd:element name="lsdException" type="CT_LsdException" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="defLockedState"    type="s:ST_OnOff"/>
    <xsd:attribute name="defUIPriority"     type="ST_DecimalNumber"/>
    <xsd:attribute name="defSemiHidden"     type="s:ST_OnOff"/>
    <xsd:attribute name="defUnhideWhenUsed" type="s:ST_OnOff"/>
    <xsd:attribute name="defQFormat"        type="s:ST_OnOff"/>
    <xsd:attribute name="count"             type="ST_DecimalNumber"/>
  </xsd:complexType>

  <xsd:complexType name="CT_LsdException">
    <xsd:attribute name="name"           type="s:ST_String"   use="required"/>
    <xsd:attribute name="locked"         type="s:ST_OnOff"/>
    <xsd:attribute name="uiPriority"     type="ST_DecimalNumber"/>
    <xsd:attribute name="semiHidden"     type="s:ST_OnOff"/>
    <xsd:attribute name="unhideWhenUsed" type="s:ST_OnOff"/>
    <xsd:attribute name="qFormat"        type="s:ST_OnOff"/>
  </xsd:complexType>

  <xsd:complexType name="CT_OnOff">
    <xsd:attribute name="val" type="s:ST_OnOff"/>
  </xsd:complexType>

  <xsd:complexType name="CT_String">
    <xsd:attribute name="val" type="s:ST_String" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="ST_OnOff">
    <xsd:union memberTypes="xsd:boolean ST_OnOff1"/>
  </xsd:simpleType>

  <xsd:simpleType name="ST_OnOff1">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="on"/>
      <xsd:enumeration value="off"/>
    </xsd:restriction>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Double Underline Run XML (XML)
DESCRIPTION: Shows the XML structure for a run formatted with double underlining, using the `w:u` element with `w:val="double"`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/underline.rst#_snippet_3

LANGUAGE: XML
CODE:
```
<w:r>
  <w:rPr>
    <w:u w:val="double"/>
  </w:rPr>
  <w:t>single underlined</w:t>
</w:r>
```

----------------------------------------

TITLE: XML Schema Definition for CT_Style
DESCRIPTION: Provides the XML Schema definition for the CT_Style complex type, outlining the sequence of optional elements that can appear within a style definition, including name, basedOn, next, link, and various property elements.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/paragraph-style.rst#_snippet_2

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Style">
  <xsd:sequence>
    <xsd:element name="name"            type="CT_String"        minOccurs="0"/>
    <xsd:element name="aliases"         type="CT_String"        minOccurs="0"/>
    <xsd:element name="basedOn"         type="CT_String"        minOccurs="0"/>
    <xsd:element name="next"            type="CT_String"        minOccurs="0"/>
    <xsd:element name="link"            type="CT_String"        minOccurs="0"/>
    <xsd:element name="autoRedefine"    type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="hidden"          type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="uiPriority"      type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="semiHidden"      type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="unhideWhenUsed"  type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="qFormat"         type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="locked"          type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="personal"        type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="personalCompose" type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="personalReply"   type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="rsid"            type="CT_LongHexNumber" minOccurs="0"/>
    <xsd:element name="pPr"             type="CT_PPrGeneral"    minOccurs="0"/>
    <xsd:element name="rPr"             type="CT_RPr"           minOccurs="0"/>
    <xsd:element name="tblPr"           type="CT_TblPrBase"     minOccurs="0"/>
    <xsd:element name="trPr"            type="CT_TrPr"            minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>
```

----------------------------------------

TITLE: Example WordprocessingML Styles XML
DESCRIPTION: Provides an example of the XML structure for the w:styles part within a .docx file, showing docDefaults, latentStyles, and various style definitions.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/styles.rst#_snippet_5

LANGUAGE: xml
CODE:
```
<?xml version='1.0' encoding='UTF-8' standalone='yes'?>
<w:styles
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"
    xmlns:w14="http://schemas.microsoft.com/office/word/2010/wordml"
    xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"
    mc:Ignorable="w14"
    >

  <w:docDefaults>
    <w:rPrDefault>
      <w:rPr>
        <w:rFonts w:asciiTheme="minorHAnsi" w:eastAsiaTheme="minorEastAsia"
                  w:hAnsiTheme="minorHAnsi" w:cstheme="minorBidi"/>
        <w:sz w:val="24"/>
        <w:szCs w:val="24"/>
        <w:lang w:val="en-US" w:eastAsia="en-US" w:bidi="ar-SA"/>
      </w:rPr>
    </w:rPrDefault>
    <w:pPrDefault/>
  </w:docDefaults>

  <w:latentStyles w:defLockedState="0" w:defUIPriority="99" w:defSemiHidden="1"
                  w:defUnhideWhenUsed="1" w:defQFormat="0" w:count="276">
    <w:lsdException w:name="Normal" w:semiHidden="0" w:uiPriority="0"
                    w:unhideWhenUsed="0" w:qFormat="1"/>
    <w:lsdException w:name="heading 1" w:semiHidden="0" w:uiPriority="9"
                    w:unhideWhenUsed="0" w:qFormat="1"/>
    <w:lsdException w:name="heading 2" w:uiPriority="9" w:qFormat="1"/>
    <w:lsdException w:name="Default Paragraph Font" w:uiPriority="1"/>
  </w:latentStyles>

  <w:style w:type="paragraph" w:default="1" w:styleId="Normal">
    <w:name w:val="Normal"/>
    <w:qFormat/>
  </w:style>
  <w:style w:type="character" w:default="1" w:styleId="DefaultParagraphFont">
    <w:name w:val="Default Paragraph Font"/>
    <w:uiPriority w:val="1"/>
    <w:semiHidden/>
    <w:unhideWhenUsed/>
  </w:style>
  <w:style w:type="table" w:default="1" w:styleId="TableNormal">
    <w:name w:val="Normal Table"/>
    <w:uiPriority w:val="99"/>
    <w:semiHidden/>
    <w:unhideWhenUsed/>
    <w:tblPr>
      <w:tblInd w:w="0" w:type="dxa"/>
      <w:tblCellMar>
        <w:top w:w="0" w:type="dxa"/>
        <w:left w:w="108" w:type="dxa"/>
        <w:bottom w:w="0" w:type="dxa"/>
        <w:right w:w="108" w:type="dxa"/>
      </w:tblCellMar>
    </w:tblPr>
  </w:style>
  <w:style w:type="numbering" w:default="1" w:styleId="NoList">
    <w:name w:val="No List"/>
    <w:uiPriority w:val="99"/>
    <w:semiHidden/>
    <w:unhideWhenUsed/>
  </w:style>
  <w:style w:type="paragraph" w:customStyle="1" w:styleId="Foobar">
    <w:name w:val="Foobar"/>
    <w:qFormat/>
    <w:rsid w:val="004B54E0"/>
  </w:style>

</w:styles>
```

----------------------------------------

TITLE: Define 'useXSLTWhenSaving' Element
DESCRIPTION: Defines the 'useXSLTWhenSaving' element, a boolean flag (CT_OnOff) indicating whether XSLT should be used during saving. It is optional.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_62

LANGUAGE: XML
CODE:
```
<xsd:element name="useXSLTWhenSaving"          type="CT_OnOff"           minOccurs="0"/>
```

----------------------------------------

TITLE: XML Schema Definition for CT_PPr (Paragraph Properties)
DESCRIPTION: Provides an excerpt from the XML Schema Definition (XSD) for the CT_PPr complex type, which defines the structure and elements allowed within the paragraph properties element (w:pPr) in WordprocessingML. It lists various potential child elements and their types.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_13

LANGUAGE: xsd
CODE:
```
<xsd:complexType name="CT_PPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:element name="pStyle"              type="CT_String"           minOccurs="0"/>
    <xsd:element name="keepNext"            type="CT_OnOff"            minOccurs="0"/>
    <xsd:element name="keepLines"           type="CT_OnOff"            minOccurs="0"/>
    <xsd:element name="pageBreakBefore"     type="CT_OnOff"            minOccurs="0"/>
    <xsd:element name="framePr"             type="CT_FramePr"          minOccurs="0"/>
    <xsd:element name="widowControl"        type="CT_OnOff"            minOccurs="0"/>
    <xsd:element name="numPr"               type="CT_NumPr"            minOccurs="0"/>
    <xsd:element name="suppressLineNumbers" type="CT_OnOff"            minOccurs="0"/>
    <xsd:element name="pBdr"                type="CT_PBdr"             minOccurs="0"/>
    <xsd:element name="shd"                 type="CT_Shd"              minOccurs="0"/>
    <xsd:element name="tabs"                type="CT_Tabs"             minOccurs="0"/>
    <xsd:element name="suppressAutoHyphens" type="CT_OnOff"            minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>
```

----------------------------------------

TITLE: XML Schema Definition for CT_P (Paragraph)
DESCRIPTION: Provides the XML Schema definition for the `CT_P` complex type, which represents a paragraph in WordprocessingML, showing its structure including properties and content elements.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_20

LANGUAGE: XSD
CODE:
```
<xsd:complexType name="CT_P">
  <xsd:sequence>
    <xsd:element name="pPr" type="CT_PPr" minOccurs="0"/>
    <xsd:group   ref="EG_PContent"        minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="rsidRPr"      type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidR"        type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidDel"      type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidP"        type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidRDefault" type="ST_LongHexNumber"/>
</xsd:complexType>
```

----------------------------------------

TITLE: WordprocessingML for Unhide When Used False (XML)
DESCRIPTION: Shows the WordprocessingML XML structure for a style when its `unhide_when_used` property is set to `False` in `python-docx`. It demonstrates the absence of the `<w:semiHidden/>` and `<w:unhideWhenUsed/>` elements.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_8

LANGUAGE: xml
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
</w:style>
```

----------------------------------------

TITLE: Define 'doNotDemarcateInvalidXml' Element
DESCRIPTION: Defines the 'doNotDemarcateInvalidXml' element, a boolean flag (CT_OnOff) indicating whether invalid XML should not be demarcated. It is optional.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_60

LANGUAGE: XML
CODE:
```
<xsd:element name="doNotDemarcateInvalidXml"   type="CT_OnOff"           minOccurs="0"/>
```

----------------------------------------

TITLE: WordprocessingML XML for Merged Table
DESCRIPTION: This XML snippet demonstrates the structure of a WordprocessingML table containing both horizontal and vertical merges. It shows the use of the `<w:tblGrid>` element to define columns, `<w:gridSpan>` for horizontal merging, and `<w:vMerge>` with `restart` and implicit `continue` values for vertical merging.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_5

LANGUAGE: xml
CODE:
```
<w:tbl>
  <w:tblGrid>
     <w:gridCol/>
     <w:gridCol/>
     <w:gridCol/>
  </w:tblGrid>
  <w:tr>
     <w:tc>
        <w:tcPr>
           <w:gridSpan w:val="2"/>
           <w:vMerge w:val="restart"/>
        </w:tcPr>
     </w:tc>
     <w:tc/>
  </w:tr>
  <w:tr>
     <w:tc>
        <w:tcPr>
           <w:gridSpan w:val="2"/>
           <w:vMerge/>
        </w:tcPr>
     </w:tc>
     <w:tc/>
  </w:tr>
  <w:tr>
     <w:tc/>
     <w:tc/>
     <w:tc/>
  </w:tr>
</w:tbl>
```

----------------------------------------

TITLE: XML for Run with Tinted Theme Font Color
DESCRIPTION: Provides the WordprocessingML XML structure showing how a theme color with a tint is represented. The tint is specified using the w:themeTint attribute on the <w:color> element, in addition to the w:themeColor attribute.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_11

LANGUAGE: XML
CODE:
```
<w:r>
  <w:rPr>
    <w:color w:val="548DD4" w:themeColor="text2" w:themeTint="99"/>
  </w:rPr>
  <w:t>Run with 40% tint of Text 2 theme color.</w:t>
</w:r>
```

----------------------------------------

TITLE: XML Representation of Semi-Hidden Style (True)
DESCRIPTION: Shows the WordprocessingML XML structure for a paragraph style named 'Foo' where the 'semi-hidden' property is set to True, indicated by the presence of the empty <w:semiHidden/> element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_2

LANGUAGE: XML
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
  <w:semiHidden/>
</w:style>
```

----------------------------------------

TITLE: Defining WordprocessingML Run Properties and Color Schema (XSD)
DESCRIPTION: This XML Schema Definition (XSD) excerpt defines the structure for run properties (CT_RPr) and the color element (CT_Color) in WordprocessingML. It details the various elements and attributes allowed within run properties and specifies the types for color values (ST_HexColor), theme colors (ST_ThemeColor), tints (ST_UcharHexNumber), and shades (ST_UcharHexNumber).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-color.rst#_snippet_13

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_RPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="rStyle"          type="CT_String"/>
      <xsd:element name="rFonts"          type="CT_Fonts"/>
      <xsd:element name="b"               type="CT_OnOff"/>
      <xsd:element name="bCs"             type="CT_OnOff"/>
      <xsd:element name="i"               type="CT_OnOff"/>
      <xsd:element name="iCs"             type="CT_OnOff"/>
      <xsd:element name="caps"            type="CT_OnOff"/>
      <xsd:element name="smallCaps"       type="CT_OnOff"/>
      <xsd:element name="strike"          type="CT_OnOff"/>
      <xsd:element name="dstrike"         type="CT_OnOff"/>
      <xsd:element name="outline"         type="CT_OnOff"/>
      <xsd:element name="shadow"          type="CT_OnOff"/>
      <xsd:element name="emboss"          type="CT_OnOff"/>
      <xsd:element name="imprint"         type="CT_OnOff"/>
      <xsd:element name="noProof"         type="CT_OnOff"/>
      <xsd:element name="snapToGrid"      type="CT_OnOff"/>
      <xsd:element name="vanish"          type="CT_OnOff"/>
      <xsd:element name="webHidden"       type="CT_OnOff"/>
      <xsd:element name="color"           type="CT_Color"/>
      <xsd:element name="spacing"         type="CT_SignedTwipsMeasure"/>
      <xsd:element name="w"               type="CT_TextScale"/>
      <xsd:element name="kern"            type="CT_HpsMeasure"/>
      <xsd:element name="position"        type="CT_SignedHpsMeasure"/>
      <xsd:element name="sz"              type="CT_HpsMeasure"/>
      <xsd:element name="szCs"            type="CT_HpsMeasure"/>
      <xsd:element name="highlight"       type="CT_Highlight"/>
      <xsd:element name="u"               type="CT_Underline"/>
      <xsd:element name="effect"          type="CT_TextEffect"/>
      <xsd:element name="bdr"             type="CT_Border"/>
      <xsd:element name="shd"             type="CT_Shd"/>
      <xsd:element name="fitText"         type="CT_FitText"/>
      <xsd:element name="vertAlign"       type="CT_VerticalAlignRun"/>
      <xsd:element name="rtl"             type="CT_OnOff"/>
      <xsd:element name="cs"              type="CT_OnOff"/>
      <xsd:element name="em"              type="CT_Em"/>
      <xsd:element name="lang"            type="CT_Language"/>
      <xsd:element name="eastAsianLayout" type="CT_EastAsianLayout"/>
      <xsd:element name="specVanish"      type="CT_OnOff"/>
      <xsd:element name="oMath"           type="CT_OnOff"/>
    </xsd:choice>
    <xsd:element name="rPrChange" type="CT_RPrChange" minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_Color">
  <xsd:attribute name="val"        type="ST_HexColor" use="required"/>
  <xsd:attribute name="themeColor" type="ST_ThemeColor"/>
  <xsd:attribute name="themeTint"  type="ST_UcharHexNumber"/>
  <xsd:attribute name="themeShade" type="ST_UcharHexNumber"/>
</xsd:complexType>

<!-- simple types -->

<xsd:simpleType name="ST_HexColor">
  <xsd:union memberTypes="ST_HexColorAuto s:ST_HexColorRGB"/>
</xsd:simpleType>

<xsd:simpleType name="ST_HexColorAuto">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="auto"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="ST_HexColorRGB">
  <xsd:restriction base="xsd:hexBinary">
    <xsd:length value="3" fixed="true"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="ST_ThemeColor">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="dark1"/>
    <xsd:enumeration value="light1"/>
    <xsd:enumeration value="dark2"/>
    <xsd:enumeration value="light2"/>
    <xsd:enumeration value="accent1"/>
    <xsd:enumeration value="accent2"/>
    <xsd:enumeration value="accent3"/>
    <xsd:enumeration value="accent4"/>
    <xsd:enumeration value="accent5"/>
    <xsd:enumeration value="accent6"/>
    <xsd:enumeration value="hyperlink"/>
    <xsd:enumeration value="followedHyperlink"/>
    <xsd:enumeration value="none"/>
    <xsd:enumeration value="background1"/>
    <xsd:enumeration value="text1"/>
    <xsd:enumeration value="background2"/>
    <xsd:enumeration value="text2"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="ST_UcharHexNumber">
  <xsd:restriction base="xsd:hexBinary">
    <xsd:length value="1"/>
  </xsd:restriction>
</xsd:simpleType>
```

----------------------------------------

TITLE: Example core.xml Structure (Open XML)
DESCRIPTION: Shows a specimen core.xml file as produced by Microsoft Word, illustrating the XML structure and namespaces used to store core document properties according to the Open Packaging Conventions and Dublin Core standards.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/coreprops.rst#_snippet_1

LANGUAGE: XML
CODE:
```
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<cp:coreProperties
    xmlns:cp="http://schemas.openxmlformats.org/package/2006/metadata/core-properties"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:dcterms="http://purl.org/dc/terms/"
    xmlns:dcmitype="http://purl.org/dc/dcmitype/"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <dc:title>Core Document Properties Exploration</dc:title>
  <dc:subject>PowerPoint core document properties</dc:subject>
  <dc:creator>Steve Canny</dc:creator>
  <cp:keywords>powerpoint; open xml; dublin core; microsoft office</cp:keywords>
  <dc:description>
    One thing I'd like to discover is just how line wrapping is handled
    in the comments. This paragraph is all on a single
    line._x000d__x000d_This is a second paragraph separated from the
    first by two line feeds.
  </dc:description>
  <cp:lastModifiedBy>Steve Canny</cp:lastModifiedBy>
  <cp:revision>2</cp:revision>
  <dcterms:created xsi:type="dcterms:W3CDTF">2013-04-06T06:03:36Z</dcterms:created>
  <dcterms:modified xsi:type="dcterms:W3CDTF">2013-06-15T06:09:18Z</dcterms:modified>
  <cp:category>analysis</cp:category>
</cp:coreProperties>
```

----------------------------------------

TITLE: Define hideSpellingErrors Element in XSD
DESCRIPTION: Defines the 'hideSpellingErrors' element in an XML Schema. This element is of type 'CT_OnOff', indicating a boolean setting, and is optional ('minOccurs="0"'). It controls whether spelling errors are hidden.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_10

LANGUAGE: XSD
CODE:
```
<xsd:element name="hideSpellingErrors" type="CT_OnOff" minOccurs="0"/>
```

----------------------------------------

TITLE: XML Schema Definition for EG_PContent (Paragraph Content Group)
DESCRIPTION: Provides the XML Schema definition for the `EG_PContent` group, which defines the allowed content elements within a paragraph, including runs (`r`), hyperlinks (`hyperlink`), fields (`fldSimple`), and other run-level elements.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_21

LANGUAGE: XSD
CODE:
```
<xsd:group name="EG_PContent">  <!-- denormalized -->
  <xsd:choice>
    <xsd:element name="r"         type="CT_R"/>
    <xsd:element name="hyperlink" type="CT_Hyperlink"/>
    <xsd:element name="fldSimple" type="CT_SimpleField"/>
    <xsd:element name="sdt"       type="CT_SdtRun"/>
    <xsd:element name="customXml" type="CT_CustomXmlRun"/>
    <xsd:element name="smartTag"  type="CT_SmartTagRun"/>
    <xsd:element name="dir"       type="CT_DirContentRun"/>
    <xsd:element name="bdo"       type="CT_BdoContentRun"/>
    <xsd:element name="subDoc"    type="CT_Rel"/>
    <xsd:group ref="EG_RunLevelElts"/>
  </xsd:choice>
</xsd:group>
```

----------------------------------------

TITLE: OpenXML CT_TblWidth Element Examples
DESCRIPTION: Illustrates different ways the w:tcW element (part of CT_TblWidth) can specify width using various units (mm, dxa, percent) and types (auto, nil).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-props.rst#_snippet_3

LANGUAGE: xml
CODE:
```
<w:tcW w:w="42.4mm"/>

<w:tcW w:w="1800" w:type="dxa"/>

<w:tcW w:w="20%" w:type="pct"/>

<w:tcW w:w="0" w:type="auto"/>

<w:tcW w:type="nil"/>
```

----------------------------------------

TITLE: XML Schema for Numbering Part
DESCRIPTION: Defines the XML schema for the numbering part of a Word document, including complex types for numbering properties, abstract numbers, numbers, and decimal number values used in list numbering.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/numbering.rst#_snippet_0

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Numbering">
  <xsd:sequence>
    <xsd:element name="numPicBullet"      type="CT_NumPicBullet"  minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="abstractNum"       type="CT_AbstractNum"   minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="num"               type="CT_Num"           minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="numIdMacAtCleanup" type="CT_DecimalNumber" minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_Num">
  <xsd:sequence>
    <xsd:element name="abstractNumId" type="CT_DecimalNumber"/>
    <xsd:element name="lvlOverride"   type="CT_NumLvl"        minOccurs="0" maxOccurs="9"/>
  </xsd:sequence>
  <xsd:attribute name="numId" type="ST_DecimalNumber" use="required"/>
</xsd:complexType>

<xsd:complexType name="CT_NumLvl">
  <xsd:sequence>
    <xsd:element name="startOverride" type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="lvl"           type="CT_Lvl"           minOccurs="0"/>
  </xsd:sequence>
  <xsd:attribute name="ilvl" type="ST_DecimalNumber" use="required"/>
</xsd:complexType>

<xsd:complexType name="CT_NumPr">
  <xsd:sequence>
    <xsd:element name="ilvl"            type="CT_DecimalNumber"        minOccurs="0"/>
    <xsd:element name="numId"           type="CT_DecimalNumber"        minOccurs="0"/>
    <xsd:element name="numberingChange" type="CT_TrackChangeNumbering" minOccurs="0"/>
    <xsd:element name="ins"             type="CT_TrackChange"          minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_DecimalNumber">
  <xsd:attribute name="val" type="ST_DecimalNumber" use="required"/>
</xsd:complexType>

<xsd:simpleType name="ST_DecimalNumber">
  <xsd:restriction base="xsd:integer"/>
</xsd:simpleType>
```

----------------------------------------

TITLE: Defining Complex Type CT_TcPr in XML
DESCRIPTION: Defines the complex type for table cell properties, containing various optional elements like vertical merge, borders, shading, text direction, vertical alignment, and change tracking information.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_3

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_TcPr">
    <xsd:sequence>
      <xsd:element name="cnfPr"              type="CT_Cnf"         minOccurs="0"/>
      <xsd:element name="tcW"                type="CT_TblWidth"    minOccurs="0"/>
      <xsd:element name="gridSpan"           type="CT_DecimalNumber" minOccurs="0"/>
      <xsd:element name="vMerge"               type="CT_VMerge"        minOccurs="0"/>
      <xsd:element name="tcBorders"            type="CT_TcBorders"     minOccurs="0"/>
      <xsd:element name="shd"                  type="CT_Shd"           minOccurs="0"/>
      <xsd:element name="noWrap"               type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="tcMar"                type="CT_TcMar"         minOccurs="0"/>
      <xsd:element name="textDirection"        type="CT_TextDirection" minOccurs="0"/>
      <xsd:element name="tcFitText"            type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="vAlign"               type="CT_VerticalJc"    minOccurs="0"/>
      <xsd:element name="hideMark"             type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="headers"              type="CT_Headers"       minOccurs="0"/>
      <xsd:choice                                                      minOccurs="0"/>
        <xsd:element name="cellIns"            type="CT_TrackChange"/>
        <xsd:element name="cellDel"            type="CT_TrackChange"/>
        <xsd:element name="cellMerge"          type="CT_CellMergeTrackChange"/>
      </xsd:choice>
      <xsd:element name="tcPrChange"           type="CT_TcPrChange"    minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining Paragraph Property Elements in XSD
DESCRIPTION: This XSD snippet defines a sequence of optional elements that constitute paragraph properties (pPr) in WordprocessingML. Each element corresponds to a specific paragraph formatting setting, referencing various complex types like CT_OnOff, CT_Spacing, CT_Ind, etc.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_14

LANGUAGE: XML Schema
CODE:
```
<xsd:element name="kinsoku"             type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="wordWrap"            type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="overflowPunct"       type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="topLinePunct"        type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="autoSpaceDE"         type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="autoSpaceDN"         type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="bidi"                type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="adjustRightInd"      type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="snapToGrid"          type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="spacing"             type="CT_Spacing"          minOccurs="0"/>
<xsd:element name="ind"                 type="CT_Ind"              minOccurs="0"/>
<xsd:element name="contextualSpacing"   type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="mirrorIndents"       type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="suppressOverlap"     type="CT_OnOff"            minOccurs="0"/>
<xsd:element name="jc"                  type="CT_Jc"               minOccurs="0"/>
<xsd:element name="textDirection"       type="CT_TextDirection"    minOccurs="0"/>
<xsd:element name="textAlignment"       type="CT_TextAlignment"    minOccurs="0"/>
<xsd:element name="textboxTightWrap"    type="CT_TextboxTightWrap" minOccurs="0"/>
<xsd:element name="outlineLvl"          type="CT_DecimalNumber"    minOccurs="0"/>
<xsd:element name="divId"               type="CT_DecimalNumber"    minOccurs="0"/>
<xsd:element name="cnfStyle"            type="CT_Cnf"              minOccurs="0"/>
<xsd:element name="rPr"                 type="CT_ParaRPr"          minOccurs="0"/>
<xsd:element name="sectPr"              type="CT_SectPr"           minOccurs="0"/>
<xsd:element name="pPrChange"           type="CT_PPrChange"        minOccurs="0"/>
```

----------------------------------------

TITLE: WordprocessingML Styles Schema Excerpt
DESCRIPTION: Shows a relevant excerpt from the WordprocessingML schema defining the structure of the CT_Styles, CT_DocDefaults, and CT_LatentStyles complex types.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/styles.rst#_snippet_6

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Styles">
  <xsd:sequence>
    <xsd:element name="docDefaults"  type="CT_DocDefaults"  minOccurs="0"/>
    <xsd:element name="latentStyles" type="CT_LatentStyles" minOccurs="0"/>
    <xsd:element name="style"        type="CT_Style"        minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_DocDefaults">
  <xsd:sequence>
    <xsd:element name="rPrDefault" type="CT_RPrDefault" minOccurs="0"/>
    <xsd:element name="pPrDefault" type="CT_PPrDefault" minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_LatentStyles">
  <xsd:sequence>
    <xsd:element name="lsdException" type="CT_LsdException" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="defLockedState"    type="s:ST_OnOff"/>
  <xsd:attribute name="defUIPriority"     type="ST_DecimalNumber"/>
  <xsd:attribute name="defSemiHidden"     type="s:ST_OnOff"/>
```

----------------------------------------

TITLE: XML Schema Definition for Run Properties and Highlight
DESCRIPTION: Provides the XML Schema (XSD) definition for the `CT_RPr` complex type, which contains various run properties including the `highlight` element, and the `CT_Highlight` complex type, defining the structure of the highlight element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-highlight-color.rst#_snippet_3

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_RPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="rStyle"          type="CT_String"/>
      <xsd:element name="rFonts"          type="CT_Fonts"/>
      <xsd:element name="b"               type="CT_OnOff"/>
      <xsd:element name="bCs"             type="CT_OnOff"/>
      <xsd:element name="i"               type="CT_OnOff"/>
      <xsd:element name="iCs"             type="CT_OnOff"/>
      <xsd:element name="caps"            type="CT_OnOff"/>
      <xsd:element name="smallCaps"       type="CT_OnOff"/>
      <xsd:element name="strike"          type="CT_OnOff"/>
      <xsd:element name="dstrike"         type="CT_OnOff"/>
      <xsd:element name="outline"         type="CT_OnOff"/>
      <xsd:element name="shadow"          type="CT_OnOff"/>
      <xsd:element name="emboss"          type="CT_OnOff"/>
      <xsd:element name="imprint"         type="CT_OnOff"/>
      <xsd:element name="noProof"         type="CT_OnOff"/>
      <xsd:element name="snapToGrid"      type="CT_OnOff"/>
      <xsd:element name="vanish"          type="CT_OnOff"/>
      <xsd:element name="webHidden"       type="CT_OnOff"/>
      <xsd:element name="color"           type="CT_Color"/>
      <xsd:element name="spacing"         type="CT_SignedTwipsMeasure"/>
      <xsd:element name="w"               type="CT_TextScale"/>
      <xsd:element name="kern"            type="CT_HpsMeasure"/>
      <xsd:element name="position"        type="CT_SignedHpsMeasure"/>
      <xsd:element name="sz"              type="CT_HpsMeasure"/>
      <xsd:element name="szCs"            type="CT_HpsMeasure"/>
      <xsd:element name="highlight"       type="CT_Highlight"/>
      <xsd:element name="u"               type="CT_Underline"/>
      <xsd:element name="effect"          type="CT_TextEffect"/>
      <xsd:element name="bdr"             type="CT_Border"/>
      <xsd:element name="shd"             type="CT_Shd"/>
      <xsd:element name="fitText"         type="CT_FitText"/>
      <xsd:element name="vertAlign"       type="CT_VerticalAlignRun"/>
      <xsd:element name="rtl"             type="CT_OnOff"/>
      <xsd:element name="cs"              type="CT_OnOff"/>
      <xsd:element name="em"              type="CT_Em"/>
      <xsd:element name="lang"            type="CT_Language"/>
      <xsd:element name="eastAsianLayout" type="CT_EastAsianLayout"/>
      <xsd:element name="specVanish"      type="CT_OnOff"/>
      <xsd:element name="oMath"           type="CT_OnOff"/>
    </xsd:choice>
    <xsd:element name="rPrChange" type="CT_RPrChange" minOccurs="0"/>
  </xsd:sequence>
</xsd:group>

<!-- complex types -->

<xsd:complexType name="CT_Highlight">
```

----------------------------------------

TITLE: OpenXML Schema Definitions for Table Elements
DESCRIPTION: Provides the XML Schema Definitions (XSD) for the CT_Tbl (Table) and CT_TblPr (Table Properties) complex types, showing their structure and child elements.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-props.rst#_snippet_4

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Tbl">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:group    ref="EG_RangeMarkupElements"        minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="tblPr"       type="CT_TblPr"/>
    <xsd:element name="tblGrid"     type="CT_TblGrid"/>
    <xsd:choice                                       minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="tr"        type="CT_Row"/>
      <xsd:element name="customXml" type="CT_CustomXmlRow"/>
      <xsd:element name="sdt"       type="CT_SdtRow"/>
      <xsd:group    ref="EG_RunLevelElts"             minOccurs="0" maxOccurs="unbounded"/>
    </xsd:choice>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_TblPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:element name="tblStyle"            type="CT_String"        minOccurs="0"/>
    <xsd:element name="tblpPr"              type="CT_TblPPr"        minOccurs="0"/>
    <xsd:element name="tblOverlap"          type="CT_TblOverlap"    minOccurs="0"/>
    <xsd:element name="bidiVisual"          type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="tblStyleRowBandSize" type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="tblStyleColBandSize" type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="tblW"                type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="jc"                  type="CT_JcTable"       minOccurs="0"/>
    <xsd:element name="tblCellSpacing"      type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="tblInd"              type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="tblBorders"          type="CT_TblBorders"    minOccurs="0"/>
    <xsd:element name="shd"                 type="CT_Shd"           minOccurs="0"/>
    <xsd:element name="tblLayout"           type="CT_TblLayoutType" minOccurs="0"/>
    <xsd:element name="tblCellMar"          type="CT_TblCellMar"    minOccurs="0"/>
    <xsd:element name="tblLook"             type="CT_TblLook"       minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>
```

----------------------------------------

TITLE: Defining Core Properties XML Schema
DESCRIPTION: This XML Schema defines the structure for the core properties of an Open XML document. It specifies elements like category, contentStatus, creator, description, identifier, keywords, language, lastModifiedBy, lastPrinted, modified, revision, subject, title, and version, importing namespaces for Dublin Core elements and terms.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/coreprops.rst#_snippet_3

LANGUAGE: XML
CODE:
```
<xs:schema
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:dc="http://purl.org/dc/elements/1.1/"
      xmlns:dcterms="http://purl.org/dc/terms/"
      elementFormDefault="qualified"
      blockDefault="#all">

      <xs:import
        namespace="http://purl.org/dc/elements/1.1/"
        schemaLocation="http://dublincore.org/schemas/xmls/qdc/2003/04/02/dc.xsd"/>
      <xs:import
        namespace="http://purl.org/dc/terms/"
        schemaLocation="http://dublincore.org/schemas/xmls/qdc/2003/04/02/dcterms.xsd"/>
      <xs:import
        id="xml"
        namespace="http://www.w3.org/XML/1998/namespace"/>

      <xs:element name="coreProperties" type="CT_CoreProperties"/>

      <xs:complexType name="CT_CoreProperties">
        <xs:all>
          <xs:element name="category"        type="xs:string"   minOccurs="0"/>
          <xs:element name="contentStatus"   type="xs:string"   minOccurs="0"/>
          <xs:element ref="dcterms:created"                     minOccurs="0"/>
          <xs:element ref="dc:creator"                          minOccurs="0"/>
          <xs:element ref="dc:description"                      minOccurs="0"/>
          <xs:element ref="dc:identifier"                       minOccurs="0"/>
          <xs:element name="keywords"        type="CT_Keywords" minOccurs="0"/>
          <xs:element ref="dc:language"                         minOccurs="0"/>
          <xs:element name="lastModifiedBy"  type="xs:string"   minOccurs="0"/>
          <xs:element name="lastPrinted"     type="xs:dateTime" minOccurs="0"/>
          <xs:element ref="dcterms:modified"                    minOccurs="0"/>
          <xs:element name="revision"        type="xs:string"   minOccurs="0"/>
          <xs:element ref="dc:subject"                          minOccurs="0"/>
          <xs:element ref="dc:title"                            minOccurs="0"/>
          <xs:element name="version"         type="xs:string"   minOccurs="0"/>
        </xs:all>
      </xs:complexType>

      <xs:complexType name="CT_Keywords" mixed="true">
        <xs:sequence>
          <xs:element name="value" minOccurs="0" maxOccurs="unbounded" type="CT_Keyword"/>
        </xs:sequence>
        <xs:attribute ref="xml:lang" use="optional"/>
      </xs:complexType>

      <xs:complexType name="CT_Keyword">
        <xs:simpleContent>
          <xs:extension base="xs:string">
            <xs:attribute ref="xml:lang" use="optional"/>
          </xs:extension>
        </xs:simpleContent>
      </xs:complexType>

    </xs:schema>
```

----------------------------------------

TITLE: XML Schema Definition (XSD) for Word Styles
DESCRIPTION: This snippet provides an excerpt from the Office Open XML schema (WordprocessingML) defining the complex types related to styles, including CT_Styles, CT_DocDefaults, CT_LatentStyles, and CT_Style. It shows the structure and elements/attributes allowed within these style-related XML parts.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/index.rst#_snippet_1

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Styles">
  <xsd:sequence>
    <xsd:element name="docDefaults"  type="CT_DocDefaults"  minOccurs="0"/>
    <xsd:element name="latentStyles" type="CT_LatentStyles" minOccurs="0"/>
    <xsd:element name="style"        type="CT_Style"        minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_DocDefaults">
  <xsd:sequence>
    <xsd:element name="rPrDefault" type="CT_RPrDefault" minOccurs="0"/>
    <xsd:element name="pPrDefault" type="CT_PPrDefault" minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_LatentStyles">
  <xsd:sequence>
    <xsd:element name="lsdException" type="CT_LsdException" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="defLockedState"    type="s:ST_OnOff"/>
  <xsd:attribute name="defUIPriority"     type="ST_DecimalNumber"/>
  <xsd:attribute name="defSemiHidden"     type="s:ST_OnOff"/>
  <xsd:attribute name="defUnhideWhenUsed" type="s:ST_OnOff"/>
  <xsd:attribute name="defQFormat"        type="s:ST_OnOff"/>
  <xsd:attribute name="count"             type="ST_DecimalNumber"/>
</xsd:complexType>

<xsd:complexType name="CT_Style">
  <xsd:sequence>
    <xsd:element name="name"            type="CT_String"        minOccurs="0"/>
    <xsd:element name="aliases"         type="CT_String"        minOccurs="0"/>
    <xsd:element name="basedOn"         type="CT_String"        minOccurs="0"/>
    <xsd:element name="next"            type="CT_String"        minOccurs="0"/>
    <xsd:element name="link"            type="CT_String"        minOccurs="0"/>
    <xsd:element name="autoRedefine"    type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="hidden"          type="CT_OnOff"         minOccurs="0"/>

```

----------------------------------------

TITLE: Defining CT_Transform2D in XML Schema
DESCRIPTION: Defines a complex type representing a 2D transformation. It includes optional offset and extent elements (CT_Point2D and CT_PositiveSize2D) and attributes for rotation, horizontal flip, and vertical flip.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_13

LANGUAGE: XML Schema
CODE:
```
<xsd:complexType name="CT_Transform2D">
    <xsd:sequence>
      <xsd:element name="off" type="CT_Point2D"        minOccurs="0"/>
      <xsd:element name="ext" type="CT_PositiveSize2D" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="rot"   type="ST_Angle"    default="0"/>
    <xsd:attribute name="flipH" type="xsd:boolean" default="false"/>
    <xsd:attribute name="flipV" type="xsd:boolean" default="false"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Define bookFoldPrintingSheets Element in XSD
DESCRIPTION: Defines the 'bookFoldPrintingSheets' element in an XML Schema. This element is of type 'CT_DecimalNumber' and is optional ('minOccurs="0"'). It specifies the number of sheets per booklet when printing in book fold layout.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_41

LANGUAGE: XSD
CODE:
```
<xsd:element name="bookFoldPrintingSheets" type="CT_DecimalNumber" minOccurs="0"/>
```

----------------------------------------

TITLE: Word Table XML Schema Definitions
DESCRIPTION: These XML Schema definitions (XSD) define the structure and content models for key table elements in the WordprocessingML schema. They show the expected child elements and attributes for CT_Tbl (table), CT_TblPr (table properties), CT_TblGrid (table grid), CT_TblGridCol (grid column), and CT_Row (table row).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/index.rst#_snippet_1

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Tbl">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:group    ref="EG_RangeMarkupElements"        minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="tblPr"       type="CT_TblPr"/>
    <xsd:element name="tblGrid"     type="CT_TblGrid"/>
    <xsd:choice                                       minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="tr"        type="CT_Row"/>
      <xsd:element name="customXml" type="CT_CustomXmlRow"/>
      <xsd:element name="sdt"       type="CT_SdtRow"/>
      <xsd:group    ref="EG_RunLevelElts"             minOccurs="0" maxOccurs="unbounded"/>
    </xsd:choice>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_TblPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:element name="tblStyle"            type="CT_String"        minOccurs="0"/>
    <xsd:element name="tblpPr"              type="CT_TblPPr"        minOccurs="0"/>
    <xsd:element name="tblOverlap"          type="CT_TblOverlap"    minOccurs="0"/>
    <xsd:element name="bidiVisual"          type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="tblStyleRowBandSize" type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="tblStyleColBandSize" type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="tblW"                type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="jc"                  type="CT_JcTable"       minOccurs="0"/>
    <xsd:element name="tblCellSpacing"      type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="tblInd"              type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="tblBorders"          type="CT_TblBorders"    minOccurs="0"/>
    <xsd:element name="shd"                 type="CT_Shd"           minOccurs="0"/>
    <xsd:element name="tblLayout"           type="CT_TblLayoutType" minOccurs="0"/>
    <xsd:element name="tblCellMar"          type="CT_TblCellMar"    minOccurs="0"/>
    <xsd:element name="tblLook"             type="CT_TblLook"       minOccurs="0"/>
    <xsd:element name="tblCaption"          type="CT_String"        minOccurs="0"/>
    <xsd:element name="tblDescription"      type="CT_String"        minOccurs="0"/>
    <xsd:element name="tblPrChange"         type="CT_TblPrChange"   minOccurs="0"/>
  </xsd:sequence>

<xsd:complexType name="CT_TblGrid">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:element name="gridCol"       type="CT_TblGridCol"    minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="tblGridChange" type="CT_TblGridChange" minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_TblGridCol">
  <xsd:attribute name="w" type="s:ST_TwipsMeasure"/>
</xsd:complexType>

<xsd:complexType name="CT_Row">
  <xsd:sequence>
    <xsd:element name="tblPrEx" type="CT_TblPrEx" minOccurs="0"/>
    <xsd:element name="trPr"    type="CT_TrPr"    minOccurs="0"/>
    <xsd:group   ref="EG_ContentCellContent"      minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="rsidRPr" type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidR"   type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidDel" type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidTr"  type="ST_LongHexNumber"/>
</xsd:complexType>

<!-- component types --------------------------------- -->
```

----------------------------------------

TITLE: Minimal Inline Shape XML Structure (WordprocessingML)
DESCRIPTION: Shows the minimal XML structure required for a WordprocessingML document to load an inline shape within a run (`<w:r>`), including the drawing container (`<w:drawing>`) and inline properties (`<wp:inline>`).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/shapes-inline.rst#_snippet_1

LANGUAGE: XML
CODE:
```
<w:r>
  <w:drawing>
    <wp:inline>
      <wp:extent cx="914400" cy="914400"/>
      <wp:docPr id="1" name="Picture 1"/>
      <a:graphic xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main">
        <a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture">

          <!-- might not have to put anything here for a start -->

        </a:graphicData>
      </a:graphic>
    </wp:inline>
  </w:drawing>
</w:r>
```

----------------------------------------

TITLE: Defining EG_ContentCellContent Group in XSD
DESCRIPTION: Defines the valid content elements within a table cell in WordprocessingML, including other table cells, custom XML, structured document tags, and run-level elements.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/index.rst#_snippet_2

LANGUAGE: XSD
CODE:
```
<xsd:group name="EG_ContentCellContent">
    <xsd:choice>
      <xsd:element name="tc"        type="CT_Tc"            minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="customXml" type="CT_CustomXmlCell"/>
      <xsd:element name="sdt"       type="CT_SdtCell"/>
      <xsd:group   ref="EG_RunLevelElts"                    minOccurs="0" maxOccurs="unbounded"/>
    </xsd:choice>
  </xsd:group>
```

----------------------------------------

TITLE: Define bookFoldPrinting Element in XSD
DESCRIPTION: Defines the 'bookFoldPrinting' element in an XML Schema. This element is of type 'CT_OnOff', indicating a boolean setting, and is optional ('minOccurs="0"'). It controls printing in book fold layout.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_40

LANGUAGE: XSD
CODE:
```
<xsd:element name="bookFoldPrinting" type="CT_OnOff" minOccurs="0"/>
```

----------------------------------------

TITLE: Run with Subtle Emphasis Style XML (python-docx) - XML
DESCRIPTION: Provides the Open XML structure for a run styled with 'Subtle Emphasis', demonstrating how spaces in the style name are typically removed in the `w:val` attribute of the `<w:rStyle>` element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_7

LANGUAGE: xml
CODE:
```
<w:p>
  <w:r>
    <w:rPr>
      <w:rStyle w:val="SubtleEmphasis"/>
    </w:rPr>
    <w:t>a few words in Subtle Emphasis style</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Defining CT_Tc Complex Type in XSD
DESCRIPTION: Defines the structure for a table cell (CT_Tc) in a WordprocessingML document. It includes optional properties (tcPr) and a sequence of block-level content elements like paragraphs, tables, custom XML, etc.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_8

LANGUAGE: XSD
CODE:
```
<xsd:complexType name="CT_Tc">  <!-- denormalized -->
    <xsd:sequence>
      <xsd:element name="tcPr" type="CT_TcPr" minOccurs="0"/>
      <xsd:choice minOccurs="1" maxOccurs="unbounded">
        <xsd:element name="p"                           type="CT_P"/>
        <xsd:element name="tbl"                         type="CT_Tbl"/>
        <xsd:element name="customXml"                   type="CT_CustomXmlBlock"/>
        <xsd:element name="sdt"                         type="CT_SdtBlock"/>
        <xsd:element name="proofErr"                    type="CT_ProofErr"/>
        <xsd:element name="permStart"                   type="CT_PermStart"/>
        <xsd:element name="permEnd"                     type="CT_Perm"/>
        <xsd:element name="ins"                         type="CT_RunTrackChange"/>
        <xsd:element name="del"                         type="CT_RunTrackChange"/>
        <xsd:element name="moveFrom"                    type="CT_RunTrackChange"/>
        <xsd:element name="moveTo"                      type="CT_RunTrackChange"/>
        <xsd:element  ref="m:oMathPara"                 type="CT_OMathPara"/>
        <xsd:element  ref="m:oMath"                     type="CT_OMath"/>
        <xsd:element name="bookmarkStart"               type="CT_Bookmark"/>
        <xsd:element name="bookmarkEnd"                 type="CT_MarkupRange"/>
        <xsd:element name="moveFromRangeStart"          type="CT_MoveBookmark"/>
        <xsd:element name="moveFromRangeEnd"            type="CT_MarkupRange"/>
        <xsd:element name="moveToRangeStart"            type="CT_MoveBookmark"/>
        <xsd:element name="moveToRangeEnd"              type="CT_MarkupRange"/>
        <xsd:element name="commentRangeStart"           type="CT_MarkupRange"/>
        <xsd:element name="commentRangeEnd"             type="CT_MarkupRange"/>
        <xsd:element name="customXmlInsRangeStart"      type="CT_TrackChange"/>
        <xsd:element name="customXmlInsRangeEnd"        type="CT_Markup"/>
        <xsd:element name="customXmlDelRangeStart"      type="CT_TrackChange"/>
        <xsd:element name="customXmlDelRangeEnd"        type="CT_Markup"/>
        <xsd:element name="customXmlMoveFromRangeStart" type="CT_TrackChange"/>
        <xsd:element name="customXmlMoveFromRangeEnd"   type="CT_Markup"/>
        <xsd:element name="customXmlMoveToRangeStart"   type="CT_TrackChange"/>
        <xsd:element name="customXmlMoveToRangeEnd"     type="CT_Markup"/>
        <xsd:element name="altChunk"                    type="CT_AltChunk"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="id" type="s:ST_String" use="optional"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Specimen OpenXML for Inline Picture
DESCRIPTION: Provides a more complete example of the DrawingML XML for an inline picture within a `<a:graphicData>` container. It includes additional elements like `<a:alphaModFix>` and extensions within the blip fill, showing a typical structure generated by Word.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_2

LANGUAGE: xml
CODE:
```
<a:graphicData uri="http://schemas.openxmlformats.org/drawingml/2006/picture">
  <pic:pic xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture">
    <pic:nvPicPr>
      <pic:cNvPr id="1" name="python-powered.png"/>
      <pic:cNvPicPr/>
    </pic:nvPicPr>
    <pic:blipFill>
      <a:blip r:embed="rId7">
        <a:alphaModFix/>
        <a:extLst>
          <a:ext uri="{28A0092B-C50C-407E-A947-70E740481C1C}">
            <a14:useLocalDpi xmlns:a14="http://schemas.microsoft.com/office/drawing/2010/main" val="0"/>
          </a:ext>
        </a:extLst>
      </a:blip>
      <a:stretch>
        <a:fillRect/>
      </a:stretch>
    </pic:blipFill>
    <pic:spPr>
      <a:xfrm>
        <a:off x="0" y="0"/>
        <a:ext cx="859536" cy="343814"/>
      </a:xfrm>
      <a:prstGeom prst="rect">
        <a:avLst/>
      </a:prstGeom>
    </pic:spPr>
  </pic:pic>
</a:graphicData>
```

----------------------------------------

TITLE: WordprocessingML Schema Definitions for Drawing Types (XML)
DESCRIPTION: Provides XML Schema definitions (`.xsd`) for key complex types related to drawings and inline shapes in WordprocessingML, including `CT_Drawing`, `CT_Inline`, `CT_PositiveSize2D`, and `CT_EffectExtent`, detailing their elements and attributes.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/shapes-inline.rst#_snippet_3

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_Drawing">
  <xsd:choice minOccurs="1" maxOccurs="unbounded">
    <xsd:element ref="wp:anchor" minOccurs="0"/>
    <xsd:element ref="wp:inline" minOccurs="0"/>
  </xsd:choice>
</xsd:complexType>

<xsd:complexType name="CT_Inline">
  <xsd:sequence>
    <xsd:element name="extent"            type="a:CT_PositiveSize2D"/>
    <xsd:element name="effectExtent"      type="CT_EffectExtent"                      minOccurs="0"/>
    <xsd:element name="docPr"             type="a:CT_NonVisualDrawingProps"/>
    <xsd:element name="cNvGraphicFramePr" type="a:CT_NonVisualGraphicFrameProperties" minOccurs="0"/>
    <xsd:element name="graphic"           type="CT_GraphicalObject"/>
  </xsd:sequence>
  <xsd:attribute name="distT" type="ST_WrapDistance"/>
  <xsd:attribute name="distB" type="ST_WrapDistance"/>
  <xsd:attribute name="distL" type="ST_WrapDistance"/>
  <xsd:attribute name="distR" type="ST_WrapDistance"/>
</xsd:complexType>

<xsd:complexType name="CT_PositiveSize2D">
  <xsd:attribute name="cx" type="ST_PositiveCoordinate" use="required"/>
  <xsd:attribute name="cy" type="ST_PositiveCoordinate" use="required"/>
</xsd:complexType>

<xsd:complexType name="CT_EffectExtent">
  <xsd:attribute name="l" type="a:ST_Coordinate" use="required"/>
  <xsd:attribute name="t" type="a:ST_Coordinate" use="required"/>
  <xsd:attribute name="r" type="a:ST_Coordinate" use="required"/>
</xsd:complexType>
```

----------------------------------------

TITLE: XML Schema Definitions for docx Table Cell (`CT_Tc`, `CT_TcPr`)
DESCRIPTION: Provides the XML Schema definitions for the `CT_Tc` (Complex Type Table Cell) and `CT_TcPr` (Complex Type Table Cell Properties) elements, detailing their structure, sequence of child elements, and attributes according to the Open XML specification.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_2

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Tc">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:element name="tcPr" type="CT_TcPr" minOccurs="0"/>
    <xsd:choice minOccurs="1" maxOccurs="unbounded">
      <xsd:element name="p"                           type="CT_P"/>
      <xsd:element name="tbl"                         type="CT_Tbl"/>
      <xsd:element name="customXml"                   type="CT_CustomXmlBlock"/>
      <xsd:element name="sdt"                         type="CT_SdtBlock"/>
      <xsd:element name="proofErr"                    type="CT_ProofErr"/>
      <xsd:element name="permStart"                   type="CT_PermStart"/>
      <xsd:element name="permEnd"                     type="CT_Perm"/>
      <xsd:element name="ins"                         type="CT_RunTrackChange"/>
      <xsd:element name="del"                         type="CT_RunTrackChange"/>
      <xsd:element name="moveFrom"                    type="CT_RunTrackChange"/>
      <xsd:element name="moveTo"                      type="CT_RunTrackChange"/>
      <xsd:element  ref="m:oMathPara"                 type="CT_OMathPara"/>
      <xsd:element  ref="m:oMath"                     type="CT_OMath"/>
      <xsd:element name="bookmarkStart"               type="CT_Bookmark"/>
      <xsd:element name="bookmarkEnd"                 type="CT_MarkupRange"/>
      <xsd:element name="moveFromRangeStart"          type="CT_MoveBookmark"/>
      <xsd:element name="moveFromRangeEnd"            type="CT_MarkupRange"/>
      <xsd:element name="moveToRangeStart"            type="CT_MoveBookmark"/>
      <xsd:element name="moveToRangeEnd"              type="CT_MarkupRange"/>
      <xsd:element name="commentRangeStart"           type="CT_MarkupRange"/>
      <xsd:element name="commentRangeEnd"             type="CT_MarkupRange"/>
      <xsd:element name="customXmlInsRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlInsRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlDelRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlDelRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlMoveFromRangeStart" type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveFromRangeEnd"   type="CT_Markup"/>
      <xsd:element name="customXmlMoveToRangeStart"   type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveToRangeEnd"     type="CT_Markup"/>
      <xsd:element name="altChunk"                    type="CT_AltChunk"/>
    </xsd:choice>
  </xsd:sequence>
  <xsd:attribute name="id" type="s:ST_String" use="optional"/>
</xsd:complexType>

<xsd:complexType name="CT_TcPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:element name="cnfStyle"             type="CT_Cnf"           minOccurs="0"/>
    <xsd:element name="tcW"                  type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="gridSpan"             type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="hMerge"               type="CT_HMerge"        minOccurs="0"/>
```

----------------------------------------

TITLE: Define doNotTrackFormatting Element in XSD
DESCRIPTION: Defines the 'doNotTrackFormatting' element in an XML Schema. This element is of type 'CT_OnOff', indicating a boolean setting, and is optional ('minOccurs="0"'). It controls whether formatting changes are tracked as revisions.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_24

LANGUAGE: XSD
CODE:
```
<xsd:element name="doNotTrackFormatting" type="CT_OnOff" minOccurs="0"/>
```

----------------------------------------

TITLE: WordprocessingML Alternate Unhide When Used True (XML)
DESCRIPTION: Shows an alternate WordprocessingML XML structure where `w:unhideWhenUsed` has a `w:val="1"`. `python-docx` should interpret this as `True` but will not write XML in this specific format.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_10

LANGUAGE: xml
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
  <w:unhideWhenUsed w:val="1"/>  <!-- style.unhide_when_used is True -->
</w:style>
```

----------------------------------------

TITLE: Baseline Run XML (XML)
DESCRIPTION: Shows the basic XML structure for a run where underlining is determined by inherited style properties, without a direct `w:u` element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/underline.rst#_snippet_1

LANGUAGE: XML
CODE:
```
<w:r>
  <w:t>underlining determined by inheritance</w:t>
</w:r>
```

----------------------------------------

TITLE: Run and Run Properties Schema Excerpt (python-docx) - XML
DESCRIPTION: Presents a simplified excerpt of the Open XML schema definitions for the `<w:r>` (run) and `<w:rPr>` (run properties) elements, showing the structure and potential child elements like `<w:rStyle>` relevant to character styling.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_8

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_R">  <!-- flattened for readibility -->
  <xsd:sequence>
    <xsd:element name="rPr" type="CT_RPr" minOccurs="0"/>
    <xsd:group   ref="EG_RunInnerContent" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="rsidRPr" type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidDel" type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidR"   type="ST_LongHexNumber"/>
</xsd:complexType>

<xsd:complexType name="CT_RPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="rStyle"          type="CT_String"/>
      <xsd:element name="rFonts"          type="CT_Fonts"/>
      <xsd:element name="b"               type="CT_OnOff"/>
      <xsd:element name="bCs"             type="CT_OnOff"/>
      <xsd:element name="i"               type="CT_OnOff"/>
      <xsd:element name="iCs"             type="CT_OnOff"/>
      <xsd:element name="caps"            type="CT_OnOff"/>
      <xsd:element name="smallCaps"       type="CT_OnOff"/>
      <xsd:element name="strike"          type="CT_OnOff"/>
      <xsd:element name="dstrike"         type="CT_OnOff"/>
      <xsd:element name="outline"         type="CT_OnOff"/>
      <xsd:element name="shadow"          type="CT_OnOff"/>
      <xsd:element name="emboss"          type="CT_OnOff"/>
      <xsd:element name="imprint"         type="CT_OnOff"/>
      <xsd:element name="noProof"         type="CT_OnOff"/>
      <xsd:element name="snapToGrid"      type="CT_OnOff"/>
      <xsd:element name="vanish"          type="CT_OnOff"/>
      <xsd:element name="webHidden"       type="CT_OnOff"/>
      <xsd:element name="color"           type="CT_Color"/>
      <xsd:element name="spacing"         type="CT_SignedTwipsMeasure"/>
      <xsd:element name="w"               type="CT_TextScale"/>
      <xsd:element name="kern"            type="CT_HpsMeasure"/>
      <xsd:element name="position"        type="CT_SignedHpsMeasure"/>
      <xsd:element name="sz"              type="CT_HpsMeasure"/>
      <xsd:element name="szCs"            type="CT_HpsMeasure"/>
      <xsd:element name="highlight"       type="CT_Highlight"/>
      <xsd:element name="u"               type="CT_Underline"/>
      <xsd:element name="effect"          type="CT_TextEffect"/>
      <xsd:element name="bdr"             type="CT_Border"/>
      <xsd:element name="shd"             type="CT_Shd"/>
      <xsd:element name="fitText"         type="CT_FitText"/>
      <xsd:element name="vertAlign"       type="CT_VerticalAlignRun"/>
      <xsd:element name="rtl"             type="CT_OnOff"/>
      <xsd:element name="cs"              type="CT_OnOff"/>
      <xsd:element name="em"              type="CT_Em"/>
      <xsd:element name="lang"            type="CT_Language"/>
      <xsd:element name="eastAsianLayout" type="CT_EastAsianLayout"/>
  </xsd:sequence>
</xsd:complexType>
```

----------------------------------------

TITLE: Hyperlink Containing Multiple Runs with Formatting in WordprocessingML XML
DESCRIPTION: Provides an example of a hyperlink element in `document.xml` that contains multiple text runs (`w:r`), demonstrating that formatting (like italics) can be applied within the hyperlink text.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_17

LANGUAGE: XML
CODE:
```
<w:p>
  <w:hyperlink r:id="rId2">
    <w:r>
      <w:rPr>
        <w:rStyle w:val="Hyperlink"/>
      </w:rPr>
      <w:t xml:space="preserve">A hyperlink containing an </w:t>
    </w:r>
    <w:r>
      <w:rPr>
        <w:rStyle w:val="Hyperlink"/>
        <w:i/>
      </w:rPr>
      <w:t>italicized</w:t>
    </w:r>
    <w:r>
      <w:rPr>
        <w:rStyle w:val="Hyperlink"/>
      </w:rPr>
      <w:t xml:space="preserve"> word</w:t>
    </w:r>
  </w:hyperlink>
</w:p>
```

----------------------------------------

TITLE: OpenXML CT_SectPr Schema Excerpt
DESCRIPTION: Provides an excerpt from the OpenXML schema defining the `CT_SectPr` complex type, showing the sequence of elements that can appear within section properties, including `headerReference` and `footerReference`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_16

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_SectPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="6"/>
      <xsd:element name="headerReference" type="CT_HdrFtrRef"/>
      <xsd:element name="footerReference" type="CT_HdrFtrRef"/>
    </xsd:choice>
    <xsd:element name="footnotePr"      type="CT_FtnProps"      minOccurs="0"/>
    <xsd:element name="endnotePr"       type="CT_EdnProps"      minOccurs="0"/>
    <xsd:element name="type"            type="CT_SectType"      minOccurs="0"/>
    <xsd:element name="pgSz"            type="CT_PageSz"        minOccurs="0"/>
    <xsd:element name="pgMar"           type="CT_PageMar"       minOccurs="0"/>
    <xsd:element name="paperSrc"        type="CT_PaperSource"   minOccurs="0"/>
    <xsd:element name="pgBorders"       type="CT_PageBorders"   minOccurs="0"/>
    <xsd:element name="lnNumType"       type="CT_LineNumber"    minOccurs="0"/>
    <xsd:element name="pgNumType"       type="CT_PageNumber"    minOccurs="0"/>
    <xsd:element name="cols"            type="CT_Columns"       minOccurs="0"/>
    <xsd:element name="formProt"        type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="vAlign"          type="CT_VerticalJc"    minOccurs="0"/>
    <xsd:element name="noEndnote"       type="CT_OnOff"         minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>
```

----------------------------------------

TITLE: Baseline Run XML (python-docx) - XML
DESCRIPTION: Shows the Open XML structure for a simple run within a paragraph that does not have any specific character style applied.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_5

LANGUAGE: xml
CODE:
```
<w:p>
  <w:r>
    <w:t>This is a regular paragraph.</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Defining CT_R Complex Type in XML Schema
DESCRIPTION: Defines the complex type for a run (CT_R), which is a sequence of characters with the same formatting. It includes optional groups for run properties (EG_RPr) and run inner content (EG_RunInnerContent), along with attributes for revision IDs (rsidRPr, rsidDel, rsidR).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_25

LANGUAGE: XML Schema
CODE:
```
<xsd:complexType name="CT_R">
    <xsd:sequence>
      <xsd:group ref="EG_RPr"             minOccurs="0"/>
      <xsd:group ref="EG_RunInnerContent" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="rsidRPr" type="ST_LongHexNumber"/>
    <xsd:attribute name="rsidDel" type="ST_LongHexNumber"/>
    <xsd:attribute name="rsidR"   type="ST_LongHexNumber"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Define 'savePreviewPicture' Element
DESCRIPTION: Defines the 'savePreviewPicture' element, a boolean flag (CT_OnOff) indicating whether a preview picture should be saved with the document. It is optional.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_55

LANGUAGE: XML
CODE:
```
<xsd:element name="savePreviewPicture"         type="CT_OnOff"           minOccurs="0"/>
```

----------------------------------------

TITLE: WordprocessingML Run Properties XML Schema (CT_RPr)
DESCRIPTION: This XML Schema (XSD) excerpt defines the CT_RPr complex type, which specifies the possible child elements for WordprocessingML run properties (<w:rPr>). It lists various formatting elements like b, i, smallCaps, strike, sz, u, etc., indicating their types and occurrence constraints.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font.rst#_snippet_3

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_RPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="rStyle"          type="CT_String"/>
      <xsd:element name="rFonts"          type="CT_Fonts"/>
      <xsd:element name="b"               type="CT_OnOff"/>
      <xsd:element name="bCs"             type="CT_OnOff"/>
      <xsd:element name="i"               type="CT_OnOff"/>
      <xsd:element name="iCs"             type="CT_OnOff"/>
      <xsd:element name="caps"            type="CT_OnOff"/>
      <xsd:element name="smallCaps"       type="CT_OnOff"/>
      <xsd:element name="strike"          type="CT_OnOff"/>
      <xsd:element name="dstrike"         type="CT_OnOff"/>
      <xsd:element name="outline"         type="CT_OnOff"/>
      <xsd:element name="shadow"          type="CT_OnOff"/>
      <xsd:element name="emboss"          type="CT_OnOff"/>
      <xsd:element name="imprint"         type="CT_OnOff"/>
      <xsd:element name="noProof"         type="CT_OnOff"/>
      <xsd:element name="snapToGrid"      type="CT_OnOff"/>
      <xsd:element name="vanish"          type="CT_OnOff"/>
      <xsd:element name="webHidden"       type="CT_OnOff"/>
      <xsd:element name="color"           type="CT_Color"/>
      <xsd:element name="spacing"         type="CT_SignedTwipsMeasure"/>
      <xsd:element name="w"               type="CT_TextScale"/>
      <xsd:element name="kern"            type="CT_HpsMeasure"/>
      <xsd:element name="position"        type="CT_SignedHpsMeasure"/>
      <xsd:element name="sz"              type="CT_HpsMeasure"/>
      <xsd:element name="szCs"            type="CT_HpsMeasure"/>
      <xsd:element name="highlight"       type="CT_Highlight"/>
      <xsd:element name="u"               type="CT_Underline"/>
      <xsd:element name="effect"          type="CT_TextEffect"/>
      <xsd:element name="bdr"             type="CT_Border"/>
      <xsd:element name="shd"             type="CT_Shd"/>
      <xsd:element name="fitText"         type="CT_FitText"/>
      <xsd:element name="vertAlign"       type="CT_VerticalAlignRun"/>
      <xsd:element name="rtl"             type="CT_OnOff"/>
      <xsd:element name="cs"              type="CT_OnOff"/>
      <xsd:element name="em"              type="CT_Em"/>
      <xsd:element name="lang"            type="CT_Language"/>
      <xsd:element name="eastAsianLayout" type="CT_EastAsianLayout"/>
      <xsd:element name="specVanish"      type="CT_OnOff"/>
      <xsd:element name="oMath"           type="CT_OnOff"/>
    </xsd:choice>
    <xsd:element name="rPrChange" type="CT_RPrChange" minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_Fonts">
  <xsd:attribute name="hint"          type="ST_Hint"/>
  <xsd:attribute name="ascii"         type="s:ST_String"/>
  <xsd:attribute name="hAnsi"         type="s:ST_String"/>
  <xsd:attribute name="eastAsia"      type="s:ST_String"/>
  <xsd:attribute name="cs"            type="s:ST_String"/>
  <xsd:attribute name="asciiTheme"    type="ST_Theme"/>
  <xsd:attribute name="hAnsiTheme"    type="ST_Theme"/>
  <xsd:attribute name="eastAsiaTheme" type="ST_Theme"/>
  <xsd:attribute name="cstheme"       type="ST_Theme"/>
</xsd:complexType>

<xsd:complexType name="CT_HpsMeasure">
  <xsd:attribute name="val" type="ST_HpsMeasure" use="required"/>
</xsd:complexType>

<xsd:complexType name="CT_OnOff">
  <xsd:attribute name="val" type="s:ST_OnOff"/>
</xsd:complexType>

<xsd:complexType name="CT_SignedHpsMeasure">
  <xsd:attribute name="val" type="ST_SignedHpsMeasure" use="required"/>
</xsd:complexType>
```

----------------------------------------

TITLE: WordprocessingML for Right-Aligned Paragraph
DESCRIPTION: Shows the XML structure for a paragraph (w:p) with explicit right alignment set using the w:jc element with w:val="right" within the paragraph properties (w:pPr).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_12

LANGUAGE: xml
CODE:
```
<w:p>
  <w:pPr>
    <w:jc w:val="right"/>
  </w:pPr>
  <w:r>
    <w:t>Right-aligned paragraph.</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: Defining Complex Type CT_GraphicalObject (XML)
DESCRIPTION: Defines a complex type representing a graphical object. It contains a single required element, 'graphicData', which holds the specific data for the graphical object and is defined by the CT_GraphicalObjectData type.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/shapes-inline.rst#_snippet_7

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_GraphicalObject">
    <xsd:sequence>
      <xsd:element name="graphicData" type="CT_GraphicalObjectData"/>
    </xsd:sequence>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining Inline WordprocessingML Elements (XSD)
DESCRIPTION: This snippet defines various inline elements within the WordprocessingML schema, such as date/time fields, references, symbols, page numbers, breaks, objects, pictures, drawings, and tabs. Each element is associated with a specific complex or simple type.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/breaks.rst#_snippet_8

LANGUAGE: XSD
CODE:
```
      <xsd:element name="dayLong"               type="CT_Empty"/>
      <xsd:element name="monthLong"             type="CT_Empty"/>
      <xsd:element name="yearLong"              type="CT_Empty"/>
      <xsd:element name="annotationRef"         type="CT_Empty"/>
      <xsd:element name="footnoteRef"           type="CT_Empty"/>
      <xsd:element name="endnoteRef"            type="CT_Empty"/>
      <xsd:element name="separator"             type="CT_Empty"/>
      <xsd:element name="continuationSeparator" type="CT_Empty"/>
      <xsd:element name="sym"                   type="CT_Sym"/>
      <xsd:element name="pgNum"                 type="CT_Empty"/>
      <xsd:element name="cr"                    type="CT_Empty"/>
      <xsd:element name="tab"                   type="CT_Empty"/>
      <xsd:element name="object"                type="CT_Object"/>
      <xsd:element name="pict"                  type="CT_Picture"/>
      <xsd:element name="fldChar"               type="CT_FldChar"/>
      <xsd:element name="ruby"                  type="CT_Ruby"/>
      <xsd:element name="footnoteReference"     type="CT_FtnEdnRef"/>
      <xsd:element name="endnoteReference"      type="CT_FtnEdnRef"/>
      <xsd:element name="commentReference"      type="CT_Markup"/>
      <xsd:element name="drawing"               type="CT_Drawing"/>
      <xsd:element name="ptab"                  type="CT_PTab"/>
      <xsd:element name="lastRenderedPageBreak" type="CT_Empty"/>
```

----------------------------------------

TITLE: Define CT_PPr Complex Type (Paragraph Properties) - XSD
DESCRIPTION: Defines the complex type for paragraph properties in WordprocessingML. It includes a sequence of optional elements representing various paragraph formatting attributes like style, keep settings, borders, shading, spacing, indentation, justification, etc.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/tab-stops.rst#_snippet_2

LANGUAGE: XSD
CODE:
```
<xsd:complexType name="CT_PPr">  <!-- denormalized -->
    <xsd:sequence>
      <xsd:element name="pStyle"              type="CT_String"           minOccurs="0"/>
      <xsd:element name="keepNext"            type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="keepLines"           type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="pageBreakBefore"     type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="framePr"             type="CT_FramePr"          minOccurs="0"/>
      <xsd:element name="widowControl"        type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="numPr"               type="CT_NumPr"            minOccurs="0"/>
      <xsd:element name="suppressLineNumbers" type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="pBdr"                type="CT_PBdr"             minOccurs="0"/>
      <xsd:element name="shd"                 type="CT_Shd"              minOccurs="0"/>
      <xsd:element name="tabs"                type="CT_Tabs"             minOccurs="0"/>
      <xsd:element name="suppressAutoHyphens" type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="kinsoku"             type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="wordWrap"            type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="overflowPunct"       type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="topLinePunct"        type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="autoSpaceDE"         type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="autoSpaceDN"         type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="bidi"                type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="adjustRightInd"      type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="snapToGrid"          type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="spacing"             type="CT_Spacing"          minOccurs="0"/>
      <xsd:element name="ind"                 type="CT_Ind"              minOccurs="0"/>
      <xsd:element name="contextualSpacing"   type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="mirrorIndents"       type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="suppressOverlap"     type="CT_OnOff"            minOccurs="0"/>
      <xsd:element name="jc"                  type="CT_Jc"               minOccurs="0"/>
      <xsd:element name="textDirection"       type="CT_TextDirection"    minOccurs="0"/>
      <xsd:element name="textAlignment"       type="CT_TextAlignment"    minOccurs="0"/>
      <xsd:element name="textboxTightWrap"    type="CT_TextboxTightWrap" minOccurs="0"/>
      <xsd:element name="outlineLvl"          type="CT_DecimalNumber"    minOccurs="0"/>
      <xsd:element name="divId"               type="CT_DecimalNumber"    minOccurs="0"/>
      <xsd:element name="cnfStyle"            type="CT_Cnf"              minOccurs="0"/>
      <xsd:element name="rPr"                 type="CT_ParaRPr"          minOccurs="0"/>
      <xsd:element name="sectPr"              type="CT_SectPr"           minOccurs="0"/>
      <xsd:element name="pPrChange"           type="CT_PPrChange"        minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
```

----------------------------------------

TITLE: Define ST_TabJc Simple Type (Tab Justification) - XSD
DESCRIPTION: Defines a simple type representing the possible justification values for a tab stop. It is a restriction on a string type with specific enumerated values like 'start', 'center', 'end', 'decimal', etc.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/tab-stops.rst#_snippet_5

LANGUAGE: XSD
CODE:
```
<xsd:simpleType name="ST_TabJc">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="clear"/>
      <xsd:enumeration value="start"/>
      <xsd:enumeration value="center"/>
      <xsd:enumeration value="end"/>
      <xsd:enumeration value="decimal"/>
      <xsd:enumeration value="bar"/>
      <xsd:enumeration value="num"/>
      <xsd:enumeration value="left"/>
      <xsd:enumeration value="right"/>
    </xsd:restriction>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Defining Complex Type CT_VerticalJc in XML
DESCRIPTION: Defines the complex type for specifying vertical justification (alignment) within a table cell, requiring a 'val' attribute of type ST_VerticalJc.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_5

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_VerticalJc">
    <xsd:attribute name="val" type="ST_VerticalJc" use="required"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Schema Excerpt for CT_Settings
DESCRIPTION: Shows a portion of the XML schema definition (`xsd`) for the `CT_Settings` complex type, which defines the structure and allowed elements within the `settings.xml` part. It lists several optional elements like `writeProtection`, `view`, `zoom`, and various boolean settings.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_2

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Settings">
  <xsd:sequence>
    <xsd:element name="writeProtection"            type="CT_WriteProtection" minOccurs="0"/>
    <xsd:element name="view"                       type="CT_View"            minOccurs="0"/>
    <xsd:element name="zoom"                       type="CT_Zoom"            minOccurs="0"/>
    <xsd:element name="removePersonalInformation"  type="CT_OnOff"           minOccurs="0"/>
    <xsd:element name="removeDateAndTime"          type="CT_OnOff"           minOccurs="0"/>
    <xsd:element name="doNotDisplayPageBoundaries" type="CT_OnOff"           minOccurs="0"/>
    <xsd:element name="displayBackgroundShape"     type="CT_OnOff"           minOccurs="0"/>
    <xsd:element name="printPostScriptOverText"    type="CT_OnOff"           minOccurs="0"/>
    <xsd:element name="printFractionalCharacterWidth" type="CT_OnOff"        minOccurs="0"/>
    <xsd:element name="printFormsData"             type="CT_OnOff"           minOccurs="0"/>
    <xsd:element name="embedTrueTypeFonts"         type="CT_OnOff"           minOccurs="0"/>
    <xsd:element name="embedSystemFonts"           type="CT_OnOff"           minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>
```

----------------------------------------

TITLE: Define saveFormsData Element in XSD
DESCRIPTION: Defines the 'saveFormsData' element in an XML Schema. This element is of type 'CT_OnOff', indicating a boolean setting, and is optional ('minOccurs="0"'). It controls whether form data is saved with the document.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_4

LANGUAGE: XSD
CODE:
```
<xsd:element name="saveFormsData" type="CT_OnOff" minOccurs="0"/>
```

----------------------------------------

TITLE: Defining CT_SectPr Complex Type in XML Schema
DESCRIPTION: Defines the CT_SectPr complex type, representing section properties in a document. It includes a sequence of optional elements for various settings like title page, text direction, and document grid, along with attributes for revision IDs.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_17

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_SectPr">
      <xsd:sequence>
        <xsd:element name="titlePg"         type="CT_OnOff"         minOccurs="0"/>
        <xsd:element name="textDirection"   type="CT_TextDirection" minOccurs="0"/>
        <xsd:element name="bidi"            type="CT_OnOff"         minOccurs="0"/>
        <xsd:element name="rtlGutter"       type="CT_OnOff"         minOccurs="0"/>
        <xsd:element name="docGrid"         type="CT_DocGrid"       minOccurs="0"/>
        <xsd:element name="printerSettings" type="CT_Rel"           minOccurs="0"/>
        <xsd:element name="sectPrChange"    type="CT_SectPrChange"  minOccurs="0"/>
      </xsd:sequence>
      <xsd:attribute name="rsidRPr"  type="ST_LongHexNumber"/>
      <xsd:attribute name="rsidDel"  type="ST_LongHexNumber"/>
      <xsd:attribute name="rsidR"    type="ST_LongHexNumber"/>
      <xsd:attribute name="rsidSect" type="ST_LongHexNumber"/>
    </xsd:complexType>
```

----------------------------------------

TITLE: Defining EG_RunLevelElts Group in XSD
DESCRIPTION: Defines a group of elements that can appear at the run level in WordprocessingML, including proofing errors, permissions, track changes, math elements, and various markup elements.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/index.rst#_snippet_3

LANGUAGE: XSD
CODE:
```
<xsd:group name="EG_RunLevelElts">  <!-- denormalized -->
    <xsd:choice>
      <xsd:element name="proofErr"                    type="CT_ProofErr"/>
      <xsd:element name="permStart"                   type="CT_PermStart"/>
      <xsd:element name="permEnd"                     type="CT_Perm"/>
      <xsd:element name="ins"                         type="CT_RunTrackChange"/>
      <xsd:element name="del"                         type="CT_RunTrackChange"/>
      <xsd:element name="moveFrom"                    type="CT_RunTrackChange"/>
      <xsd:element name="moveTo"                      type="CT_RunTrackChange"/>
      <xsd:element  ref="m:oMathPara"                 type="CT_OMathPara"/>
      <xsd:element  ref="m:oMath"                     type="CT_OMath"/>
      <xsd:element name="bookmarkStart"               type="CT_Bookmark"/>
      <xsd:element name="bookmarkEnd"                 type="CT_MarkupRange"/>
      <xsd:element name="moveFromRangeStart"          type="CT_MoveBookmark"/>
      <xsd:element name="moveFromRangeEnd"            type="CT_MarkupRange"/>
      <xsd:element name="moveToRangeStart"            type="CT_MoveBookmark"/>
      <xsd:element name="moveToRangeEnd"              type="CT_MarkupRange"/>
      <xsd:element name="commentRangeStart"           type="CT_MarkupRange"/>
      <xsd:element name="commentRangeEnd"             type="CT_MarkupRange"/>
      <xsd:element name="customXmlInsRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlInsRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlDelRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlDelRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlMoveFromRangeStart" type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveFromRangeEnd"   type="CT_Markup"/>
      <xsd:element name="customXmlMoveToRangeStart"   type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveToRangeEnd"     type="CT_Markup"/>
    </xsd:choice>
  </xsd:group>
```

----------------------------------------

TITLE: CT_OnOff Complex Type Definition (XSD)
DESCRIPTION: Defines the XML Schema complex type CT_OnOff, used for attributes that represent an on/off state. It contains a single attribute val of type s:ST_OnOff.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_27

LANGUAGE: XML
CODE:
```
  <xsd:complexType name="CT_OnOff">
    <xsd:attribute name="val" type="s:ST_OnOff"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: ST_OnOff Simple Type Definition (XSD)
DESCRIPTION: Defines the XML Schema simple type ST_OnOff, which is a union of xsd:boolean and ST_OnOff1. This allows the value to be a standard boolean (true/false, 0/1) or the specific string values "on" or "off".
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_29

LANGUAGE: XML
CODE:
```
  <xsd:simpleType name="ST_OnOff">
    <xsd:union memberTypes="xsd:boolean ST_OnOff1"/>
  </xsd:simpleType>
```

----------------------------------------

TITLE: CT_Document XML Schema Definition (XSD)
DESCRIPTION: Provides the XML Schema definition for the `CT_Document` complex type and related types (`ST_ConformanceClass`, `CT_Background`, `CT_Body`), detailing the allowed child elements (`background`, `body`) and attributes (`conformance`) within a WordprocessingML document element.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/schema/ct_document.rst#_snippet_1

LANGUAGE: xml
CODE:
```
<xsd:complexType name="CT_Document">
  <xsd:sequence>
    <xsd:element name="background" type="CT_Background" minOccurs="0"/>
    <xsd:element name="body"       type="CT_Body"       minOccurs="0" maxOccurs="1"/>
  </xsd:sequence>
  <xsd:attribute name="conformance" type="s:ST_ConformanceClass"/>
</xsd:complexType>

<xsd:simpleType name="ST_ConformanceClass">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="strict"/>
    <xsd:enumeration value="transitional"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:complexType name="CT_Background">
  <xsd:sequence>
    <xsd:sequence maxOccurs="unbounded">
      <xsd:any processContents="lax" namespace="urn:schemas-microsoft-com:vml"
               minOccurs="0" maxOccurs="unbounded"/>
      <xsd:any processContents="lax" namespace="urn:schemas-microsoft-com:office:office"
               minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:element name="drawing" type="CT_Drawing" minOccurs="0"/>
  </xsd:sequence>
  <xsd:attribute name="color"      type="ST_HexColor"       use="optional"/>
    <xsd:attribute name="themeColor" type="ST_ThemeColor"     use="optional"/>
    <xsd:attribute name="themeTint"  type="ST_UcharHexNumber" use="optional"/>
    <xsd:attribute name="themeShade" type="ST_UcharHexNumber" use="optional"/>
  </xsd:complexType>

  <xsd:complexType name="CT_Body">  <!-- denormalized -->
    <xsd:sequence>
      <xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element name="p"                           type="CT_P"/>
        <xsd:element name="tbl"                         type="CT_Tbl"/>
        <xsd:element name="sdt"                         type="CT_SdtBlock"/>
        <xsd:element name="customXml"                   type="CT_CustomXmlBlock"/>
        <xsd:element name="altChunk"                    type="CT_AltChunk"/>
        <xsd:element name="proofErr"                    type="CT_ProofErr"/>
        <xsd:element name="permStart"                   type="CT_PermStart"/>
        <xsd:element name="permEnd"                     type="CT_Perm"/>
        <xsd:element name="bookmarkStart"               type="CT_Bookmark"/>
        <xsd:element name="bookmarkEnd"                 type="CT_MarkupRange"/>
        <xsd:element name="moveFromRangeStart"          type="CT_MoveBookmark"/>
        <xsd:element name="moveFromRangeEnd"            type="CT_MarkupRange"/>
        <xsd:element name="moveToRangeStart"            type="CT_MoveBookmark"/>
        <xsd:element name="moveToRangeEnd"              type="CT_MarkupRange"/>
        <xsd:element name="commentRangeStart"           type="CT_MarkupRange"/>
        <xsd:element name="commentRangeEnd"             type="CT_MarkupRange"/>
        <xsd:element name="customXmlInsRangeStart"      type="CT_TrackChange"/>
        <xsd:element name="customXmlInsRangeEnd"        type="CT_Markup"/>
        <xsd:element name="customXmlDelRangeStart"      type="CT_TrackChange"/>
        <xsd:element name="customXmlDelRangeEnd"        type="CT_Markup"/>
        <xsd:element name="customXmlMoveFromRangeStart" type="CT_TrackChange"/>
        <xsd:element name="customXmlMoveFromRangeEnd"   type="CT_Markup"/>
        <xsd:element name="customXmlMoveToRangeStart"   type="CT_TrackChange"/>
        <xsd:element name="customXmlMoveToRangeEnd"     type="CT_Markup"/>
        <xsd:element name="ins"                         type="CT_RunTrackChange"/>
        <xsd:element name="del"                         type="CT_RunTrackChange"/>
        <xsd:element name="moveFrom"                    type="CT_RunTrackChange"/>
        <xsd:element name="moveTo"                      type="CT_RunTrackChange"/>
        <xsd:element ref="m:oMathPara"/>
        <xsd:element ref="m:oMath"/>
      </xsd:choice>
      <xsd:element name="sectPr" minOccurs="0" maxOccurs="1" type="CT_SectPr"/>
    </xsd:sequence>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining CT_Ind Complex Type in XSD
DESCRIPTION: This XSD snippet defines the CT_Ind complex type, used to specify paragraph indentation properties. It includes attributes for left, right, first line, and hanging indents, specified in measurement units (TwipsMeasure) or character units (DecimalNumber).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_16

LANGUAGE: XML Schema
CODE:
```
<xsd:complexType name="CT_Ind">
  <xsd:attribute name="start"          type="ST_SignedTwipsMeasure"/>
  <xsd:attribute name="startChars"     type="ST_DecimalNumber"/>
  <xsd:attribute name="end"            type="ST_SignedTwipsMeasure"/>
  <xsd:attribute name="endChars"       type="ST_DecimalNumber"/>
  <xsd:attribute name="left"           type="ST_SignedTwipsMeasure"/>
  <xsd:attribute name="leftChars"      type="ST_DecimalNumber"/>
  <xsd:attribute name="right"          type="ST_SignedTwipsMeasure"/>
  <xsd:attribute name="rightChars"     type="ST_DecimalNumber"/>
  <xsd:attribute name="hanging"        type="s:ST_TwipsMeasure"/>
  <xsd:attribute name="hangingChars"   type="ST_DecimalNumber"/>
  <xsd:attribute name="firstLine"      type="s:ST_TwipsMeasure"/>
  <xsd:attribute name="firstLineChars" type="ST_DecimalNumber"/>
</xsd:complexType>
```

----------------------------------------

TITLE: Defining OpenXML Wordprocessing Types (XSD)
DESCRIPTION: This snippet defines several key types for the OpenXML word processing schema. It includes the complex type CT_Tabs for defining tab stops and simple types like ST_Jc for justification, ST_LineSpacingRule for line spacing behavior, and ST_OnOff/ST_OnOff1 for boolean-like attributes.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/paragraph-format.rst#_snippet_21

LANGUAGE: XSD
CODE:
```
<xsd:complexType name="CT_Tabs">
  <xsd:sequence>
    <xsd:element name="tab" type="CT_TabStop" maxOccurs="unbounded"/>
  </xsd:sequence>
</xsd:complexType>

<!-- simple types -->

<xsd:simpleType name="ST_Jc">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="start"/>
    <xsd:enumeration value="center"/>
    <xsd:enumeration value="end"/>
    <xsd:enumeration value="both"/>
    <xsd:enumeration value="mediumKashida"/>
    <xsd:enumeration value="distribute"/>
    <xsd:enumeration value="numTab"/>
    <xsd:enumeration value="highKashida"/>
    <xsd:enumeration value="lowKashida"/>
    <xsd:enumeration value="thaiDistribute"/>
    <xsd:enumeration value="left"/>
    <xsd:enumeration value="right"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="ST_LineSpacingRule">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="auto"/>  <!-- default -->
    <xsd:enumeration value="exact"/>
    <xsd:enumeration value="atLeast"/>
  </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="ST_OnOff">
  <xsd:union memberTypes="xsd:boolean ST_OnOff1"/>
</xsd:simpleType>

<xsd:simpleType name="ST_OnOff1">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="on"/>
    <xsd:enumeration value="off"/>
  </xsd:restriction>
</xsd:simpleType>
```

----------------------------------------

TITLE: Defining Complex Type CT_NonVisualGraphicFrameProperties (XML)
DESCRIPTION: Defines a complex type for non-visual graphic frame properties. It contains optional elements for graphic frame locking and an extension list, providing configuration options for graphic frames.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/shapes-inline.rst#_snippet_6

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_NonVisualGraphicFrameProperties">
    <xsd:sequence>
      <xsd:element name="graphicFrameLocks" type="CT_GraphicalObjectFrameLocking" minOccurs="0"/>
      <xsd:element name="extLst"            type="CT_OfficeArtExtensionList"      minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining WordprocessingML Elements (XSD)
DESCRIPTION: This snippet defines a group of XML elements used in WordprocessingML documents. Each element is specified with a name and a type, referencing either simple empty types (CT_Empty) or more complex types like CT_FtnEdnRef, CT_Markup, CT_Object, CT_Picture, CT_Ruby, CT_Drawing, or CT_Text.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/schema/ct_p.rst#_snippet_1

LANGUAGE: XML
CODE:
```
      <xsd:element name="monthLong"             type="CT_Empty"/>
      <xsd:element name="yearLong"              type="CT_Empty"/>
      <xsd:element name="annotationRef"         type="CT_Empty"/>
      <xsd:element name="footnoteReference"     type="CT_FtnEdnRef"/>
      <xsd:element name="footnoteRef"           type="CT_Empty"/>
      <xsd:element name="endnoteReference"      type="CT_FtnEdnRef"/>
      <xsd:element name="endnoteRef"            type="CT_Empty"/>
      <xsd:element name="commentReference"      type="CT_Markup"/>
      <xsd:element name="separator"             type="CT_Empty"/>
      <xsd:element name="continuationSeparator" type="CT_Empty"/>
      <xsd:element name="pgNum"                 type="CT_Empty"/>
      <xsd:element name="object"                type="CT_Object"/>
      <xsd:element name="pict"                  type="CT_Picture"/>
      <xsd:element name="ruby"                  type="CT_Ruby"/>
      <xsd:element name="drawing"               type="CT_Drawing"/>
      <xsd:element name="delText"               type="CT_Text"/>
      <xsd:element name="delInstrText"          type="CT_Text"/>
      <xsd:element name="lastRenderedPageBreak" type="CT_Empty"/>
    </xsd:choice>
  </xsd:group>
```

----------------------------------------

TITLE: Defining ST_DecimalNumber Simple Type in XSD
DESCRIPTION: Defines a simple type (ST_DecimalNumber) which restricts its value to be an integer. This type is used for attributes requiring an integer value.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_11

LANGUAGE: XSD
CODE:
```
<xsd:simpleType name="ST_DecimalNumber">
     <xsd:restriction base="xsd:integer"/>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Defining Simple Type ST_MeasurementOrPercent in XML
DESCRIPTION: Defines a simple type that is a union of ST_DecimalNumberOrPercent and s:ST_UniversalMeasure, allowing a value to be a percentage or a universal measure unit (like inches, points, etc.).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_7

LANGUAGE: XML
CODE:
```
<xsd:simpleType name="ST_MeasurementOrPercent">
    <xsd:union memberTypes="ST_DecimalNumberOrPercent s:ST_UniversalMeasure"/>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Defining ST_StyleType Simple Type in XSD
DESCRIPTION: Defines a simple type restricting a string value to one of the valid style types: paragraph, character, table, or numbering.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/styles.rst#_snippet_13

LANGUAGE: XML
CODE:
```
<xsd:simpleType name="ST_StyleType">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="paragraph"/>
    <xsd:enumeration value="character"/>
    <xsd:enumeration value="table"/>
    <xsd:enumeration value="numbering"/>
  </xsd:restriction>
</xsd:simpleType>
```

----------------------------------------

TITLE: CT_Style Complex Type Definition (XSD)
DESCRIPTION: Defines the XML Schema complex type CT_Style, which specifies the structure and elements allowed within a WordprocessingML style definition. It lists various optional child elements representing style properties like name, basedOn, link, UI priority, and formatting properties (pPr, rPr, tblPr, etc.), along with attributes like type, styleId, default, and customStyle.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_26

LANGUAGE: XML
CODE:
```
  <xsd:complexType name="CT_Style">
    <xsd:sequence>
      <xsd:element name="name"            type="CT_String"        minOccurs="0"/>
      <xsd:element name="aliases"         type="CT_String"        minOccurs="0"/>
      <xsd:element name="basedOn"         type="CT_String"        minOccurs="0"/>
      <xsd:element name="next"            type="CT_String"        minOccurs="0"/>
      <xsd:element name="link"            type="CT_String"        minOccurs="0"/>
      <xsd:element name="autoRedefine"    type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="hidden"          type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="uiPriority"      type="CT_DecimalNumber" minOccurs="0"/>
      <xsd:element name="semiHidden"      type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="unhideWhenUsed"  type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="qFormat"         type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="locked"          type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="personal"        type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="personalCompose" type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="personalReply"   type="CT_OnOff"         minOccurs="0"/>
      <xsd:element name="rsid"            type="CT_LongHexNumber" minOccurs="0"/>
      <xsd:element name="pPr"             type="CT_PPrGeneral"    minOccurs="0"/>
      <xsd:element name="rPr"             type="CT_RPr"           minOccurs="0"/>
      <xsd:element name="tblPr"           type="CT_TblPrBase"     minOccurs="0"/>
      <xsd:element name="trPr"            type="CT_TrPr"          minOccurs="0"/>
      <xsd:element name="tcPr"            type="CT_TcPr"          minOccurs="0"/>
      <xsd:element name="tblStylePr"      type="CT_TblStylePr"    minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="type"        type="ST_StyleType"/>
    <xsd:attribute name="styleId"     type="s:ST_String"/>
    <xsd:attribute name="default"     type="s:ST_OnOff"/>
    <xsd:attribute name="customStyle" type="s:ST_OnOff"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Representing Internal Hyperlinks with Anchors in WordprocessingML XML
DESCRIPTION: Shows the XML structure for an internal hyperlink in `document.xml`. Internal links use the `w:anchor` attribute to reference a bookmark name within the same document instead of an `r:id`.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_18

LANGUAGE: XML
CODE:
```
<w:p>
  <w:r>
    <w:t xml:space="preserve">See </w:t>
  </w:r>
  <w:hyperlink w:anchor="Section_4">
    <w:r>
      <w:rPr>
        <w:rStyle w:val="Hyperlink"/>
      </w:rPr>
      <w:t>Section 4</w:t>
    </w:r>
  </w:hyperlink>
  <w:r>
    <w:t xml:space="preserve"> for more details.</w:t>
  </w:r>
</w:p>
```

----------------------------------------

TITLE: OpenXML Schema Definitions for Table Rows
DESCRIPTION: Provides the XML Schema Definitions (XSD) for `CT_Tbl`, `CT_Row`, `CT_TrPr`, `CT_Height`, and `ST_HeightRule`, which define the structure and properties of tables and rows in the OpenXML format used by .docx files.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-row.rst#_snippet_1

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_Tbl">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:group    ref="EG_RangeMarkupElements"        minOccurs="0" maxOccurs="unbounded"/>
    <xsd:element name="tblPr"       type="CT_TblPr"/>
    <xsd:element name="tblGrid"     type="CT_TblGrid"/>
    <xsd:choice                                       minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="tr"        type="CT_Row"/>
      <xsd:element name="customXml" type="CT_CustomXmlRow"/>
      <xsd:element name="sdt"       type="CT_SdtRow"/>
      <xsd:group    ref="EG_RunLevelElts"             minOccurs="0" maxOccurs="unbounded"/>
    </xsd:choice>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_Row">
  <xsd:sequence>
    <xsd:element name="tblPrEx" type="CT_TblPrEx" minOccurs="0"/>
    <xsd:element name="trPr"    type="CT_TrPr"    minOccurs="0"/>
    <xsd:group    ref="EG_ContentCellContent"     minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="rsidRPr" type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidR"   type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidDel" type="ST_LongHexNumber"/>
  <xsd:attribute name="rsidTr"  type="ST_LongHexNumber"/>
</xsd:complexType>

<xsd:complexType name="CT_TrPr">  <!-- denormalized -->
  <xsd:sequence>
    <xsd:element name="cnfStyle"       type="CT_Cnf"           minOccurs="0"/>
    <xsd:element name="divId"          type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="gridBefore"     type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="gridAfter"      type="CT_DecimalNumber" minOccurs="0"/>
    <xsd:element name="wBefore"        type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="wAfter"         type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="cantSplit"      type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="trHeight"       type="CT_Height"        minOccurs="0"/>
    <xsd:element name="tblHeader"      type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="tblCellSpacing" type="CT_TblWidth"      minOccurs="0"/>
    <xsd:element name="jc"             type="CT_JcTable"       minOccurs="0"/>
    <xsd:element name="hidden"         type="CT_OnOff"         minOccurs="0"/>
    <xsd:element name="ins"            type="CT_TrackChange"   minOccurs="0"/>
    <xsd:element name="del"            type="CT_TrackChange"   minOccurs="0"/>
    <xsd:element name="trPrChange"     type="CT_TrPrChange"    minOccurs="0"/>
  </xsd:sequence>
</xsd:complexType>

<xsd:complexType name="CT_Height">
  <xsd:attribute name="val"   type="s:ST_TwipsMeasure"/>
  <xsd:attribute name="hRule" type="ST_HeightRule"/>
</xsd:complexType>

<xsd:simpleType name="ST_HeightRule">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="auto"/>
    <xsd:enumeration value="exact"/>
    <xsd:enumeration value="atLeast"/>
  </xsd:restriction>
</xsd:simpleType>
```

----------------------------------------

TITLE: Define alignBordersAndEdges Element in XSD
DESCRIPTION: Defines the 'alignBordersAndEdges' element in an XML Schema. This element is of type 'CT_OnOff', indicating a boolean setting, and is optional ('minOccurs="0"'). It controls alignment of borders and edges.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_6

LANGUAGE: XSD
CODE:
```
<xsd:element name="alignBordersAndEdges" type="CT_OnOff" minOccurs="0"/>
```

----------------------------------------

TITLE: Define mirrorMargins Element in XSD
DESCRIPTION: Defines the 'mirrorMargins' element in an XML Schema. This element is of type 'CT_OnOff', indicating a boolean setting, and is optional ('minOccurs="0"'). It controls whether margins are mirrored for facing pages.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_5

LANGUAGE: XSD
CODE:
```
<xsd:element name="mirrorMargins" type="CT_OnOff" minOccurs="0"/>
```

----------------------------------------

TITLE: Defining ST_Underline Simple Type (XSD)
DESCRIPTION: Defines the `ST_Underline` simple type as a restriction on `xsd:string`. It enumerates the various possible styles for text underlining, such as "single", "double", "dotted", "wave", and "none".
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font.rst#_snippet_14

LANGUAGE: XSD
CODE:
```
<xsd:simpleType name="ST_Underline">
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="single"/>
    <xsd:enumeration value="words"/>
    <xsd:enumeration value="double"/>
    <xsd:enumeration value="thick"/>
    <xsd:enumeration value="dotted"/>
    <xsd:enumeration value="dottedHeavy"/>
    <xsd:enumeration value="dash"/>
    <xsd:enumeration value="dashedHeavy"/>
    <xsd:enumeration value="dashLong"/>
    <xsd:enumeration value="dashLongHeavy"/>
    <xsd:enumeration value="dotDash"/>
    <xsd:enumeration value="dashDotHeavy"/>
    <xsd:enumeration value="dotDotDash"/>
    <xsd:enumeration value="dashDotDotHeavy"/>
    <xsd:enumeration value="wave"/>
    <xsd:enumeration value="wavyHeavy"/>
    <xsd:enumeration value="wavyDouble"/>
    <xsd:enumeration value="none"/>
  </xsd:restriction>
</xsd:simpleType>
```

----------------------------------------

TITLE: Defining CT_Text Complex Type (XSD)
DESCRIPTION: This snippet defines the CT_Text complex type in XML Schema. It is based on a simple string type (s:ST_String) and extends it to include an optional xml:space attribute, which is used to control how whitespace is handled within the element's content.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/schema/ct_p.rst#_snippet_2

LANGUAGE: XML
CODE:
```
  <xsd:complexType name="CT_Text">
    <xsd:simpleContent>
      <xsd:extension base="s:ST_String">
        <xsd:attribute ref="xml:space" use="optional"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining Table Layout Type in XSD
DESCRIPTION: Defines the complex type CT_TblLayoutType and the simple type ST_TblLayoutType for specifying the table layout algorithm, restricting values to "fixed" or "autofit".
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-props.rst#_snippet_8

LANGUAGE: XSD
CODE:
```
  <xsd:complexType name="CT_TblLayoutType">
    <xsd:attribute name="type" type="ST_TblLayoutType"/>
  </xsd:complexType>

  <xsd:simpleType name="ST_TblLayoutType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="fixed"/>
      <xsd:enumeration value="autofit"/>
    </xsd:restriction>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Defining Complex Type CT_TblWidth in XML
DESCRIPTION: Defines the complex type for specifying table or cell width, including attributes for the width value ('w') and the type of measurement ('type'), such as percentage, twips (dxa), or auto.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_4

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_TblWidth">
    <xsd:attribute name="w"    type="ST_MeasurementOrPercent"/>
    <xsd:attribute name="type" type="ST_TblWidth"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Define bordersDoNotSurroundHeader Element in XSD
DESCRIPTION: Defines the 'bordersDoNotSurroundHeader' element in an XML Schema. This element is of type 'CT_OnOff', indicating a boolean setting, and is optional ('minOccurs="0"'). It controls whether borders surround the header.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_7

LANGUAGE: XSD
CODE:
```
<xsd:element name="bordersDoNotSurroundHeader" type="CT_OnOff" minOccurs="0"/>
```

----------------------------------------

TITLE: Defining CT_NonVisualPictureProperties in XML Schema
DESCRIPTION: Defines non-visual properties specific to a picture element. It includes optional picture locking properties and an extension list, with an attribute to prefer relative resizing.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_7

LANGUAGE: XML Schema
CODE:
```
<xsd:complexType name="CT_NonVisualPictureProperties">
    <xsd:sequence>
      <xsd:element name="picLocks" type="CT_PictureLocking"         minOccurs="0"/>
      <xsd:element name="extLst"   type="CT_OfficeArtExtensionList" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="preferRelativeResize" type="xsd:boolean" default="true"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: OpenXML Header Part Content
DESCRIPTION: Provides an example of the XML structure within a header part (`<w:hdr>`), showing a simple paragraph (`<w:p>`) with a style (`<w:pStyle>`) and text content (`<w:t>`).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_13

LANGUAGE: XML
CODE:
```
<w:hdr>
  <w:p>
    <w:pPr>
      <w:pStyle w:val="Header"/>
    </w:pPr>
    <w:r>
      <w:t>Header for section-1</w:t>
    </w:r>
  </w:p>
</w:hdr>
```

----------------------------------------

TITLE: OpenXML Default Header Reference
DESCRIPTION: Shows the OpenXML structure within `<w:sectPr>` for referencing a default header part using the `w:type="default"` attribute. This is used when the same header appears on all pages.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_8

LANGUAGE: XML
CODE:
```
<w:sectPr>
    <w:headerReference w:type="default" r:id="rId3"/>
    ...
</w:sectPr>
```

----------------------------------------

TITLE: Define saveSubsetFonts Element in XSD
DESCRIPTION: Defines the 'saveSubsetFonts' element in an XML Schema. This element is of type 'CT_OnOff', indicating it's a boolean-like setting, and is optional ('minOccurs="0"'). It controls whether fonts are subsetted when saving the document.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_3

LANGUAGE: XSD
CODE:
```
<xsd:element name="saveSubsetFonts" type="CT_OnOff" minOccurs="0"/>
```

----------------------------------------

TITLE: Defining ST_Highlight Simple Type - XML
DESCRIPTION: This XSD snippet defines the `ST_Highlight` simple type as a restriction of `xsd:string`. It provides a comprehensive list of valid color enumeration values that can be used for highlighting attributes, such as the `val` attribute shown in the preceding complex type definition (not fully included here).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font-highlight-color.rst#_snippet_4

LANGUAGE: XML
CODE:
```
<xsd:attribute name="val" type="ST_Highlight" use="required"/>
  </xsd:complexType>

  <!-- simple types -->

  <xsd:simpleType name="ST_Highlight">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="default"/>
      <xsd:enumeration value="black"/>
      <xsd:enumeration value="blue"/>
      <xsd:enumeration value="green"/>
      <xsd:enumeration value="darkBlue"/>
      <xsd:enumeration value="darkRed"/>
      <xsd:enumeration value="darkYellow"/>
      <xsd:enumeration value="lightGray"/>
      <xsd:enumeration value="darkGray"/>
      <xsd:enumeration value="darkGreen"/>
      <xsd:enumeration value="magenta"/>
      <xsd:enumeration value="red"/>
      <xsd:enumeration value="darkCyan"/>
      <xsd:enumeration value="cyan"/>
      <xsd:enumeration value="darkMagenta"/>
      <xsd:enumeration value="white"/>
      <xsd:enumeration value="yellow"/>
    </xsd:restriction>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Defining EG_RPrContent Group in XSD
DESCRIPTION: This XSD snippet defines the `EG_RPrContent` group, which specifies a sequence containing an optional, repeatable choice of various run properties (`rPr`, `rPrBase`, `noProof`, etc.) followed by an optional `rPrChange` element. It is used to group common run property elements.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/character-style.rst#_snippet_9

LANGUAGE: XSD
CODE:
```
  <xsd:group name="EG_RPrContent">
    <xsd:sequence>
      <xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element name="rPr"             type="CT_RPr"/>
        <xsd:element name="rPrBase"         type="CT_RPrBase"/>
        <xsd:element name="noProof"         type="CT_OnOff"/>
        <xsd:element name="snapToGrid"      type="CT_OnOff"/>
        <xsd:element name="webHidden"       type="CT_OnOff"/>
        <xsd:element name="specVanish"      type="CT_OnOff"/>
        <xsd:element name="oMath"           type="CT_OnOff"/>
      </xsd:choice>
      <xsd:element name="rPrChange" type="CT_RPrChange" minOccurs="0"/>
    </xsd:sequence>
  </xsd:group>
```

----------------------------------------

TITLE: Defining ST_BrType Simple Type (XSD)
DESCRIPTION: This snippet defines the ST_BrType simple type, an enumeration specifying the possible types of breaks in WordprocessingML. Valid values include 'page', 'column', and 'textWrapping'.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/breaks.rst#_snippet_10

LANGUAGE: XSD
CODE:
```
  <xsd:simpleType name="ST_BrType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="page"/>
      <xsd:enumeration value="column"/>
      <xsd:enumeration value="textWrapping"/>
    </xsd:restriction>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Defining ST_SignedHpsMeasure Simple Type (XSD)
DESCRIPTION: Defines the `ST_SignedHpsMeasure` simple type as a union of `xsd:integer` and `s:ST_UniversalMeasure`. This allows representing signed half-point sizes using either an integer or a measured value.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font.rst#_snippet_12

LANGUAGE: XSD
CODE:
```
<xsd:simpleType name="ST_SignedHpsMeasure">
  <xsd:union memberTypes="xsd:integer s:ST_UniversalMeasure"/>
</xsd:simpleType>
```

----------------------------------------

TITLE: Define CT_Tabs Complex Type (Tab Stops Container) - XSD
DESCRIPTION: Defines the complex type for a collection of tab stops. It contains a sequence that can hold one or more CT_TabStop elements, representing the individual tab stops defined for a paragraph.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/tab-stops.rst#_snippet_3

LANGUAGE: XSD
CODE:
```
<xsd:complexType name="CT_Tabs">
    <xsd:sequence>
      <xsd:element name="tab" type="CT_TabStop" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining ST_HdrFtr Simple Type in XML Schema
DESCRIPTION: Defines the ST_HdrFtr simple type, which restricts a string value to a specific set of valid header/footer types: 'even', 'default', or 'first'. This is used by the CT_HdrFtrRef type.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_19

LANGUAGE: XML
CODE:
```
<xsd:simpleType name="ST_HdrFtr">
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="even"/>
        <xsd:enumeration value="default"/>
        <xsd:enumeration value="first"/>
      </xsd:restriction>
    </xsd:simpleType>
```

----------------------------------------

TITLE: Concatenating Cell Content During Merge (Conceptual) in Python
DESCRIPTION: Provides a conceptual Python snippet showing how the text content of original cells is combined when they are merged. Content from non-empty cells is joined by newline characters (\n). This is an internal detail of how python-docx might handle content, not a method to call directly. Requires a list of original_cells.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_3

LANGUAGE: Python
CODE:
```
merged_cell_text = '\n'.join(
    cell.text for cell in original_cells if cell.text
)
```

----------------------------------------

TITLE: Defining ST_RelationshipId in XML Schema
DESCRIPTION: Defines a simple type representing a relationship identifier. It is a restriction of the standard XML Schema string type, commonly used for linking parts within an OpenXML package.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_5

LANGUAGE: XML Schema
CODE:
```
<xsd:simpleType name="ST_RelationshipId">
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>
```

----------------------------------------

TITLE: CT_Body and Related Schema Definitions
DESCRIPTION: Defines the complex type CT_Body and related types/groups (CT_SectPr, EG_BlockLevelElts, etc.) as per the WordprocessingML schema (wml.xsd).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/schema/ct_body.rst#_snippet_1

LANGUAGE: XSD
CODE:
```
<xsd:complexType name="CT_Body">
  <xsd:sequence>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="p"                           type="CT_P"/>
      <xsd:element name="tbl"                         type="CT_Tbl"/>
      <xsd:element name="customXml"                   type="CT_CustomXmlBlock"/>
      <xsd:element name="sdt"                         type="CT_SdtBlock"/>
      <xsd:element name="proofErr"                    type="CT_ProofErr"/>
      <xsd:element name="permStart"                   type="CT_PermStart"/>
      <xsd:element name="permEnd"                     type="CT_Perm"/>
      <xsd:element name="ins"                         type="CT_RunTrackChange"/>
      <xsd:element name="del"                         type="CT_RunTrackChange"/>
      <xsd:element name="moveFrom"                    type="CT_RunTrackChange"/>
      <xsd:element name="moveTo"                      type="CT_RunTrackChange"/>
      <xsd:element  ref="m:oMathPara"                 type="CT_OMathPara"/>
      <xsd:element  ref="m:oMath"                     type="CT_OMath"/>
      <xsd:element name="bookmarkStart"               type="CT_Bookmark"/>
      <xsd:element name="bookmarkEnd"                 type="CT_MarkupRange"/>
      <xsd:element name="moveFromRangeStart"          type="CT_MoveBookmark"/>
      <xsd:element name="moveFromRangeEnd"            type="CT_MarkupRange"/>
      <xsd:element name="moveToRangeStart"            type="CT_MoveBookmark"/>
      <xsd:element name="moveToRangeEnd"              type="CT_MarkupRange"/>
      <xsd:element name="commentRangeStart"           type="CT_MarkupRange"/>
      <xsd:element name="commentRangeEnd"             type="CT_MarkupRange"/>
      <xsd:element name="customXmlInsRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlInsRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlDelRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlDelRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlMoveFromRangeStart" type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveFromRangeEnd"   type="CT_Markup"/>
      <xsd:element name="customXmlMoveToRangeStart" type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveToRangeEnd"     type="CT_Markup"/>
      <xsd:element name="altChunk"                    type="CT_AltChunk"/>
    </xsd:choice>
    <xsd:element name="sectPr" type="CT_SectPr" minOccurs="0" maxOccurs="1"/>
  </xsd:sequence>
</xsd:complexType>

  <xsd:complexType name="CT_Body">
    <xsd:sequence>
      <xsd:group   ref="EG_BlockLevelElts"        minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="sectPr" type="CT_SectPr" minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CT_SectPr">
    <xsd:sequence>
      <xsd:group   ref="EG_HdrFtrReferences"                  minOccurs="0" maxOccurs="6"/>
      <xsd:group   ref="EG_SectPrContents"                    minOccurs="0"/>
      <xsd:element name="sectPrChange" type="CT_SectPrChange" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attributeGroup ref="AG_SectPrAttributes"/>
  </xsd:complexType>

  <xsd:group name="EG_BlockLevelElts">
    <xsd:choice>
      <xsd:group    ref="EG_BlockLevelChunkElts"/>
      <xsd:element name="altChunk"               type="CT_AltChunk"/>
    </xsd:choice>
  </xsd:group>

  <xsd:group name="EG_BlockLevelChunkElts">
    <xsd:choice>
      <xsd:group ref="EG_ContentBlockContent"/>
    </xsd:choice>
  </xsd:group>

  <xsd:group name="EG_ContentBlockContent">
    <xsd:choice>
      <xsd:element name="customXml"       type="CT_CustomXmlBlock"/>
      <xsd:element name="sdt"             type="CT_SdtBlock"/>
      <xsd:element name="p"               type="CT_P"/>
      <xsd:element name="tbl"             type="CT_Tbl"/>
      <xsd:group    ref="EG_RunLevelElts"/>
    </xsd:choice>
  </xsd:group>
```

----------------------------------------

TITLE: Defining Table Look Type in XSD
DESCRIPTION: Defines the complex type CT_TblLook for specifying visual formatting options for a table, such as applying special formatting to the first/last row/column, or disabling horizontal/vertical banding.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-props.rst#_snippet_9

LANGUAGE: XSD
CODE:
```
  <xsd:complexType name="CT_TblLook">
    <xsd:attribute name="firstRow"    type="s:ST_OnOff"/>
    <xsd:attribute name="lastRow"     type="s:ST_OnOff"/>
    <xsd:attribute name="firstColumn" type="s:ST_OnOff"/>
    <xsd:attribute name="lastColumn"  type="s:ST_OnOff"/>
    <xsd:attribute name="noHBand"     type="s:ST_OnOff"/>
    <xsd:attribute name="noVBand"     type="s:ST_OnOff"/>
    <xsd:attribute name="val"         type="ST_ShortHexNumber"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining CT_HMerge Complex Type in XSD
DESCRIPTION: Defines a complex type (CT_HMerge) used to specify horizontal merging properties for a table cell. It contains an optional attribute val of type ST_Merge.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_13

LANGUAGE: XSD
CODE:
```
<xsd:complexType name="CT_HMerge">
    <xsd:attribute name="val" type="ST_Merge"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: OpenXML Schema Definitions for Picture Elements
DESCRIPTION: Provides the XML Schema (XSD) definitions for key DrawingML elements related to pictures, including `CT_Picture`, `CT_PictureNonVisual`, `CT_BlipFillProperties`, `CT_ShapeProperties`, and `CT_Blip`. These schemas define the structure and types of the XML elements used to represent pictures.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_3

LANGUAGE: xsd
CODE:
```
<xsd:element name="pic" type="CT_Picture"/>

  <xsd:complexType name="CT_Picture">
    <xsd:sequence>
      <xsd:element name="nvPicPr"  type="CT_PictureNonVisual"/>
      <xsd:element name="blipFill" type="a:CT_BlipFillProperties"/>
      <xsd:element name="spPr"     type="a:CT_ShapeProperties"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CT_PictureNonVisual">
    <xsd:sequence>
      <xsd:element name="cNvPr"    type="a:CT_NonVisualDrawingProps"/>
      <xsd:element name="cNvPicPr" type="a:CT_NonVisualPictureProperties"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="CT_BlipFillProperties">
    <xsd:sequence>
      <xsd:element name="blip"    type="CT_Blip"         minOccurs="0"/>
      <xsd:element name="srcRect" type="CT_RelativeRect" minOccurs="0"/>
      <xsd:choice minOccurs="0">
        <xsd:element name="tile"    type="CT_TileInfoProperties"/>
        <xsd:element name="stretch" type="CT_StretchInfoProperties"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="dpi"          type="xsd:unsignedInt"/>
    <xsd:attribute name="rotWithShape" type="xsd:boolean"/>
  </xsd:complexType>

  <xsd:complexType name="CT_ShapeProperties">
    <xsd:sequence>
      <xsd:element name="xfrm"    type="CT_Transform2D"            minOccurs="0"/>
      <xsd:group   ref="EG_Geometry"                               minOccurs="0"/>
      <xsd:group   ref="EG_FillProperties"                         minOccurs="0"/>
      <xsd:element name="ln"      type="CT_LineProperties"         minOccurs="0"/>
      <xsd:group   ref="EG_EffectProperties"                       minOccurs="0"/>
      <xsd:element name="scene3d" type="CT_Scene3D"                minOccurs="0"/>
      <xsd:element name="sp3d"    type="CT_Shape3D"                minOccurs="0"/>
      <xsd:element name="extLst"  type="CT_OfficeArtExtensionList" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="bwMode" type="ST_BlackWhiteMode"/>
  </xsd:complexType>

  <xsd:complexType name="CT_Blip">  <!-- denormalized -->
    <xsd:sequence>
      <xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element name="alphaBiLevel" type="CT_AlphaBiLevelEffect"/>
        <xsd:element name="alphaCeiling" type="CT_AlphaCeilingEffect"/>
        <xsd:element name="alphaFloor"   type="CT_AlphaFloorEffect"/>
        <xsd:element name="alphaInv"     type="CT_AlphaInverseEffect"/>
        <xsd:element name="alphaMod"     type="CT_AlphaModulateEffect"/>
```

----------------------------------------

TITLE: Defining Simple Type ST_VerticalJc in XML
DESCRIPTION: Defines a simple type for vertical justification values, restricting it to enumerated string values: 'top', 'center', 'both', or 'bottom'.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_12

LANGUAGE: XML
CODE:
```
<xsd:simpleType name="ST_VerticalJc">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="top"/>
      <xsd:enumeration value="center"/>
      <xsd:enumeration value="both"/>
      <xsd:enumeration value="bottom"/>
    </xsd:restriction>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Defining CT_Styles Complex Type in XSD
DESCRIPTION: Defines the root element for a collection of styles in WordprocessingML. It contains zero or more 'style' elements and attributes defining default properties for styles within the collection.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/styles.rst#_snippet_7

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_Styles">
  <xsd:sequence>
    <xsd:element name="style" type="CT_Style" minOccurs="0" maxOccurs="unbounded"/>
  </xsd:sequence>
  <xsd:attribute name="defLockedState"  type="s:ST_OnOff"/>
  <xsd:attribute name="defUIPriority"   type="ST_DecimalNumber"/>
  <xsd:attribute name="defSemiHidden"   type="s:ST_OnOff"/>
  <xsd:attribute name="defUnhideWhenUsed" type="s:ST_OnOff"/>
  <xsd:attribute name="defQFormat"        type="s:ST_OnOff"/>
  <xsd:attribute name="count"             type="ST_DecimalNumber"/>
</xsd:complexType>
```

----------------------------------------

TITLE: Defining CT_PresetGeometry2D in XML Schema
DESCRIPTION: Defines a complex type representing a preset 2D geometry. It includes an optional list of adjustment values and a required attribute specifying the shape type using ST_ShapeType.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_10

LANGUAGE: XML Schema
CODE:
```
<xsd:complexType name="CT_PresetGeometry2D">
    <xsd:sequence>
      <xsd:element name="avLst" type="CT_GeomGuideList" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="prst" type="ST_ShapeType" use="required"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining ST_PositiveUniversalMeasure Simple Type (XSD)
DESCRIPTION: Defines the `ST_PositiveUniversalMeasure` simple type as a restriction on `ST_UniversalMeasure`. It uses a regular expression pattern to ensure the value is a positive number followed by a valid measurement unit (mm, cm, in, pt, pc, pi).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/font.rst#_snippet_11

LANGUAGE: XSD
CODE:
```
<xsd:simpleType name="ST_PositiveUniversalMeasure">
  <xsd:restriction base="ST_UniversalMeasure">
    <xsd:pattern value="[0-9]+(\.[0-9]+)?(mm|cm|in|pt|pc|pi)"/>
  </xsd:restriction>
</xsd:simpleType>
```

----------------------------------------

TITLE: Defining Simple Type ST_UnqualifiedPercentage in XML
DESCRIPTION: Defines a simple type for a percentage value represented as an integer, without the '%' sign.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_11

LANGUAGE: XML
CODE:
```
<xsd:simpleType name="ST_UnqualifiedPercentage">
    <xsd:restriction base="xsd:integer"/>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Defining EG_RangeMarkupElements Group in XSD
DESCRIPTION: Defines a group of elements used for marking up ranges within a WordprocessingML document, such as bookmarks, move tracking, comments, and custom XML ranges.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/index.rst#_snippet_4

LANGUAGE: XSD
CODE:
```
<xsd:group name="EG_RangeMarkupElements">
    <xsd:choice>
      <xsd:element name="bookmarkStart"               type="CT_Bookmark"/>
      <xsd:element name="bookmarkEnd"                 type="CT_MarkupRange"/>
      <xsd:element name="moveFromRangeStart"          type="CT_MoveBookmark"/>
      <xsd:element name="moveFromRangeEnd"            type="CT_MarkupRange"/>
      <xsd:element name="moveToRangeStart"            type="CT_MoveBookmark"/>
      <xsd:element name="moveToRangeEnd"              type="CT_MarkupRange"/>
      <xsd:element name="commentRangeStart"           type="CT_MarkupRange"/>
      <xsd:element name="commentRangeEnd"             type="CT_MarkupRange"/>
      <xsd:element name="customXmlInsRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlInsRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlDelRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlDelRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlMoveFromRangeStart" type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveFromRangeEnd"   type="CT_Markup"/>
      <xsd:element name="customXmlMoveToRangeStart"   type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveToRangeEnd"     type="CT_Markup"/>
    </xsd:choice>
  </xsd:group>
```

----------------------------------------

TITLE: Defining CT_NonVisualDrawingProps in XML Schema
DESCRIPTION: Defines non-visual properties for a drawing element. It includes optional hyperlink elements for click and hover, an extension list, and required attributes for ID and name, plus optional description, hidden, and title attributes.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_6

LANGUAGE: XML Schema
CODE:
```
<xsd:complexType name="CT_NonVisualDrawingProps">
    <xsd:sequence>
      <xsd:element name="hlinkClick" type="CT_Hyperlink"              minOccurs="0"/>
      <xsd:element name="hlinkHover" type="CT_Hyperlink"              minOccurs="0"/>
      <xsd:element name="extLst"     type="CT_OfficeArtExtensionList" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="id"     type="ST_DrawingElementId" use="required"/>
    <xsd:attribute name="name"   type="xsd:string"          use="required"/>
    <xsd:attribute name="descr"  type="xsd:string"          default=""/>
    <xsd:attribute name="hidden" type="xsd:boolean"         default="false"/>
    <xsd:attribute name="title"  type="xsd:string"          default=""/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining EG_RunLevelElts Group in XML Schema
DESCRIPTION: Defines a group of elements that can occur at the run level within a document. It includes various elements related to proofing errors, permissions, bookmarks, tracked changes (insertions, deletions, moves), comments, custom XML ranges, and mathematical content.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_24

LANGUAGE: XML Schema
CODE:
```
<xsd:group name="EG_RunLevelElts">
    <xsd:choice>
      <xsd:element name="proofErr"                    type="CT_ProofErr"/>
      <xsd:element name="permStart"                   type="CT_PermStart"/>
      <xsd:element name="permEnd"                     type="CT_Perm"/>
      <xsd:element name="bookmarkStart"               type="CT_Bookmark"/>
      <xsd:element name="bookmarkEnd"                 type="CT_MarkupRange"/>
      <xsd:element name="moveFromRangeStart"          type="CT_MoveBookmark"/>
      <xsd:element name="moveFromRangeEnd"            type="CT_MarkupRange"/>
      <xsd:element name="moveToRangeStart"            type="CT_MoveBookmark"/>
      <xsd:element name="moveToRangeEnd"              type="CT_MarkupRange"/>
      <xsd:element name="commentRangeStart"           type="CT_MarkupRange"/>
      <xsd:element name="commentRangeEnd"             type="CT_MarkupRange"/>
      <xsd:element name="customXmlInsRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlInsRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlDelRangeStart"      type="CT_TrackChange"/>
      <xsd:element name="customXmlDelRangeEnd"        type="CT_Markup"/>
      <xsd:element name="customXmlMoveFromRangeStart" type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveFromRangeEnd"   type="CT_Markup"/>
      <xsd:element name="customXmlMoveToRangeStart"   type="CT_TrackChange"/>
      <xsd:element name="customXmlMoveToRangeEnd"     type="CT_Markup"/>
      <xsd:element name="ins"                         type="CT_RunTrackChange"/>
      <xsd:element name="del"                         type="CT_RunTrackChange"/>
      <xsd:element name="moveFrom"                    type="CT_RunTrackChange"/>
      <xsd:element name="moveTo"                      type="CT_RunTrackChange"/>
      <xsd:group ref="EG_MathContent" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:choice>
  </xsd:group>
```

----------------------------------------

TITLE: ST_StyleType Simple Type Definition (XSD)
DESCRIPTION: Defines the XML Schema simple type ST_StyleType, which is a restriction of xsd:string allowing only specific enumeration values representing different types of styles: "paragraph", "character", "table", and "numbering".
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_31

LANGUAGE: XML
CODE:
```
  <xsd:simpleType name="ST_StyleType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="paragraph"/>
      <xsd:enumeration value="character"/>
      <xsd:enumeration value="table"/>
      <xsd:enumeration value="numbering"/>
    </xsd:restriction>
  </xsd:simpleType>
```

----------------------------------------

TITLE: Defining WordprocessingML Styles (XML)
DESCRIPTION: Shows examples of defining default and custom styles within the WordprocessingML styles part, including paragraph, table, and numbering styles. It illustrates the structure for style properties like name, UI priority, hidden status, and table cell margins.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_25

LANGUAGE: XML
CODE:
```
<w:styles>
      <w:name w:val="Default Paragraph Font"/>
      <w:uiPriority w:val="1"/>
      <w:semiHidden/>
      <w:unhideWhenUsed/>
    </w:style>
    <w:style w:type="table" w:default="1" w:styleId="TableNormal">
      <w:name w:val="Normal Table"/>
      <w:uiPriority w:val="99"/>
      <w:semiHidden/>
      <w:unhideWhenUsed/>
      <w:tblPr>
        <w:tblInd w:w="0" w:type="dxa"/>
        <w:tblCellMar>
          <w:top w:w="0" w:type="dxa"/>
          <w:left w:w="108" w:type="dxa"/>
          <w:bottom w:w="0" w:type="dxa"/>
          <w:right w:w="108" w:type="dxa"/>
        </w:tblCellMar>
      </w:tblPr>
    </w:style>
    <w:style w:type="numbering" w:default="1" w:styleId="NoList">
      <w:name w:val="No List"/>
      <w:uiPriority w:val="99"/>
      <w:semiHidden/>
      <w:unhideWhenUsed/>
    </w:style>

    <w:style w:type="paragraph" w:customStyle="1" w:styleId="Foobar">
      <w:name w:val="Foobar"/>
      <w:basedOn w:val="Normal"/>
      <w:qFormat/>
    </w:style>

  </w:styles>
```

----------------------------------------

TITLE: Defining CT_Style and CT_String Complex Types - XSD
DESCRIPTION: Defines two XML Schema complex types: CT_Style, which includes elements for table cell properties and style properties, and attributes for style type, ID, default status, and custom status; and CT_String, which defines a simple type with a required 'val' attribute for string values.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/paragraph-style.rst#_snippet_3

LANGUAGE: XSD
CODE:
```
      <xsd:element name="tcPr"            type="CT_TcPr"          minOccurs="0"/>
      <xsd:element name="tblStylePr"      type="CT_TblStylePr"    minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="type"        type="ST_StyleType"/>
    <xsd:attribute name="styleId"     type="s:ST_String"/>
    <xsd:attribute name="default"     type="s:ST_OnOff"/>
    <xsd:attribute name="customStyle" type="s:ST_OnOff"/>
  </xsd:complexType>

  <xsd:complexType name="CT_String">
    <xsd:attribute name="val" type="s:ST_String" use="required"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Define documentProtection Element in XSD
DESCRIPTION: Defines the 'documentProtection' element in an XML Schema. This element is of type 'CT_DocProtect' and is optional ('minOccurs="0"'). It contains settings for document protection.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_25

LANGUAGE: XSD
CODE:
```
<xsd:element name="documentProtection" type="CT_DocProtect" minOccurs="0"/>
```

----------------------------------------

TITLE: Defining Simple Type ST_UniversalMeasure in XML
DESCRIPTION: Defines a simple type for a universal measurement value represented as a string, allowing an optional sign, digits, an optional decimal part, followed by a specific unit suffix (mm, cm, in, pt, pc, pi).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-cell.rst#_snippet_10

LANGUAGE: XML
CODE:
```
<xsd:simpleType name="ST_UniversalMeasure">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="-?[0-9]+(\.[0-9]+)?(mm|cm|in|pt|pc|pi)"/>
    </xsd:restriction>
  </xsd:simpleType>
```

----------------------------------------

TITLE: WordprocessingML Alternate Quick Style True (XML)
DESCRIPTION: Shows an alternate WordprocessingML XML structure where `w:qFormat` has a `w:val="1"`. `python-docx` should interpret this as `True` but will not write XML in this specific format.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/styles/style.rst#_snippet_15

LANGUAGE: xml
CODE:
```
<w:style w:type="paragraph" w:styleId="Foo">
  <w:name w:val="Foo"/>
  <w:qFormat w:val="1"/>  <!-- style.quick_style is True -->
</w:style>
```

----------------------------------------

TITLE: Defining CT_HdrFtrRef Complex Type in XML Schema
DESCRIPTION: Defines the CT_HdrFtrRef complex type, used to reference a header or footer part in a document. It requires a relationship ID ('r:id') to link to the header/footer part and a 'type' attribute specifying the kind of header/footer.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/header.rst#_snippet_18

LANGUAGE: XML
CODE:
```
<xsd:complexType name="CT_HdrFtrRef">
      <xsd:attribute ref="r:id" use="required"/>
      <xsd:attribute name="type" type="ST_HdrFtr" use="required"/>
    </xsd:complexType>
```

----------------------------------------

TITLE: Defining Table Property Elements in XSD
DESCRIPTION: Defines optional elements for table properties within a sequence, including caption, description, and change tracking information.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-props.rst#_snippet_5

LANGUAGE: XSD
CODE:
```
      <xsd:element name="tblCaption"          type="CT_String"        minOccurs="0"/>
      <xsd:element name="tblDescription"      type="CT_String"        minOccurs="0"/>
      <xsd:element name="tblPrChange"         type="CT_TblPrChange"   minOccurs="0"/>
    </xsd:sequence>
```

----------------------------------------

TITLE: Defining EG_Geometry in XML Schema
DESCRIPTION: Defines an element group representing geometry properties. It allows a choice between custom geometry (CT_CustomGeometry2D) and preset geometry (CT_PresetGeometry2D).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/shapes/picture.rst#_snippet_15

LANGUAGE: XML Schema
CODE:
```
<xsd:group name="EG_Geometry">
    <xsd:choice>
      <xsd:element name="custGeom" type="CT_CustomGeometry2D"/>
      <xsd:element name="prstGeom" type="CT_PresetGeometry2D"/>
    </xsd:choice>
  </xsd:group>
```

----------------------------------------

TITLE: Defining CT_VMerge Complex Type in XSD
DESCRIPTION: Defines a complex type (CT_VMerge) used to specify vertical merging properties for a table cell. It contains an optional attribute val of type ST_Merge.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/cell-merge.rst#_snippet_12

LANGUAGE: XSD
CODE:
```
<xsd:complexType name="CT_VMerge">
    <xsd:attribute name="val" type="ST_Merge"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Defining Attributes for Bookmark-like Element in XML Schema
DESCRIPTION: Defines a complex type containing attributes for document location, history tracking, anchor, and a relationship ID. This type is likely used for elements like bookmarks or tracked changes.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/text/hyperlink.rst#_snippet_23

LANGUAGE: XML Schema
CODE:
```
<xsd:attribute name="docLocation" type="s:ST_String"/>
    <xsd:attribute name="history"     type="s:ST_OnOff"/>
    <xsd:attribute name="anchor"      type="s:ST_String"/>
    <xsd:attribute ref="r:id"/>
  </xsd:complexType>
```

----------------------------------------

TITLE: Define bordersDoNotSurroundFooter Element in XSD
DESCRIPTION: Defines the 'bordersDoNotSurroundFooter' element in an XML Schema. This element is of type 'CT_OnOff', indicating a boolean setting, and is optional ('minOccurs="0"'). It controls whether borders surround the footer.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_8

LANGUAGE: XSD
CODE:
```
<xsd:element name="bordersDoNotSurroundFooter" type="CT_OnOff" minOccurs="0"/>
```

----------------------------------------

TITLE: Define consecutiveHyphenLimit Element in XSD
DESCRIPTION: Defines the 'consecutiveHyphenLimit' element in an XML Schema. This element is of type 'CT_DecimalNumber' and is optional ('minOccurs="0"'). It specifies the maximum number of consecutive lines that can end with a hyphen.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_31

LANGUAGE: XSD
CODE:
```
<xsd:element name="consecutiveHyphenLimit" type="CT_DecimalNumber" minOccurs="0"/>
```

----------------------------------------

TITLE: Define 'listSeparator' Element
DESCRIPTION: Defines the 'listSeparator' element, specifying the character used as the list separator. It uses the CT_String type and is optional.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_87

LANGUAGE: XML
CODE:
```
<xsd:element name="listSeparator"              type="CT_String"          minOccurs="0"/>
```

----------------------------------------

TITLE: Define displayHorizontalDrawingGridEvery Element in XSD
DESCRIPTION: Defines the 'displayHorizontalDrawingGridEvery' element in an XML Schema. This element is of type 'CT_DecimalNumber' and is optional ('minOccurs="0"'). It specifies the frequency of horizontal grid lines displayed.
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/settings.rst#_snippet_44

LANGUAGE: XSD
CODE:
```
<xsd:element name="displayHorizontalDrawingGridEvery" type="CT_DecimalNumber" minOccurs="0"/>
```

----------------------------------------

TITLE: Defining Table Width Types in XSD
DESCRIPTION: Defines the complex type CT_TblWidth and several simple types used to specify table width in various units (measurements, percentages) and types (nil, pct, dxa, auto).
SOURCE: https://github.com/python-openxml/python-docx/blob/master/docs/dev/analysis/features/table/table-props.rst#_snippet_7

LANGUAGE: XSD
CODE:
```
  <xsd:complexType name="CT_TblWidth">
    <xsd:attribute name="w"    type="ST_MeasurementOrPercent"/>
    <xsd:attribute name="type" type="ST_TblWidth"/>
  </xsd:complexType>

  <xsd:simpleType name="ST_MeasurementOrPercent">
    <xsd:union memberTypes="ST_DecimalNumberOrPercent s:ST_UniversalMeasure"/>
  </xsd:simpleType>

  <xsd:simpleType name="ST_DecimalNumberOrPercent">
    <xsd:union memberTypes="ST_UnqualifiedPercentage s:ST_Percentage"/>
  </xsd:simpleType>

  <xsd:simpleType name="ST_UniversalMeasure">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="-?[0-9]+(\.[0-9]+)?(mm|cm|in|pt|pc|pi)"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ST_UnqualifiedPercentage">
    <xsd:restriction base="xsd:integer"/>
  </xsd:simpleType>

  <xsd:simpleType name="ST_Percentage">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="-?[0-9]+(\.[0-9]+)?%"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="ST_TblWidth">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="nil"/>
      <xsd:enumeration value="pct"/>
      <xsd:enumeration value="dxa"/>
      <xsd:enumeration value="auto"/>
    </xsd:restriction>
  </xsd:simpleType>
```