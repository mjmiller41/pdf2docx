TITLE: Security Fix for ImageShow.WindowsViewer.show_file
DESCRIPTION: Addresses a security vulnerability in `ImageShow.WindowsViewer.show_file()` where an attacker could execute arbitrary shell commands by controlling the `path` parameter. A `FileNotFoundError` is now raised if the path does not exist, preventing command execution.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.4.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Method: ImageShow.WindowsViewer.show_file(path: str)
Description: Displays an image file.
Security Fix:
  - Raises FileNotFoundError if 'path' does not exist as a file.
  - Prevents arbitrary shell command execution via 'path' parameter.
Applicability: Error handling extended to all PIL.ImageShow viewers.
```

----------------------------------------

TITLE: Resize Images with PIL.ImageOps and thumbnail in Python
DESCRIPTION: This snippet demonstrates various methods for resizing images in Pillow relative to a given size. It showcases `ImageOps.contain`, `ImageOps.cover`, `ImageOps.fit`, `ImageOps.pad` for creating new images, and `Image.thumbnail` which modifies the image in place. The examples save the results to different webp files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_18

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageOps
size = (100, 150)
with Image.open("hopper.webp") as im:
    ImageOps.contain(im, size).save("imageops_contain.webp")
    ImageOps.cover(im, size).save("imageops_cover.webp")
    ImageOps.fit(im, size).save("imageops_fit.webp")
    ImageOps.pad(im, size, color="#f00").save("imageops_pad.webp")

    # thumbnail() can also be used,
    # but will modify the image object in place
    im.thumbnail(size)
    im.save("image_thumbnail.webp")
```

----------------------------------------

TITLE: Apply various image resizing and padding operations using PIL.ImageOps
DESCRIPTION: This Python snippet demonstrates how to use `ImageOps.contain`, `ImageOps.cover`, `ImageOps.fit`, and `ImageOps.pad` to resize and manipulate images relative to a given size. It also shows `Image.thumbnail` for in-place modification. The operations are applied to a WEBP image and saved to different files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageOps.rst#_snippet_0

LANGUAGE: python
CODE:
```
from PIL import Image, ImageOps
size = (100, 150)
with Image.open("Tests/images/hopper.webp") as im:
    ImageOps.contain(im, size).save("imageops_contain.webp")
    ImageOps.cover(im, size).save("imageops_cover.webp")
    ImageOps.fit(im, size).save("imageops_fit.webp")
    ImageOps.pad(im, size, color="#f00").save("imageops_pad.webp")

    # thumbnail() can also be used,
    # but will modify the image object in place
    im.thumbnail(size)
    im.save("image_thumbnail.webp")
```

----------------------------------------

TITLE: Add `textbbox` and `getbbox` for text bounding box in Pillow 8.0.0
DESCRIPTION: Pillow 8.0.0 adds `ImageDraw.textbbox`, `ImageDraw.multiline_textbbox`, and `FreeTypeFont.getbbox` methods. These functions return the bounding box of rendered text and support an `anchor` parameter for precise positioning.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_12

LANGUAGE: APIDOC
CODE:
```
ImageDraw.textbbox method:
  Description: Returns the bounding box of rendered text.
  Parameter: anchor (optional) - see text-anchors for details.
ImageDraw.multiline_textbbox method:
  Description: Returns the bounding box of rendered multiline text.
  Parameter: anchor (optional) - see text-anchors for details.
FreeTypeFont.getbbox method:
  Description: Returns the bounding box of rendered text.
  Parameter: anchor (optional) - see text-anchors for details.
```

----------------------------------------

TITLE: Security Risks and Deprecation of ImageMath.eval() in Pillow
DESCRIPTION: Highlights the security risks associated with `ImageMath.eval()` due to its use of Python's `eval()` function. It also announces its deprecation, recommending `PIL.ImageMath.lambda_eval` as a more secure alternative and `PIL.ImageMath.unsafe_eval` as a direct but equally risky replacement.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.3.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.ImageMath.eval():
  Status: Deprecated, Security Risk
  Risk: Uses Python's eval() function, susceptible to arbitrary code execution.
  Recommended Alternatives:
    - PIL.ImageMath.lambda_eval (more secure)
    - PIL.ImageMath.unsafe_eval (direct replacement, same risks)
```

----------------------------------------

TITLE: Basic Image Opening from File Path (Pillow)
DESCRIPTION: Demonstrates the fundamental way to open an image file using `PIL.Image.open` by providing a file path. The operation returns a `PIL.Image.Image` object upon success or raises an `OSError` if the file cannot be opened or identified.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_30

LANGUAGE: Python
CODE:
```
from PIL import Image
with Image.open("hopper.ppm") as im:
    ...
```

----------------------------------------

TITLE: Pillow Image File Handling: Context Manager vs. Implicit Close
DESCRIPTION: Explains the removal of implicit file closing in `Image.__del__` for Pillow images. It emphasizes the importance of using a context manager (`with ... as`) or explicitly calling `Image.close()` for deterministic file handling, providing a comparison between the old and recommended new approach.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.0.0.rst#_snippet_6

LANGUAGE: Python
CODE:
```
im = Image.open("hopper.png")
im.save("out.jpg")
```

LANGUAGE: Python
CODE:
```
with Image.open("hopper.png") as im:
    im.save("out.jpg")
```

----------------------------------------

TITLE: Batch Image Processing with Pathlib (Pillow)
DESCRIPTION: Presents an alternative approach to batch image processing using Python's `pathlib` module. This method offers a more object-oriented way to handle file paths compared to the `glob` module, enhancing readability and maintainability.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_36

LANGUAGE: Python
CODE:
```
from pathlib import Path

paths = Path(".").glob("*.png")
for path in paths:
    compress_image(path, path.stem + ".jpg")
```

----------------------------------------

TITLE: Crop Image Region with Pillow
DESCRIPTION: This snippet demonstrates how to crop a rectangular region from an image using Pillow's `crop()` method. The region is defined by a 4-tuple (left, upper, right, lower) coordinates. Pillow uses a coordinate system with (0,0) at the upper-left corner, and coordinates refer to positions between pixels.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_5

LANGUAGE: Python
CODE:
```
box = (0, 0, 64, 64)
region = im.crop(box)
```

----------------------------------------

TITLE: Draw Multi-line Text with ImageDraw
DESCRIPTION: Documents the `ImageDraw.multiline_text` method, which draws a string at a specified position, supporting various styling options like fill color, font, alignment, text direction, OpenType features, language-specific glyphs, stroke width, and embedded color glyphs.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_23

LANGUAGE: APIDOC
CODE:
```
ImageDraw.multiline_text(xy, text, fill=None, font=None, anchor=None, spacing=4, align="left", direction=None, features=None, language=None, stroke_width=0, stroke_fill=None, embedded_color=False, font_size=None)
  xy: The anchor coordinates of the text.
  text: String to be drawn.
  fill: Color to use for the text.
  font: An PIL.ImageFont.ImageFont instance.
  anchor: The text anchor alignment. Determines the relative location of the anchor to the text. The default alignment is top left, specifically `la` for horizontal text and `lt` for vertical text. See text-anchors for details. This parameter is ignored for non-TrueType fonts.
  spacing: The number of pixels between lines.
  align: "left", "center", "right" or "justify". Determines the relative alignment of lines. Use the `anchor` parameter to specify the alignment to `xy`.
  direction: Direction of the text. It can be "rtl" (right to left), "ltr" (left to right) or "ttb" (top to bottom). Requires libraqm.
  features: A list of OpenType font features to be used during text layout. This is usually used to turn on optional font features that are not enabled by default, for example "dlig" or "ss01", but can be also used to turn off default font features, for example "-liga" to disable ligatures or "-kern" to disable kerning. To get all supported features, see OpenType docs. Requires libraqm.
  language: Language of the text. Different languages may use different glyph shapes or ligatures. This parameter tells the font which language the text is in, and to apply the correct substitutions as appropriate, if available. It should be a BCP 47 language code. Requires libraqm.
  stroke_width: The width of the text stroke.
  stroke_fill: Color to use for the text stroke. If not given, will default to the `fill` parameter.
  embedded_color: Whether to use font embedded color glyphs (COLR, CBDT, SBIX).
  font_size: If `font` is not provided, then the size to use for the default font. Keyword-only argument.
```

----------------------------------------

TITLE: Reading and Writing Image Pixels using Pillow's PixelAccess
DESCRIPTION: This Python example demonstrates how to obtain a `PixelAccess` object from a Pillow `Image` using `im.load()`. It then shows how to read the color of a specific pixel using `px[x, y]` and modify it by assigning a new color tuple. The example also illustrates the use of negative indices for pixel access.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/PixelAccess.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import Image

with Image.open("hopper.jpg") as im:
    px = im.load()
print(px[4, 4])
px[4, 4] = (0, 0, 0)
print(px[4, 4])

px[-1, -1] = (0, 0, 0)
print(px[-1, -1])
```

----------------------------------------

TITLE: Create image thumbnails with Pillow
DESCRIPTION: This script creates nice thumbnails of all JPEG images in the current directory, preserving aspect ratios with a 128x128 maximum resolution.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_1

LANGUAGE: python
CODE:
```
from PIL import Image
import glob, os

size = 128, 128

for infile in glob.glob("*.jpg"):
    file, ext = os.path.splitext(infile)
    with Image.open(infile) as im:
        im.thumbnail(size)
        im.save(file + ".thumbnail", "JPEG")
```

----------------------------------------

TITLE: Migrating Pillow Text Size Calculation Methods
DESCRIPTION: This snippet demonstrates the migration from older Pillow text size calculation methods (`font.getsize`, `font.getoffset`, `draw.textsize`, `draw.multiline_textsize`) to the newer, more precise bounding box methods (`font.getbbox`, `draw.textlength`, `draw.multiline_textbbox`). The new methods provide distinct `top` offsets, allowing for more accurate text positioning.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_28

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
width, height = font.getsize("Hello world")
left, top = font.getoffset("Hello world")

im = Image.new("RGB", (100, 100))
draw = ImageDraw.Draw(im)
width, height = draw.textsize("Hello world", font)

width, height = font.getsize_multiline("Hello\nworld")
width, height = draw.multiline_textsize("Hello\nworld", font)
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
left, top, right, bottom = font.getbbox("Hello world")
width, height = right - left, bottom - top

im = Image.new("RGB", (100, 100))
draw = ImageDraw.Draw(im)
width = draw.textlength("Hello world", font)

left, top, right, bottom = draw.multiline_textbbox((0, 0), "Hello\nworld", font)
width, height = right - left, bottom - top
```

----------------------------------------

TITLE: Simplifying Pillow Text Alignment with Anchors
DESCRIPTION: This example illustrates how to simplify text alignment in Pillow by using the `anchor` parameter with `draw.text`. Previously, manual calculation of text size and position was required. The `anchor` parameter (e.g., 'mm' for middle-middle) automatically aligns text relative to the given coordinates, improving robustness for various fonts and languages.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_29

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")

im = Image.new("RGB", (100, 100))
draw = ImageDraw.Draw(im)
width, height = draw.textsize("Hello world", font)
x, y = (100 - width) / 2, (100 - height) / 2
draw.text((x, y), "Hello world", font=font)
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")

im = Image.new("RGB", (100, 100))
draw = ImageDraw.Draw(im)
draw.text((100 / 2, 100 / 2), "Hello world", font=font, anchor="mm")
```

----------------------------------------

TITLE: Pillow Image Modes and `mode` Attribute
DESCRIPTION: Details various image modes supported by Pillow, defining the type and depth of a pixel (e.g., 1-bit, 8-bit, 32-bit float). It also describes the `PIL.Image.Image.mode` attribute for reading an image's current mode.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.mode
  Type: string
  Description: Defines the type and depth of a pixel in the image.
  Standard Modes:
    - '1': 1-bit pixels, black and white.
    - 'L': 8-bit pixels, grayscale.
    - 'P': 8-bit pixels, mapped to a color palette.
    - 'RGB': 3x8-bit pixels, true color.
    - 'RGBA': 4x8-bit pixels, true color with transparency mask.
    - 'CMYK': 4x8-bit pixels, color separation.
    - 'YCbCr': 3x8-bit pixels, color video format (JPEG standard).
    - 'LAB': 3x8-bit pixels, L*a*b color space.
    - 'HSV': 3x8-bit pixels, Hue, Saturation, Value color space.
    - 'I': 32-bit signed integer pixels.
    - 'F': 32-bit floating point pixels.
  Additional Modes (Limited Support):
    - 'LA': L with alpha.
    - 'PA': P with alpha.
    - 'RGBX': True color with padding.
    - 'RGBa': True color with premultiplied alpha.
    - 'La': L with premultiplied alpha.
    - 'I;16': 16-bit unsigned integer pixels.
    - 'I;16L': 16-bit little endian unsigned integer pixels.
    - 'I;16B': 16-bit big endian unsigned integer pixels.
    - 'I;16N': 16-bit native endian unsigned integer pixels.
```

----------------------------------------

TITLE: Resize and Rotate Image with Pillow
DESCRIPTION: This example shows basic geometric transformations using Pillow. It demonstrates resizing an image to a new size (128x128) using `resize()` and rotating an image by a specified angle (45 degrees counter-clockwise) using `rotate()`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_10

LANGUAGE: Python
CODE:
```
out = im.resize((128, 128))
out = im.rotate(45) # degrees counter-clockwise
```

----------------------------------------

TITLE: PIL.Image.Image Class Methods
DESCRIPTION: Overview of various methods available for the PIL.Image.Image class, providing core image manipulation functionalities.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.draft
PIL.Image.Image.effect_spread
PIL.Image.Image.entropy
PIL.Image.Image.filter
PIL.Image.Image.frombytes
PIL.Image.Image.getbands
PIL.Image.Image.getbbox
PIL.Image.Image.getchannel
PIL.Image.Image.getcolors
PIL.Image.Image.getdata
PIL.Image.Image.getexif
PIL.Image.Image.getextrema
PIL.Image.Image.getpalette
PIL.Image.Image.getpixel
PIL.Image.Image.getprojection
PIL.Image.Image.getxmp
PIL.Image.Image.histogram
PIL.Image.Image.paste
PIL.Image.Image.point
PIL.Image.Image.putalpha
PIL.Image.Image.putdata
PIL.Image.Image.putpalette
PIL.Image.Image.putpixel
PIL.Image.Image.quantize
PIL.Image.Image.reduce
PIL.Image.Image.remap_palette
PIL.Image.Image.resize
PIL.Image.Image.rotate
PIL.Image.Image.save
PIL.Image.Image.seek
PIL.Image.Image.show
PIL.Image.Image.split
PIL.Image.Image.tell
PIL.Image.Image.thumbnail
PIL.Image.Image.tobitmap
PIL.Image.Image.tobytes
PIL.Image.Image.transform
PIL.Image.Image.transpose
PIL.Image.Image.verify
PIL.Image.Image.load
PIL.Image.Image.close
```

----------------------------------------

TITLE: Split and Merge Image Bands with Pillow
DESCRIPTION: This snippet demonstrates how to split an RGB image into its individual color bands (Red, Green, Blue) using `split()` and then merge them back into a new image with the bands reordered (e.g., swapping Red and Blue) using `Image.merge()`. This allows for manipulation of individual color channels.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_9

LANGUAGE: Python
CODE:
```
r, g, b = im.split()
im = Image.merge("RGB", (b, g, r))
```

----------------------------------------

TITLE: Identify image file properties using PIL
DESCRIPTION: A Python script to quickly identify and print the format, size, and mode of image files provided as command-line arguments. It uses `PIL.Image.open()` and handles `OSError` to skip unreadable files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_4

LANGUAGE: Python
CODE:
```
import sys
from PIL import Image

for infile in sys.argv[1:]:
    try:
        with Image.open(infile) as im:
            print(infile, im.format, f"{im.size}x{im.mode}")
    except OSError:
        pass
```

----------------------------------------

TITLE: Install Pillow and Upgrade pip (Cross-Platform)
DESCRIPTION: Standard instructions to install Pillow using pip, ensuring pip is upgraded first. This method applies to Linux, macOS, and Windows, providing support for most common image formats.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/basic-installation.rst#_snippet_0

LANGUAGE: Python
CODE:
```
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade Pillow
```

----------------------------------------

TITLE: Convert Image Modes with PIL.Image.Image.convert in Python
DESCRIPTION: This snippet demonstrates how to convert an image to a different pixel representation using Pillow's `Image.convert` method. It shows converting an opened image to grayscale ('L' mode). The library supports direct conversions between supported modes and 'L' or 'RGB' modes.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_20

LANGUAGE: Python
CODE:
```
from PIL import Image

with Image.open("hopper.ppm") as im:
    im = im.convert("L")
```

----------------------------------------

TITLE: Load and examine image file properties with PIL
DESCRIPTION: Demonstrates how to open an image file using `PIL.Image.open()` and then access its format, size, and mode attributes. An `OSError` is raised if the file cannot be opened.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import Image
im = Image.open("hopper.ppm")
print(im.format, im.size, im.mode)
```

----------------------------------------

TITLE: Using Pillow's Context Manager for Image File Handling
DESCRIPTION: This example shows how to use Pillow's context manager (with Image.open(...)) to ensure proper file closure. After exiting the with block, the file pointer (img.fp) is asserted to be None, indicating the file has been closed, while the image object itself remains usable for operations like saving.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/open_files.rst#_snippet_2

LANGUAGE: Python
CODE:
```
with Image.open("test.jpg") as img:
    img.load()
assert img.fp is None
img.save("test.png")
```

----------------------------------------

TITLE: Using ImageFont to Load and Draw Text
DESCRIPTION: This example demonstrates how to load both bitmap and TrueType fonts using `ImageFont.load` and `ImageFont.truetype` respectively, and then draw text onto an image using `ImageDraw.Draw.text`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageFont.rst#_snippet_0

LANGUAGE: python
CODE:
```
from PIL import ImageFont, ImageDraw

draw = ImageDraw.Draw(image)

# use a bitmap font
font = ImageFont.load("arial.pil")

draw.text((10, 10), "hello", font=font)

# use a truetype font
font = ImageFont.truetype("arial.ttf", 15)

draw.text((10, 25), "world", font=font)
```

----------------------------------------

TITLE: Opening Image from an Open File Object (Pillow)
DESCRIPTION: Illustrates how to open an image from an already opened file-like object. This object must be in binary mode and implement `file.read`, `file.seek`, and `file.tell` methods for Pillow to process it correctly.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_31

LANGUAGE: Python
CODE:
```
from PIL import Image

with open("hopper.ppm", "rb") as fp:
    im = Image.open(fp)
```

----------------------------------------

TITLE: Pillow Image Class (PIL.Image.Image) Core Methods
DESCRIPTION: API reference for essential image manipulation methods of the `PIL.Image.Image` class, including cropping, pasting, resizing, rotating, transposing, splitting bands, and general transformations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_16

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image Class Methods:
  crop(box: tuple) -> Image.Image
    box: A 4-tuple (left, upper, right, lower) defining the region.
    Returns: A new image containing the cropped region.
  paste(im: Image.Image, box=None, mask=None)
    im: The image to paste.
    box: An optional 4-tuple (left, upper, right, lower) or 2-tuple (x, y) defining the target region.
    mask: An optional transparency mask.
  transpose(method: Image.Transpose) -> Image.Image
    method: One of Image.Transpose.FLIP_LEFT_RIGHT, FLIP_TOP_BOTTOM, ROTATE_90, ROTATE_180, ROTATE_270.
    Returns: A new image with the given transpose operation applied.
  split() -> tuple[Image.Image, ...]
    Returns: A tuple of single-band images, one for each band in the original image. For single-band images, returns the image itself.
  resize(size: tuple, resample=0, box=None, reducing_gap=None) -> Image.Image
    size: A 2-tuple (width, height) giving the new size.
    Returns: A new image with the given size.
  rotate(angle: float, resample=0, expand=0, center=None, translate=None, fillcolor=None) -> Image.Image
    angle: In degrees counter-clockwise degrees.
    expand: Optional boolean, if true, expands the output image to make it large enough to hold the entire rotated image.
    Returns: A new image rotated by the given angle.
  transform(size: tuple, method, data=None, resample=0, fillcolor=None) -> Image.Image
    size: The size of the output image.
    method: The transformation method.
    data: Optional data for the transformation.
    Returns: A new image with the given transformation applied.
```

----------------------------------------

TITLE: Draw Partial Opacity Text on an Image with PIL.ImageDraw
DESCRIPTION: Illustrates how to overlay text with varying opacity onto an existing image. It involves creating a transparent text layer, loading a TrueType font, drawing text with different alpha values, and then compositing the text layer onto the base image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

# get an image
with Image.open("Pillow/Tests/images/hopper.png").convert("RGBA") as base:

    # make a blank image for the text, initialized to transparent text color
    txt = Image.new("RGBA", base.size, (255, 255, 255, 0))

    # get a font
    fnt = ImageFont.truetype("Pillow/Tests/fonts/FreeMono.ttf", 40)
    # get a drawing context
    d = ImageDraw.Draw(txt)

    # draw text, half opacity
    d.text((10, 10), "Hello", font=fnt, fill=(255, 255, 255, 128))
    # draw text, full opacity
    d.text((10, 60), "World", font=fnt, fill=(255, 255, 255, 255))

    out = Image.alpha_composite(base, txt)

    out.show()
```

----------------------------------------

TITLE: Rotate Image with PIL
DESCRIPTION: This example shows how to rotate an image using Pillow's `rotate()` method. It rotates the input image by a specified angle (in degrees) counter-clockwise.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_10

LANGUAGE: Python
CODE:
```
from PIL import Image

with Image.open("hopper.jpg") as im:

    # Rotate the image by 60 degrees counter clockwise
    theta = 60
    # Angle is in degrees counter clockwise
    im_rotated = im.rotate(angle=theta)
```

----------------------------------------

TITLE: PIL.ImageDraw.Draw Method
DESCRIPTION: Creates an object that can be used to draw in the given image. Note that the image will be modified in place.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Draw(im, mode=None)
  im: The image to draw in.
  mode: Optional mode to use for color values. For RGB images, this argument can be RGB or RGBA (to blend the drawing into the image). For all other modes, this argument must be the same as the image mode. If omitted, the mode defaults to the mode of the image.
```

----------------------------------------

TITLE: New 'reducing_gap' Argument for Image.resize() and Image.thumbnail() in Pillow 7.0.0
DESCRIPTION: A new `reducing_gap` argument has been added to the `PIL.Image.Image.resize` and `PIL.Image.Image.thumbnail` methods. This parameter optimizes resizing by performing it in two steps. A larger `reducing_gap` value results in a quality closer to fair resampling, while a smaller value provides faster resizing. For `resize`, the default is `None` (optimization off), and for `thumbnail`, it's `2.0`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.0.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.resize(size: tuple[int, int], resample=None, box=None, reducing_gap: float | None = None)
  Parameters:
    reducing_gap: float | None
      Optional. Speeds up resizing by resizing the image in two steps.
      The bigger the value, the closer the result to fair resampling.
      The smaller the value, the faster resizing.
      Default: None (optimization turned off).

PIL.Image.Image.thumbnail(size: tuple[int, int], resample=Image.BICUBIC, reducing_gap: float = 2.0)
  Parameters:
    reducing_gap: float
      Optional. Speeds up resizing by resizing the image in two steps.
      Default: 2.0. This value is also applied when `Image.draft` is called internally,
      potentially improving JPEG thumbnail quality.
```

----------------------------------------

TITLE: Pillow Image.save Method JPEG Specific Options
DESCRIPTION: Documents keyword arguments specific to saving JPEG files using the `PIL.Image.Image.save` method. These options control JPEG compression quality, progressive encoding, DPI, and color space handling.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_21

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save method options (for JPEG):

quality:
  Type: int or str
  Description: The image quality, on a scale from 0 (worst) to 95 (best), or the string "keep". Default is 75. Values above 95 should be avoided; 100 disables portions of the JPEG compression algorithm, and results in large files with hardly any gain in image quality. The value "keep" is only valid for JPEG files and will retain the original image quality level, subsampling, and qtables.

optimize:
  Type: bool
  Description: If present and true, indicates that the encoder should make an extra pass over the image in order to select optimal encoder settings.

progressive:
  Type: bool
  Description: If present and true, indicates that this image should be stored as a progressive JPEG file.

dpi:
  Type: tuple (int, int)
  Description: A tuple of integers representing the pixel density, (x,y).

icc_profile:
  Type: bytes
  Description: If present and true, the image is stored with the provided ICC profile. If this parameter is not provided, the image will be saved with no profile attached.

exif:
  Type: bytes
  Description: If present, the image will be stored with the provided raw EXIF data.

keep_rgb:
  Type: bool
  Description: By default, libjpeg converts images with an RGB color space to YCbCr. If this option is present and true, those images will be stored as RGB instead. When this option is enabled, attempting to chroma-subsample RGB images with the subsampling option will raise an OSError.
  Version Added: 10.2.0

subsampling:
  Type: str or int
  Description: If present, sets the subsampling for the encoder.
    "keep": Only valid for JPEG files, will retain the original image setting.
    "4:4:4", "4:2:2", "4:2:0": Specific sampling values
    0: equivalent to "4:4:4"
    1: equivalent to "4:2:2"
    2: equivalent to "4:2:0"
  If absent, the setting will be determined by libjpeg or libjpeg-turbo.

restart_marker_blocks:
  Type: int
  Description: If present, emit a restart marker whenever the specified number of MCU blocks has been produced.
  Version Added: 10.2.0

restart_marker_rows:
  Type: N/A
  Description: (Description not provided in source)
```

----------------------------------------

TITLE: Opening Image Files in Pillow using Various File Types
DESCRIPTION: This snippet illustrates four equivalent methods for opening an image file ('test.jpg') using Pillow's Image.open() function. It covers direct filename, pathlib.Path objects, raw binary file objects, and io.BytesIO objects, showing how Pillow can handle different input types for image loading.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/open_files.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import Image
import io
import pathlib

with Image.open("test.jpg") as im:
    ...

with Image.open(pathlib.Path("test.jpg")) as im2:
    ...

with open("test.jpg", "rb") as f:
    im3 = Image.open(f)
    ...

with open("test.jpg", "rb") as f:
    im4 = Image.open(io.BytesIO(f.read()))
    ...
```

----------------------------------------

TITLE: Flip Image Horizontally with Pillow
DESCRIPTION: This snippet demonstrates flipping an image horizontally (left to right) using the `transpose()` method with `Image.Transpose.FLIP_LEFT_RIGHT`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_11

LANGUAGE: Python
CODE:
```
out = im.transpose(Image.Transpose.FLIP_LEFT_RIGHT)
```

----------------------------------------

TITLE: Create JPEG thumbnails with PIL
DESCRIPTION: Illustrates how to generate thumbnails for image files using PIL. The script processes command-line arguments, resizes images to a specified size using `im.thumbnail()`, and saves them as JPEG files with a '.thumbnail' extension. Includes error handling for conversion failures.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_3

LANGUAGE: Python
CODE:
```
import os, sys
from PIL import Image

size = (128, 128)

for infile in sys.argv[1:]:
    outfile = os.path.splitext(infile)[0] + ".thumbnail"
    if infile != outfile:
        try:
            with Image.open(infile) as im:
                im.thumbnail(size)
                im.save(outfile, "JPEG")
        except OSError:
            print("cannot create thumbnail for", infile)
```

----------------------------------------

TITLE: Process Individual Image Bands Selectively in Pillow
DESCRIPTION: This snippet shows how to selectively modify an image by combining `Image.point` and `Image.paste` methods. It splits an image into its R, G, B bands, creates a mask based on the red band's pixel values, processes the green band, and then pastes the processed green band back into the original image using the generated mask, affecting only specific regions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_23

LANGUAGE: Python
CODE:
```
# split the image into individual bands
source = im.split()

R, G, B = 0, 1, 2

# select regions where red is less than 100
mask = source[R].point(lambda i: i < 100 and 255)

# process the green band
out = source[G].point(lambda i: i * 0.7)

# paste the processed band back, but only where red was < 100
source[G].paste(out, None, mask)
```

----------------------------------------

TITLE: Pillow Image Function: convert
DESCRIPTION: Converts an image to a specified mode. The mode must be a string constant.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Function: convert(image, mode)
Description: Convert image to the given mode. The mode must be given as a string constant.
Parameters:
  image: The input image.
  mode: The target mode as a string constant.
Returns: The converted image.
```

----------------------------------------

TITLE: Apply Point Operations with Lambda Function in Pillow
DESCRIPTION: This snippet demonstrates using the `Image.point` method to apply a point operation to an image, translating its pixel values. It passes a lambda function that multiplies each pixel's value by 20, effectively manipulating image contrast. This technique allows for quick application of simple expressions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_22

LANGUAGE: Python
CODE:
```
# multiply each pixel by 20
out = im.point(lambda i: i * 20)
```

----------------------------------------

TITLE: Merge Two Images into a Wider Image with Pillow
DESCRIPTION: This Python function `merge` combines two images side-by-side into a single wider image. It creates a new RGBA image with a width equal to the sum of the input image widths and a height equal to the maximum height of the input images. It then pastes the two images into the new canvas.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_8

LANGUAGE: Python
CODE:
```
def merge(im1: Image.Image, im2: Image.Image) -> Image.Image:
    w = im1.size[0] + im2.size[0]
    h = max(im1.size[1], im2.size[1])
    im = Image.new("RGBA", (w, h))

    im.paste(im1)
    im.paste(im2, (im1.size[0], 0))

    return im
```

----------------------------------------

TITLE: Open, rotate, and display an image with Pillow
DESCRIPTION: This script loads an image, rotates it 45 degrees, and displays it using an external viewer (usually xv on Unix, and the Paint program on Windows).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_0

LANGUAGE: python
CODE:
```
from PIL import Image
with Image.open("hopper.jpg") as im:
    im.rotate(45).show()
```

----------------------------------------

TITLE: Draw a Gray Cross Over an Image using PIL.ImageDraw
DESCRIPTION: Demonstrates how to open an image, create a drawing context, and draw two diagonal lines (a cross) with a gray fill color. The modified image is then saved to standard output as a PNG.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import sys
from PIL import Image, ImageDraw

with Image.open("hopper.jpg") as im:

    draw = ImageDraw.Draw(im)
    draw.line((0, 0) + im.size, fill=128)
    draw.line((0, im.size[1], im.size[0], 0), fill=128)

    # write to stdout
    im.save(sys.stdout, "PNG")
```

----------------------------------------

TITLE: Iterating Through Image Sequence Frames with Pillow
DESCRIPTION: Shows a more Pythonic way to loop through frames in an image sequence using the `PIL.ImageSequence.Iterator` class. This simplifies frame access compared to manual `seek`/`tell` operations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_28

LANGUAGE: python
CODE:
```
from PIL import ImageSequence
for frame in ImageSequence.Iterator(im):
    # ...do something to frame...
```

----------------------------------------

TITLE: Pillow Deprecated Constants and Enum Replacements
DESCRIPTION: Documentation for deprecated constants in Pillow and their recommended replacements using `enum.IntEnum` classes for various modules like `Image`, `ImageCms`, `ImageFont`, `BlpImagePlugin`, `FtexImagePlugin`, and `PngImagePlugin`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_18

LANGUAGE: APIDOC
CODE:
```
Removed Constants and their Replacements:
- Image.LINEAR -> Image.BILINEAR or Image.Resampling.BILINEAR
- Image.CUBIC -> Image.BICUBIC or Image.Resampling.BICUBIC
- Image.ANTIALIAS -> Image.LANCZOS or Image.Resampling.LANCZOS
- ImageCms.INTENT_PERCEPTUAL -> ImageCms.Intent.PERCEPTUAL
- ImageCms.INTENT_RELATIVE_COLORMETRIC -> ImageCms.Intent.RELATIVE_COLORMETRIC
- ImageCms.INTENT_SATURATION -> ImageCms.Intent.SATURATION
- ImageCms.INTENT_ABSOLUTE_COLORIMETRIC -> ImageCms.Intent.ABSOLUTE_COLORIMETRIC
- ImageCms.DIRECTION_INPUT -> ImageCms.Direction.INPUT
- ImageCms.DIRECTION_OUTPUT -> ImageCms.Direction.OUTPUT
- ImageCms.DIRECTION_PROOF -> ImageCms.Direction.PROOF
- ImageFont.LAYOUT_BASIC -> ImageFont.Layout.BASIC
- ImageFont.LAYOUT_RAQM -> ImageFont.Layout.RAQM
- BlpImagePlugin.BLP_FORMAT_JPEG -> BlpImagePlugin.Format.JPEG
- BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED -> BlpImagePlugin.Encoding.UNCOMPRESSED
- BlpImagePlugin.BLP_ENCODING_DXT -> BlpImagePlugin.Encoding.DXT
- BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED_RAW_RGBA -> BlpImagePlugin.Encoding.UNCOMPRESSED_RAW_RGBA
- BlpImagePlugin.BLP_ALPHA_ENCODING_DXT1 -> BlpImagePlugin.AlphaEncoding.DXT1
- BlpImagePlugin.BLP_ALPHA_ENCODING_DXT3 -> BlpImagePlugin.AlphaEncoding.DXT3
- BlpImagePlugin.BLP_ALPHA_ENCODING_DXT5 -> BlpImagePlugin.AlphaEncoding.DXT5
- FtexImagePlugin.FORMAT_DXT1 -> FtexImagePlugin.Format.DXT1
- FtexImagePlugin.FORMAT_UNCOMPRESSED -> FtexImagePlugin.Format.UNCOMPRESSED
- PngImagePlugin.APNG_DISPOSE_OP_NONE -> PngImagePlugin.Disposal.OP_NONE
- PngImagePlugin.APNG_DISPOSE_OP_BACKGROUND -> PngImagePlugin.Disposal.OP_BACKGROUND
- PngImagePlugin.APNG_DISPOSE_OP_PREVIOUS -> PngImagePlugin.Disposal.OP_PREVIOUS
- PngImagePlugin.APNG_BLEND_OP_SOURCE -> PngImagePlugin.Blend.OP_SOURCE
```

----------------------------------------

TITLE: Managing Image File Closures in Pillow
DESCRIPTION: Explains the removal of implicit file closing via `Image.__del__` (deprecated 6.1.0, removed 7.0.0). Users are now advised to explicitly close image files using a context manager (`with` statement) or by calling `Image.close()` for deterministic resource management.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_43

LANGUAGE: Python
CODE:
```
im = Image.open("hopper.png")
im.save("out.jpg")
```

LANGUAGE: Python
CODE:
```
with Image.open("hopper.png") as im:
    im.save("out.jpg")
```

----------------------------------------

TITLE: Pillow Decompression Bomb Error Handling Configuration
DESCRIPTION: Pillow 5.0.0 now raises `DecompressionBombError` for images exceeding a default threshold of 128Mpx. This behavior can be disabled or the threshold adjusted by modifying the `Image.MAX_IMAGE_PIXELS` attribute.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.0.0.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import Image

# Disable decompression bomb protection
Image.MAX_IMAGE_PIXELS = None

# Set a custom threshold (e.g., 200 Mpx)
Image.MAX_IMAGE_PIXELS = 200 * 1024 * 1024
```

----------------------------------------

TITLE: API Addition: PIL.ImageOps.cover Method
DESCRIPTION: The `ImageOps.cover` method returns a resized version of an image, ensuring the requested size is fully covered while maintaining the original aspect ratio. This is particularly useful for fitting images into a specific area without distorting their proportions, often used in UI layouts.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.1.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.ImageOps.cover(image, size)
  image: The input image.
  size: A tuple (width, height) representing the target size.
  Returns: A resized `PIL.Image.Image` object.
  Description: Resizes the image to cover the requested `size` while maintaining the aspect ratio. The image will be scaled up or down until both dimensions are greater than or equal to the target size, then cropped if necessary.
```

----------------------------------------

TITLE: ImageOps.contain Method API Reference
DESCRIPTION: API documentation for the new `ImageOps.contain` method, which resizes an image to fit within specified dimensions while maintaining aspect ratio, without filling extra space. It is compared to `ImageOps.fit` and `ImageOps.pad`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.3.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ImageOps.contain(image, size, color=None)
  Description: Returns a resized version of the image, set to the maximum width and height within 'size', while maintaining the original aspect ratio.
  Comparison:
    - ImageOps.fit: expands an image until is fills 'size', cropping the parts of the image that do not fit.
    - ImageOps.pad: expands an image to fill 'size', without cropping, but instead filling the extra space with 'color'.
    - ImageOps.contain: similar to ImageOps.pad, but it does not fill the extra space. Instead, the original aspect ratio is maintained. So unlike the other two methods, it is not guaranteed to return an image of 'size'.
```

----------------------------------------

TITLE: Extracting Frames from an Animation with Pillow
DESCRIPTION: This snippet demonstrates how to open an animated image file (e.g., .fli) using Pillow's Image module and then iterate through its frames using `ImageSequence.Iterator`. Each frame is saved as a separate PNG image, allowing for easy extraction of individual frames from an animation.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageSequence.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageSequence

with Image.open("animation.fli") as im:
    index = 1
    for frame in ImageSequence.Iterator(im):
        frame.save(f"frame{index}.png")
        index += 1
```

----------------------------------------

TITLE: Pillow ImageDraw.textbbox API Method
DESCRIPTION: Documents the `ImageDraw.textbbox` method, which returns the bounding box of text relative to a given anchor. It specifies parameters like coordinates, text content, font, anchor alignment, spacing for multiline text, text alignment, direction, features, language, stroke width, embedded color, and font size. This method is supported only for TrueType fonts and provides pixel-level bounding box information.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_29

LANGUAGE: APIDOC
CODE:
```
Method: ImageDraw.textbbox(xy, text, font=None, anchor=None, spacing=4, align="left", direction=None, features=None, language=None, stroke_width=0, embedded_color=False, font_size=None)

Description:
  Returns bounding box (in pixels) of given text relative to given anchor when rendered in font with provided direction, features, and language. Only supported for TrueType fonts.
  Use textlength to get the offset of following text with 1/64 pixel precision. The bounding box includes extra margins for some fonts, e.g. italics or accents. (versionadded:: 8.0.0)

Parameters:
  xy (tuple): The anchor coordinates of the text.
  text (str): Text to be measured. If it contains any newline characters, the text is passed on to multiline_textbbox.
  font (PIL.ImageFont.FreeTypeFont, optional): A FreeTypeFont instance.
  anchor (str, optional): The text anchor alignment. Determines the relative location of the anchor to the text. Default: "la" for horizontal text and "lt" for vertical text. Ignored for non-TrueType fonts.
  spacing (int, optional): If the text is passed on to multiline_textbbox, the number of pixels between lines.
  align (str, optional): If the text is passed on to multiline_textbbox, "left", "center", "right" or "justify". Determines the relative alignment of lines. Use the 'anchor' parameter to specify the alignment to 'xy'. (versionadded:: 11.2.1 "justify")
  direction (str, optional): Direction of the text. It can be "rtl" (right to left), "ltr" (left to right) or "ttb" (top to bottom). Requires libraqm.
  features (list[str], optional): A list of OpenType font features to be used during text layout. E.g., "dlig" or "ss01", but can be also used to turn off default font features, for example "-liga". Requires libraqm.
  language (str, optional): Language of the text (BCP 47 language code). Affects glyph shapes or ligatures. Requires libraqm.
  stroke_width (int, optional): The width of the text stroke.
  embedded_color (bool, optional): Whether to use font embedded color glyphs (COLR, CBDT, SBIX).
  font_size (int, optional, keyword-only): If 'font' is not provided, then the size to use for the default font.

Returns:
  (tuple): Bounding box (left, top, right, bottom) in pixels.
```

----------------------------------------

TITLE: New Image.resize/thumbnail filters: BOX and HAMMING
DESCRIPTION: Two new filters, `BOX` and `HAMMING`, are now available for `Image.resize()` and `Image.thumbnail()` functions. `BOX` is a high-performance filter suitable for image reduction (3x or more) producing sharper results than `BILINEAR`. `HAMMING` offers image downscaling quality comparable to `BICUBIC` with `BILINEAR` performance. Neither filter is recommended for image upscaling.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/3.4.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Image.resize(size, resample=Image.BOX)
Image.thumbnail(size, resample=Image.HAMMING)
```

----------------------------------------

TITLE: Draw Circle in Pillow ImageDraw
DESCRIPTION: Draws a circle with a specified radius centered at a given point. This method provides a direct way to draw circular shapes. (versionadded: 10.4.0)
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_12

LANGUAGE: APIDOC
CODE:
```
ImageDraw.circle(xy, radius, fill=None, outline=None, width=1)
  Parameters:
    xy: The point for the center of the circle, e.g. (x, y).
    radius: Radius of the circle.
    outline: Color to use for the outline.
    fill: Color to use for the fill.
    width: The line width, in pixels.
```

----------------------------------------

TITLE: PIL.Image.open API Reference
DESCRIPTION: The `Image.open` function opens and identifies the given image file. It supports both file paths and file-like objects, with the latter requiring `read`, `seek`, and `tell` methods and binary mode. It returns an `Image` object or raises an `OSError`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_38

LANGUAGE: APIDOC
CODE:
```
PIL.Image.open(fp: Union[str, BinaryIO]) -> PIL.Image.Image

Parameters:
  fp: The path to the image file (string) or a file-like object opened in binary mode.

Returns:
  A PIL.Image.Image object representing the opened image.

Raises:
  OSError: If the file cannot be opened, identified, or is corrupted.
```

----------------------------------------

TITLE: End of Support for PyQt5 and PySide2
DESCRIPTION: Support for PyQt5 and PySide2 has been removed from Pillow's `ImageQt` module due to Qt 5 reaching end-of-life. Users are advised to upgrade to PyQt6 or PySide6 for continued compatibility.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Removed Support For: PyQt5, PySide2 (in ImageQt)
Recommended Upgrade To: PyQt6, PySide6
```

----------------------------------------

TITLE: Removed: PyQt5 and PySide2 Support in ImageQt
DESCRIPTION: Support for PyQt5 and PySide2 has been removed from `ImageQt` due to Qt 5 reaching end-of-life. Users should upgrade to PyQt6 or PySide6. Removed in Pillow 10.0.0 (deprecated in 9.2.0).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_32

LANGUAGE: APIDOC
CODE:
```
Module: ImageQt
  - Removed support for PyQt5 and PySide2.
  - Deprecated: 9.2.0
  - Removed: 10.0.0
  - Recommendation: Upgrade to PyQt6 or PySide6.
```

----------------------------------------

TITLE: Migrating Text Alignment Approaches in Pillow
DESCRIPTION: This snippet illustrates the evolution of text alignment techniques in Pillow, specifically addressing issues with `textsize()` for centering text. It contrasts the deprecated approach with a partial example hinting at the use of `text-anchors` for more robust and accurate text positioning, especially for non-English or unusual fonts.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.2.0.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")

im = Image.new("RGB", (100, 100))
draw = ImageDraw.Draw(im)
width, height = draw.textsize("Hello world", font)
x, y = (100 - width) / 2, (100 - height) / 2
draw.text((x, y), "Hello world", font=font)
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")

im = Image.new("RGB", (100, 100))
```

----------------------------------------

TITLE: Rotate Image 180 Degrees with Pillow
DESCRIPTION: This snippet demonstrates rotating an image 180 degrees using the `transpose()` method with `Image.Transpose.ROTATE_180`. This is an alternative to `rotate()` for fixed 180-degree rotations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_14

LANGUAGE: Python
CODE:
```
out = im.transpose(Image.Transpose.ROTATE_180)
```

----------------------------------------

TITLE: Pillow Preserving ICC Profile on JPEG Save
DESCRIPTION: Example Python code demonstrating how to preserve the existing ICC color profile when saving a JPEG image using the `PIL.Image.Image.save` method.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_22

LANGUAGE: Python
CODE:
```
im.save(filename, 'jpeg', icc_profile=im.info.get('icc_profile'))
```

----------------------------------------

TITLE: Batch Image Processing with Glob (Pillow)
DESCRIPTION: Provides a Python function `compress_image` to convert and compress images to JPEG format. It then shows how to apply this function to multiple PNG images in a directory using the `glob` module for path discovery.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_35

LANGUAGE: Python
CODE:
```
import glob
from PIL import Image

def compress_image(source_path: str, dest_path: str) -> None:
    with Image.open(source_path) as img:
        if img.mode != "RGB":
            img = img.convert("RGB")
        img.save(dest_path, "JPEG", optimize=True, quality=80)


paths = glob.glob("*.png")
for path in paths:
    compress_image(path, path[:-4] + ".jpg")
```

----------------------------------------

TITLE: Draw Line in Pillow ImageDraw
DESCRIPTION: Draws a line or sequence of lines between the given coordinates. The coordinate pixels are included in the drawn line. Supports different joint types for connected lines. (width added 1.1.5, broken until 1.1.6; joint added 5.3.0)
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_14

LANGUAGE: APIDOC
CODE:
```
ImageDraw.line(xy, fill=None, width=0, joint=None)
  Parameters:
    xy: Sequence of either 2-tuples like [(x, y), (x, y), ...] or numeric values like [x, y, x, y, ...].
    fill: Color to use for the line.
    width: The line width, in pixels. (versionadded: 1.1.5, note: broken until version 1.1.6)
    joint: Joint type between a sequence of lines. It can be "curve", for rounded edges, or None. (versionadded: 5.3.0)
```

----------------------------------------

TITLE: Pillow Security: ImageFont.getmask String Length Limit
DESCRIPTION: To prevent DOS attacks, Pillow's `ImageFont.getmask` now limits input string length using `ImageFont.MAX_STRING_LENGTH`. Exceeding this raises a `ValueError`. The limit is configurable and can be disabled. A decompression bomb check was also added.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.2.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.ImageFont.ImageFont.getmask(text: str, *args, **kwargs) -> Image
  Raises ValueError if len(text) > PIL.ImageFont.MAX_STRING_LENGTH
PIL.ImageFont.MAX_STRING_LENGTH: int | None
  Default limit for string length in getmask. Can be changed or set to None to disable.
```

----------------------------------------

TITLE: Pillow Image Size and `size` Attribute
DESCRIPTION: Describes how to access an image's dimensions using the `PIL.Image.Image.size` attribute. This attribute returns a 2-tuple containing the horizontal and vertical size of the image in pixels.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.size
  Type: tuple (width, height)
  Description: The horizontal and vertical size of the image in pixels.
```

----------------------------------------

TITLE: Convert RGB image to CIE XYZ color space using PIL.Image.Image.convert
DESCRIPTION: This example converts an RGB image (linearly calibrated according to ITU-R 709, using the D65 luminant) to the CIE XYZ color space.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_2

LANGUAGE: python
CODE:
```
rgb2xyz = (
    0.412453, 0.357580, 0.180423, 0,
    0.212671, 0.715160, 0.072169, 0,
    0.019334, 0.119193, 0.950227, 0)
out = im.convert("RGB", rgb2xyz)
```

----------------------------------------

TITLE: PIL.ImageEnhance Module API Reference
DESCRIPTION: Comprehensive API documentation for the `PIL.ImageEnhance` module, detailing the common `_Enhance` interface and specific image enhancement classes: `Color`, `Contrast`, `Brightness`, and `Sharpness`. Each class provides methods to modify image properties based on an enhancement factor.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageEnhance.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.ImageEnhance Module Classes:

_Enhance:
  Common interface for all enhancement classes.
  Methods:
    enhance(factor):
      Returns an enhanced image.
      Parameters:
        factor (float): A floating point value controlling the enhancement.
                        Factor 1.0 returns a copy of the original image.
                        Lower factors mean less enhancement, higher values mean more.
                        No restrictions on this value.

Color(image):
  Adjust image color balance.
  Description: Similar to color controls on a TV.
               Factor 0.0: black and white image.
               Factor 1.0: original image.

Contrast(image):
  Adjust image contrast.
  Description: Similar to contrast control on a TV.
               Factor 0.0: solid gray image.
               Factor 1.0: original image.
               Greater values: increase contrast.

Brightness(image):
  Adjust image brightness.
  Description: Controls image brightness.
               Factor 0.0: black image.
               Factor 1.0: original image.
               Greater values: increase brightness.

Sharpness(image):
  Adjust image sharpness.
  Description: Adjusts image sharpness.
               Factor 0.0: blurred image.
               Factor 1.0: original image.
               Factor 2.0: sharpened image.
```

----------------------------------------

TITLE: Pillow Image Lifecycle Methods
DESCRIPTION: This section details the lifecycle methods of Pillow's Image object, explaining their roles in file handling and pixel data loading. It covers Image.open(), Image.Image.load(), and Image.Image.close(), outlining when files are opened, read, and closed, especially distinguishing between single-frame and multi-frame images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/open_files.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Image.open():
  - Purpose: Opens a file as an image.
  - Parameters:
    - filename: str | os.PathLike | file-like object
  - Behavior:
    - Filenames and Path objects are opened as a file.
    - Metadata is read.
    - File is left open for further usage.

Image.Image.load():
  - Purpose: Reads pixel data into memory.
  - Behavior:
    - Called when pixel data is required.
    - Current frame is read into memory.
    - Image can be used independently of the underlying file.
    - Internally called by methods creating new image instances from another.
    - If opened with filename/Path (by Pillow):
      - Single-frame image: File is closed after frame read.
      - Multi-frame image: File is left open for Image.Image.seek().

Image.Image.close():
  - Purpose: Closes the underlying file and destroys the core image object.
  - Behavior:
    - Explicitly closes the file.
    - Pillow context manager also closes the file but does not destroy the core image object.
```

----------------------------------------

TITLE: Transpose Image Based on EXIF Orientation with Pillow's ImageOps.exif_transpose
DESCRIPTION: The PIL.ImageOps.exif_transpose method returns a copy of an image, automatically transposed according to its EXIF Orientation tag. This simplifies correcting image orientation based on metadata.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_10

LANGUAGE: APIDOC
CODE:
```
PIL.ImageOps.exif_transpose()
  Returns: A copy of the image, transposed according to its EXIF Orientation tag.
```

----------------------------------------

TITLE: Pillow Image Size Direct Assignment Behavior Change
DESCRIPTION: Direct assignment to `im.size` now raises an `AttributeError` to prevent unintended consequences. The `resize` method is the correct way to change image dimensions. Exceptions include ICO/ICNS formats for subimage selection and TIFF (with a DeprecationWarning).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.3.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Image.Image.size:
  Behavior Change: Direct assignment (e.g., im.size = (100, 100)) now raises AttributeError.
  Correct Usage: Use Image.Image.resize() method.
  Exceptions:
    - ICO/ICNS formats: Still allow im.size = (w, h) for subimage selection.
    - TIFF format: Raises DeprecationWarning for direct assignment (previously a workaround).
```

----------------------------------------

TITLE: Draw Rectangle with Pillow ImageDraw
DESCRIPTION: Draws a rectangle defined by two points. It supports custom fill, outline colors, and line width.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_19

LANGUAGE: APIDOC
CODE:
```
ImageDraw.rectangle(xy, fill=None, outline=None, width=1)
  xy: Two points to define the bounding box. Sequence of either [(x0, y0), (x1, y1)] or [x0, y0, x1, y1], where x1 >= x0 and y1 >= y0. The bounding box is inclusive of both endpoints.
  fill: Color to use for the fill.
  outline: Color to use for the outline.
  width: The line width, in pixels.
```

----------------------------------------

TITLE: Implement `anchor` parameter for `ImageDraw.text` in Pillow 8.0.0
DESCRIPTION: The `anchor` parameter has been implemented for `ImageDraw.text` in Pillow 8.0.0. This allows users to control the text's position relative to the `xy` point, providing more precise text placement.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
ImageDraw.text method:
  Parameter: anchor
  Change: Parameter has been implemented to change text position relative to xy point.
```

----------------------------------------

TITLE: Deprecated: PILLOW_VERSION Constant
DESCRIPTION: The `PILLOW_VERSION` constant has been removed in Pillow 9.0.0 (deprecated in 5.2.0). Use `__version__` instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_34

LANGUAGE: APIDOC
CODE:
```
Constant: PILLOW_VERSION
  - Deprecated: 5.2.0
  - Removed: 9.0.0
  - Replacement: Use __version__ attribute.
```

----------------------------------------

TITLE: Drawing Rounded Rectangles with ImageDraw
DESCRIPTION: The `ImageDraw.rounded_rectangle` method has been added, functioning similarly to `ImageDraw.rectangle` but with an additional `radius` argument to control corner curvature. The `radius` is limited to half of the width or height.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.2.0.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw
im = Image.new("RGB", (200, 200))
draw = ImageDraw.Draw(im)
draw.rounded_rectangle(xy=(10, 20, 190, 180), radius=30, fill="red")
```

----------------------------------------

TITLE: Crop an image using PIL.Image.Image.crop method
DESCRIPTION: This script demonstrates how to crop an input image using the provided coordinates (left, upper, right, lower).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_3

LANGUAGE: python
CODE:
```
from PIL import Image

with Image.open("hopper.jpg") as im:

    # The crop method from the Image module takes four coordinates as input.
    # The right can also be represented as (left+width)
    # and lower can be represented as (upper+height).
    (left, upper, right, lower) = (20, 20, 100, 100)

    # Here the image "im" is cropped and assigned to new variable im_crop
    im_crop = im.crop((left, upper, right, lower))
```

----------------------------------------

TITLE: Calculate Bounding Box for Multiline Text (ImageDraw.multiline_textbbox)
DESCRIPTION: Returns the bounding box in pixels for a given multiline text string when rendered with a specified font, anchor, direction, features, and language. This method is only supported for TrueType fonts and includes extra margins for certain font styles. It was added in version 8.0.0.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_30

LANGUAGE: APIDOC
CODE:
```
ImageDraw.multiline_textbbox(
    xy,
    text,
    font=None,
    anchor=None,
    spacing=4,
    align="left",
    direction=None,
    features=None,
    language=None,
    stroke_width=0,
    embedded_color=False,
    font_size=None
)

Description: Returns bounding box (in pixels) of given text relative to given anchor when rendered in font with provided direction, features, and language. Only supported for TrueType fonts. Use textlength to get the offset of following text with 1/64 pixel precision. The bounding box includes extra margins for some fonts, e.g. italics or accents.

Parameters:
  xy: The anchor coordinates of the text.
  text: Text to be measured.
  font: A ~PIL.ImageFont.FreeTypeFont instance.
  anchor: The text anchor alignment. Determines the relative location of the anchor to the text. The default alignment is top left, specifically "la" for horizontal text and "lt" for vertical text. See text-anchors for details. This parameter is ignored for non-TrueType fonts.
  spacing: The number of pixels between lines.
  align: "left", "center", "right" or "justify". Determines the relative alignment of lines. Use the anchor parameter to specify the alignment to xy. "justify" added in 11.2.1.
  direction: Direction of the text. It can be "rtl" (right to left), "ltr" (left to right) or "ttb" (top to bottom). Requires libraqm.
  features: A list of OpenType font features to be used during text layout. This is usually used to turn on optional font features that are not enabled by default, for example "dlig" or "ss01", but can be also used to turn off default font features, for example "-liga" to disable ligatures or "-kern" to disable kerning. To get all supported features, see OpenType docs. Requires libraqm.
  language: Language of the text. Different languages may use different glyph shapes or ligatures. This parameter tells the font which language the text is in, and to apply the correct substitutions as appropriate, if available. It should be a BCP 47 language code. Requires libraqm.
  stroke_width: The width of the text stroke.
  embedded_color: Whether to use font embedded color glyphs (COLR, CBDT, SBIX).
  font_size: If font is not provided, then the size to use for the default font. Keyword-only argument. Added in 10.1.0.

Returns: (left, top, right, bottom) bounding box
```

----------------------------------------

TITLE: API Change: Removal of internal Image._MODEINFO
DESCRIPTION: The internal `Image._MODEINFO` dictionary has been removed. Alternatives include `Image.getmodebase()`, `Image.getmodetype()`, `Image.getmodebandnames()`, `Image.getmodebands()`, or `ImageMode.getmode()` for mode information.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.2.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Removed:
  PIL.Image._MODEINFO

Alternatives:
  PIL.Image.getmodebase()
  PIL.Image.getmodetype()
  PIL.Image.getmodebandnames()
  PIL.Image.getmodebands()
  PIL.ImageMode.getmode()
```

----------------------------------------

TITLE: PIL.Image.Image Class Attributes
DESCRIPTION: Documentation for attributes of the PIL.Image.Image class, providing information about image properties such as filename, format, mode, size, and palette.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_12

LANGUAGE: APIDOC
CODE:
```
Image.filename:
  type: str
  description: The filename or path of the source file. Only images created with the factory function open have a filename attribute. If the input is a file like object, the filename attribute is set to an empty string.

Image.format:
  type: Optional[str]
  description: The file format of the source file. For images created by the library itself (via a factory function, or by running a method on an existing image), this attribute is set to None.

Image.mode:
  type: str
  description: Image mode. This is a string specifying the pixel format used by the image. Typical values are “1”, “L”, “RGB”, or “CMYK.” See concept-modes for a full list.

Image.size:
  type: tuple[int]
  description: Image size, in pixels. The size is given as a 2-tuple (width, height).

Image.width:
  type: int
  description: Image width, in pixels.

Image.height:
  type: int
  description: Image height, in pixels.

Image.palette:
  type: Optional[PIL.ImagePalette.ImagePalette]
  description: Colour palette table, if any. If mode is "P" or "PA", this should be an instance of the PIL.ImagePalette.ImagePalette class. Otherwise, it should be set to None.

Image.info:
  type: dict
  description: A dictionary holding data associated with the image. This dictionary is used by file handlers to pass on various non-image information read from
```

----------------------------------------

TITLE: Convert image files to JPEG using PIL
DESCRIPTION: Provides a Python script to iterate through command-line arguments, open each image file, and save it as a JPEG. It handles potential `OSError` exceptions for files that cannot be converted.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_2

LANGUAGE: Python
CODE:
```
import os, sys
from PIL import Image

for infile in sys.argv[1:]:
    f, e = os.path.splitext(infile)
    outfile = f + ".jpg"
    if infile != outfile:
        try:
            with Image.open(infile) as im:
                im.save(outfile)
        except OSError:
            print("cannot convert", infile)
```

----------------------------------------

TITLE: Rotate and Paste Image Region with Pillow
DESCRIPTION: This example shows how to rotate a cropped image region by 180 degrees using `transpose()` and then paste it back into the original image at the specified coordinates using `paste()`. The size of the region must match the target area exactly, and it cannot extend outside the image boundaries. Modes are automatically converted if they don't match.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_6

LANGUAGE: Python
CODE:
```
region = region.transpose(Image.Transpose.ROTATE_180)
im.paste(region, box)
```

----------------------------------------

TITLE: Pillow Image.save Method General Keyword Arguments
DESCRIPTION: Documents common keyword arguments available for the `PIL.Image.Image.save` method, applicable across various image formats. These arguments control aspects like appending images and specifying bitmap format.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_19

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save method keyword arguments:

append_images:
  Type: list of PIL.Image.Image
  Description: A list of images to replace the scaled down versions of the image. The order of the images does not matter, as their use is determined by the size of each image.
  Version Added: 8.1.0

bitmap_format:
  Type: str
  Description: Specifies the format for saving image data. Default is PNG. Can be "bmp" to save in BMP format.
  Version Added: 8.3.0
```

----------------------------------------

TITLE: Draw Text with Pillow ImageDraw
DESCRIPTION: Draws a string at a specified position, supporting various text properties like fill color, font, anchor, spacing, alignment, direction, OpenType features, and language. It can handle multiline text.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_22

LANGUAGE: APIDOC
CODE:
```
ImageDraw.text(xy, text, fill=None, font=None, anchor=None, spacing=4, align="left", direction=None, features=None, language=None, stroke_width=0, stroke_fill=None, embedded_color=False, font_size=None)
  xy: The anchor coordinates of the text.
  text: String to be drawn. If it contains any newline characters, the text is passed on to PIL.ImageDraw.ImageDraw.multiline_text.
  fill: Color to use for the text.
  font: An PIL.ImageFont.ImageFont instance.
  anchor: The text anchor alignment. Determines the relative location of the anchor to the text. The default alignment is top left, specifically la for horizontal text and lt for vertical text. This parameter is ignored for non-TrueType fonts.
  spacing: If the text is passed on to PIL.ImageDraw.ImageDraw.multiline_text, the number of pixels between lines.
  align: If the text is passed on to PIL.ImageDraw.ImageDraw.multiline_text, "left", "center", "right" or "justify". Determines the relative alignment of lines. Use the anchor parameter to specify the alignment to xy.
  direction: Direction of the text. It can be "rtl" (right to left), "ltr" (left to right) or "ttb" (top to bottom). Requires libraqm.
  features: A list of OpenType font features to be used during text layout. This is usually used to turn on optional font features that are not enabled by default, for example "dlig" or "ss01", but can be also used to turn off default font features, for example "-liga" to disable ligatures or "-kern" to disable kerning. Requires libraqm.
  language: Language of the text. Different languages may use different glyph shapes or ligatures. This parameter tells the text renderer which language to use for text shaping.
  stroke_width: The width of the text stroke, in pixels.
  stroke_fill: Color to use for the text stroke.
  embedded_color: Whether to use embedded color glyphs.
  font_size: The font size in pixels.
```

----------------------------------------

TITLE: Draw Text on Image using Pillow
DESCRIPTION: This Python snippet demonstrates how to draw text onto an image using Pillow's ImageDraw module. It specifies the text position, content, font, and anchor point for precise placement.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.2.0.rst#_snippet_3

LANGUAGE: python
CODE:
```
draw = ImageDraw.Draw(im)
draw.text((100 / 2, 100 / 2), "Hello world", font=font, anchor="mm")
```

----------------------------------------

TITLE: Controlling Image Decoding with Draft Mode (Pillow)
DESCRIPTION: Illustrates the use of `Image.Image.draft` to manipulate an image's mode and size during the decoding process, specifically for JPEG and MPO files. This technique can significantly speed up operations like thumbnail generation by reconfiguring the decoder for efficiency.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_37

LANGUAGE: Python
CODE:
```
from PIL import Image

with Image.open(file) as im:
    print("original =", im.mode, im.size)

    im.draft("L", (100, 100))
    print("draft =", im.mode, im.size)
```

----------------------------------------

TITLE: Set Default Font for ImageDraw Operations
DESCRIPTION: This snippet demonstrates how to set a default font for all future ImageDraw operations, eliminating the need to specify the font for each text-related method call or ImageDraw instance.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.3.0.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import ImageDraw, ImageFont
ImageDraw.ImageDraw.font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
```

----------------------------------------

TITLE: Resize Image with PIL
DESCRIPTION: This code snippet illustrates how to resize an image using Pillow. It opens an image and resizes it to half its original width and height, demonstrating the use of the `resize()` method.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from PIL import Image

with Image.open("hopper.jpg") as im:

    # Provide the target width and height of the image
    (width, height) = (im.width // 2, im.height // 2)
    im_resized = im.resize((width, height))
```

----------------------------------------

TITLE: API Change: Direct Image Mode Setting (im.mode = 'RGBA') Now Raises AttributeError
DESCRIPTION: Attempting to directly set an image's mode (e.g., `im.mode = "RGBA"`) now raises an `AttributeError`. The `convert` method is the correct and recommended way to change an image's mode, preventing later issues and ensuring proper image processing.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.1.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.mode
  Type: Property (setter removed)
  Description: Direct assignment to this property (e.g., `im.mode = "RGBA"`) now raises `AttributeError`.
  Correct Usage: Use `PIL.Image.Image.convert()` method to change image mode.
```

----------------------------------------

TITLE: Flip Image Vertically with Pillow
DESCRIPTION: This snippet demonstrates flipping an image vertically (top to bottom) using the `transpose()` method with `Image.Transpose.FLIP_TOP_BOTTOM`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_12

LANGUAGE: Python
CODE:
```
out = im.transpose(Image.Transpose.FLIP_TOP_BOTTOM)
```

----------------------------------------

TITLE: Apply Pre-defined Image Filters with PIL.ImageFilter in Python
DESCRIPTION: This snippet illustrates how to apply pre-defined enhancement filters from the `PIL.ImageFilter` module to an image using the `Image.filter` method. It specifically applies the `DETAIL` filter to an existing image object `im`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_21

LANGUAGE: Python
CODE:
```
from PIL import ImageFilter
out = im.filter(ImageFilter.DETAIL)
```

----------------------------------------

TITLE: Draw Multiline Text on an Image with PIL.ImageDraw
DESCRIPTION: Shows how to draw text spanning multiple lines on an image. It creates a new image, loads a font, and uses `multiline_text` to render text with embedded newlines.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

# create an image
out = Image.new("RGB", (150, 100), (255, 255, 255))

# get a font
fnt = ImageFont.truetype("Pillow/Tests/fonts/FreeMono.ttf", 40)
# get a drawing context
d = ImageDraw.Draw(out)

# draw multiline text
d.multiline_text((10, 10), "Hello\nWorld", font=fnt, fill=(0, 0, 0))

out.show()
```

----------------------------------------

TITLE: Get Image Bounding Box with PIL
DESCRIPTION: This example demonstrates how to obtain the bounding box coordinates of an image using Pillow's `getbbox()` method. The method returns four coordinates in the format (left, upper, right, lower).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_8

LANGUAGE: Python
CODE:
```
from PIL import Image

with Image.open("hopper.jpg") as im:
    print(im.getbbox())
    # Returns four coordinates in the format (left, upper, right, lower)
```

----------------------------------------

TITLE: XML Parsing Security Enhancements
DESCRIPTION: API documentation detailing security improvements in XML parsing for XMP data. `getexif()` now uses `re` and `getxmp()` uses `defusedxml` to mitigate security risks associated with Python's `xml` module.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.3.0.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
XML Parsing Security Updates
  PIL.Image.Image.getexif:
    - Previously: Used 'xml' module for orientation data (since Pillow 7.2.0).
    - Now: Refactored to use 're' instead.
  PIL.JpegImagePlugin.JpegImageFile.getxmp():
    - Previously: Used 'xml' module (added in Pillow 8.2.0).
    - Now: Uses 'defusedxml'. If the dependency is not present, an empty dictionary will be returned and a warning raised.
```

----------------------------------------

TITLE: Get Image Bands with PIL
DESCRIPTION: This snippet shows how to retrieve the color bands of an input image using Pillow's `getbands()` method. For an RGB image, it typically returns ('R', 'G', 'B').
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_7

LANGUAGE: Python
CODE:
```
from PIL import Image

with Image.open("hopper.jpg") as im:
    print(im.getbands())  # Returns ('R', 'G', 'B')
```

----------------------------------------

TITLE: Pillow Image Bands and `getbands` Method
DESCRIPTION: Explains image bands (e.g., R, G, B, A) as separate data channels within an image and how to retrieve their names using the `PIL.Image.Image.getbands` method. Many operations in Pillow act on each band separately.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.getbands() -> tuple
  Description: Returns a tuple containing the name of each band in the image.
  Example: For an RGBA image, returns ('R', 'G', 'B', 'A').
```

----------------------------------------

TITLE: Deprecated Image String Conversion Functions
DESCRIPTION: Details the removal of `Image.fromstring()`, `im.fromstring()`, and `im.tostring()` functions, which were deprecated since Pillow 2.0.0 and removed in 8.0.0. Users should now use `Image.frombytes()` and `Image.tobytes()` respectively.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_40

LANGUAGE: APIDOC
CODE:
```
Image.fromstring(): Removed. Use Image.frombytes() instead.
im.fromstring(): Removed. Use PIL.Image.Image.frombytes() instead.
im.tostring(): Removed. Use PIL.Image.Image.tobytes() instead.
DeprecationWarning issued since 2.0.0.
Exception issued since 3.0.0.
NotImplementedError issued since 3.3.0.
```

----------------------------------------

TITLE: Access and Modify EXIF Data with Pillow's Image.getexif and Exif Class
DESCRIPTION: The PIL.Image.Image.getexif method has been added, returning an PIL.Image.Exif instance. This instance behaves like a dictionary, allowing retrieval and setting of EXIF values. It can be passed as an 'exif' argument when saving JPEG, PNG, or WEBP images to include changes.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.getexif()
  Returns: PIL.Image.Exif instance
  Usage: Values can be retrieved and set like a dictionary.
  Saving: Pass as 'exif' argument to include changes in JPEG, PNG, or WEBP output.
```

----------------------------------------

TITLE: Creating Animated GIFs with Pillow
DESCRIPTION: Provides an example of how to combine multiple static images into an animated GIF using Pillow's `save` method. It demonstrates setting frame duration and loop behavior for the animation.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_27

LANGUAGE: python
CODE:
```
from PIL import Image

# List of image filenames
image_filenames = [
    "hopper.jpg",
    "rotated_hopper_270.jpg",
    "rotated_hopper_180.jpg",
    "rotated_hopper_90.jpg",
]

# Open images and create a list
images = [Image.open(filename) for filename in image_filenames]

# Save the images as an animated GIF
images[0].save(
    "animated_hopper.gif",
    append_images=images[1:],
    duration=500,  # duration of each frame in milliseconds
    loop=0,  # loop forever
)
```

----------------------------------------

TITLE: Convert Color String to RGB Tuple (PIL.ImageColor.getrgb)
DESCRIPTION: Converts a CSS3-style color string into an RGB tuple. This function raises a ValueError exception if the provided string cannot be parsed into a valid color.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageColor.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
getrgb(color)
  color: The color string to convert (e.g., "red", "#ff0000", "rgb(255,0,0)").
  Returns: An RGB tuple (e.g., (255, 0, 0)).
  Raises: ValueError if the string cannot be parsed.
  Version Added: 1.1.4
```

----------------------------------------

TITLE: Save multiple frames in TIFF files with save_all
DESCRIPTION: Multiple frames can now be saved within a single TIFF file by utilizing the `save_all` option during the save operation.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/3.4.0.rst#_snippet_5

LANGUAGE: Python
CODE:
```
im.save("filename.tiff", format="TIFF", save_all=True)
```

----------------------------------------

TITLE: Merging Images and Applying Point Operations with Pillow
DESCRIPTION: Demonstrates how to merge image bands using `Image.merge` and apply a point operation with `im.point` to create a mask. It also explains Python's short-circuit evaluation behavior for the masking expression.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_24

LANGUAGE: python
CODE:
```
im = Image.merge(im.mode, source)
```

LANGUAGE: python
CODE:
```
imout = im.point(lambda i: expression and 255)
```

----------------------------------------

TITLE: Pillow Image Palette Mode (`P`)
DESCRIPTION: Describes the 'P' (palette) mode, an 8-bit pixel mode where pixel values are not direct color values but indices into an associated color palette. This allows for a wider range of colors than the 8-bit depth would normally permit.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Pillow Palette Mode ('P'):
  Description: An image mode where 8-bit pixels are mapped to colors defined in an associated color palette.
  Usage: Allows images to use a wider range of colors than their bit depth would normally allow, by referencing a lookup table.
```

----------------------------------------

TITLE: Draw Rounded Rectangle with Pillow ImageDraw
DESCRIPTION: Draws a rounded rectangle, allowing specification of corner radius. It supports custom fill, outline colors, line width, and individual corner rounding.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_20

LANGUAGE: APIDOC
CODE:
```
ImageDraw.rounded_rectangle(xy, radius=0, fill=None, outline=None, width=1, corners=None)
  xy: Two points to define the bounding box. Sequence of either [(x0, y0), (x1, y1)] or [x0, y0, x1, y1], where x1 >= x0 and y1 >= y0. The bounding box is inclusive of both endpoints.
  radius: Radius of the corners.
  fill: Color to use for the fill.
  outline: Color to use for the outline.
  width: The line width, in pixels.
  corners: A tuple of whether to round each corner, (top_left, top_right, bottom_right, bottom_left). Keyword-only argument.
```

----------------------------------------

TITLE: Adding XMP Data Retrieval for JPEG Images
DESCRIPTION: A new method, `getxmp()`, has been added to `PIL.Image.Image` to retrieve XMP (Extensible Metadata Platform) data from JPEG images. It parses the XML data into a dictionary.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.2.0.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from PIL import Image
with Image.open("Tests/images/xmp_test.jpg") as im:
    print(im.getxmp())
```

----------------------------------------

TITLE: Pillow Support for PNG EXIF Data
DESCRIPTION: EXIF data can now be read from and saved to PNG images. However, unlike other formats, EXIF data is not guaranteed to be present in PIL.Image.Image.info until PIL.Image.Image.load has been called.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_11

LANGUAGE: APIDOC
CODE:
```
PNG EXIF data:
  Read/Save: Supported.
  Note: EXIF data not guaranteed in PIL.Image.Image.info until PIL.Image.Image.load() is called.
```

----------------------------------------

TITLE: Pillow PixelAccess Class API Reference
DESCRIPTION: This section provides the API documentation for the `PixelAccess` class, detailing its constructor and key methods for pixel manipulation. It includes `__getitem__` for reading pixel values and `__setitem__` for modifying them, along with their parameters, types, and descriptions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/PixelAccess.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
class PixelAccess
  canonical: PIL.Image.core.PixelAccess

  __getitem__(self, xy: tuple[int, int]) -> float | tuple[int, ...]
    Returns the pixel at x,y. The pixel is returned as a single
    value for single band images or a tuple for multi-band images.
    param xy: The pixel coordinate, given as (x, y).
    returns: a pixel value for single band images, a tuple of
             pixel values for multiband images.

  __setitem__(self, xy: tuple[int, int], color: float | tuple[int, ...]) -> None
    Modifies the pixel at x,y. The color is given as a single
    numerical value for single band images, and a tuple for
    multi-band images.
    param xy: The pixel coordinate, given as (x, y).
    param color: The pixel value according to its mode,
                 e.g. tuple (r, g, b) for RGB mode.
```

----------------------------------------

TITLE: Capture Screen Snapshot (PIL.ImageGrab.grab)
DESCRIPTION: This function takes a snapshot of the screen, returning the pixels within a specified bounding box as an image. It supports capturing the entire screen or specific regions, with OS-specific behaviors for color modes, Retina screens, and multi-monitor setups. On Linux, it can use fallback tools like `gnome-screenshot` if X11 display capture fails.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageGrab.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.ImageGrab.grab(bbox=None, include_layered_windows=False, all_screens=False, xdisplay=None, window=None)

Description: Take a snapshot of the screen. The pixels inside the bounding box are returned as an "RGBA" on macOS, or an "RGB" image otherwise. If the bounding box is omitted, the entire screen is copied, and on macOS, it will be at 2x if on a Retina screen. On Linux, if `xdisplay` is `None` and the default X11 display does not return a snapshot of the screen, `gnome-screenshot`, `grim` or `spectacle` will be used as a fallback if they are installed. To disable this behaviour, pass `xdisplay=""` instead.

Parameters:
  bbox: tuple[int, int, int, int] or None
    What region to copy. Default is the entire screen. On macOS, this is not increased to 2x for Retina screens, so the full width of a Retina screen would be 1440, not 2880. On Windows, the top-left point may be negative if `all_screens=True` is used.
  include_layered_windows: bool (Windows OS only)
    Includes layered windows. (Added in 6.1.0)
  all_screens: bool (Windows OS only)
    Capture all monitors. (Added in 6.2.0)
  xdisplay: str or None
    X11 Display address. Pass `None` to grab the default system screen. Pass `""` to grab the default X11 screen on Windows or macOS. You can check X11 support using `PIL.features.check_feature` with `feature="xcb"`. (Added in 7.1.0)
  window: int (Windows only)
    HWND, to capture a single window. (Added in 11.2.1)

Returns:
  PIL.Image.Image
    An image.
```

----------------------------------------

TITLE: Flip Image using PIL Transpose
DESCRIPTION: This snippet demonstrates how to flip an image horizontally using Pillow's `transpose()` method with `Image.Transpose.FLIP_LEFT_RIGHT`. It also mentions the option for vertical flipping.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_11

LANGUAGE: Python
CODE:
```
from PIL import Image

with Image.open("hopper.jpg") as im:

    # Flip the image from left to right
    im_flipped = im.transpose(method=Image.Transpose.FLIP_LEFT_RIGHT)
    # To flip the image from top to bottom,
    # use the method "Image.Transpose.FLIP_TOP_BOTTOM"
```

----------------------------------------

TITLE: Save Multiple MPO Frames with Pillow
DESCRIPTION: Pillow now supports saving all frames of an MPO image to a file using the `save_all` argument. Additionally, new images can be appended to the saved file by combining `save_all` with the `append_images` argument.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.3.0.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from PIL import Image
im = Image.open("frozenpond.mpo")
im.save(out, save_all=True)
```

LANGUAGE: Python
CODE:
```
im.save(out, save_all=True, append_images=[im1, im2, ...])
```

----------------------------------------

TITLE: Apply Image Filters using PIL.ImageFilter
DESCRIPTION: Demonstrates how to apply pre-defined and parameterized filters from the `PIL.ImageFilter` module to an image. It shows examples using `ImageFilter.BLUR` and `ImageFilter.MinFilter` with the `im.filter()` method.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageFilter.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import ImageFilter

im1 = im.filter(ImageFilter.BLUR)

im2 = im.filter(ImageFilter.MinFilter(3))
im3 = im.filter(ImageFilter.MinFilter)  # same as MinFilter(3)
```

----------------------------------------

TITLE: Pillow PNG Save Options
DESCRIPTION: Parameters available when saving PNG files using Pillow's Image.save method, controlling aspects like compression, transparency, and metadata.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_47

LANGUAGE: APIDOC
CODE:
```
Parameter: optimize
  Type: boolean
  Description: If present and true, instructs the PNG writer to make the output file as small as possible. This includes extra processing in order to find optimal encoder settings.

Parameter: transparency
  Type: (palette index | byte string)
  Description: For P, 1, L, I, and RGB images, this option controls what color from the image to mark as transparent. For P images, this can be a either the palette index, or a byte string with alpha values for each palette entry.

Parameter: dpi
  Type: tuple[int, int]
  Description: A tuple of two numbers corresponding to the desired dpi in each direction.

Parameter: pnginfo
  Type: PIL.PngImagePlugin.PngInfo instance
  Description: A PIL.PngImagePlugin.PngInfo instance containing chunks.

Parameter: compress_level
  Type: int (0-9)
  Description: ZLIB compression level. 1 gives best speed, 9 gives best compression, 0 gives no compression at all. Default is 6. When optimize option is True, compress_level has no effect (it is set to 9 regardless of a value passed).

Parameter: icc_profile
  Type: ICC Profile data
  Description: The ICC Profile to include in the saved file.

Parameter: exif
  Type: Exif data
  Description: The exif data to include in the saved file. (Added in version 6.0.0)

Parameter: bits (experimental)
  Type: int
  Description: For P images, this option controls how many bits to store. If omitted, the PNG writer uses 8 bits (256 colors).

Parameter: dictionary (experimental)
  Type: ZLIB encoder dictionary
  Description: Set the ZLIB encoder dictionary.
```

----------------------------------------

TITLE: Pillow Gaussian Blur Performance Optimization
DESCRIPTION: The new Gaussian blur implementation in Pillow, based on a box filter, offers constant computation time regardless of the blur radius. This significantly improves performance compared to the previous version, which had execution time dependent on the radius value.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/2.7.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.ImageFilter.GaussianBlur(radius)
  Previous performance:
    Computation time increased with radius.
    Example: 1s for radius 1, 17s for radius 50.
  New performance:
    Computation time is constant relative to radius.
    Example: ~0.2s for any radius on the same image.
```

----------------------------------------

TITLE: Reading Image Sequences (GIFs) with Pillow
DESCRIPTION: Illustrates how to open and navigate frames within an image sequence (like a GIF) using `Image.open`, `seek`, and `tell` methods. It also shows how to handle the end of the sequence using an `EOFError` exception.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_26

LANGUAGE: python
CODE:
```
from PIL import Image

with Image.open("animation.gif") as im:
    im.seek(1)  # skip to the second frame

    try:
        while 1:
            im.seek(im.tell() + 1)
            # do something to im
    except EOFError:
        pass  # end of sequence
```

----------------------------------------

TITLE: Deprecated Pillow Constants and their Enum Replacements
DESCRIPTION: This section lists constants deprecated in Pillow 9.1.0, scheduled for removal in Pillow 10.0.0. Users should migrate to the new `enum.IntEnum` classes for equivalent functionality. Note that some of these deprecations were later restored in Pillow 9.4.0.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Deprecated Constants and their Replacements:
  Image.NONE: Image.Dither.NONE or Image.Resampling.NEAREST
  Image.NEAREST: Image.Dither.NONE or Image.Resampling.NEAREST
  Image.ORDERED: Image.Dither.ORDERED
  Image.RASTERIZE: Image.Dither.RASTERIZE
  Image.FLOYDSTEINBERG: Image.Dither.FLOYDSTEINBERG
  Image.WEB: Image.Palette.WEB
  Image.ADAPTIVE: Image.Palette.ADAPTIVE
  Image.AFFINE: Image.Transform.AFFINE
  Image.EXTENT: Image.Transform.EXTENT
  Image.PERSPECTIVE: Image.Transform.PERSPECTIVE
  Image.QUAD: Image.Transform.QUAD
  Image.MESH: Image.Transform.MESH
  Image.FLIP_LEFT_RIGHT: Image.Transpose.FLIP_LEFT_RIGHT
  Image.FLIP_TOP_BOTTOM: Image.Transpose.FLIP_TOP_BOTTOM
  Image.ROTATE_90: Image.Transpose.ROTATE_90
  Image.ROTATE_180: Image.Transpose.ROTATE_180
  Image.ROTATE_270: Image.Transpose.ROTATE_270
  Image.TRANSPOSE: Image.Transpose.TRANSPOSE
  Image.TRANSVERSE: Image.Transpose.TRANSVERSE
  Image.BOX: Image.Resampling.BOX
  Image.BILINEAR: Image.Resampling.BILINEAR
  Image.LINEAR: Image.Resampling.BILINEAR
  Image.HAMMING: Image.Resampling.HAMMING
  Image.BICUBIC: Image.Resampling.BICUBIC
  Image.CUBIC: Image.Resampling.BICUBIC
  Image.LANCZOS: Image.Resampling.LANCZOS
  Image.ANTIALIAS: Image.Resampling.LANCZOS
  Image.MEDIANCUT: Image.Quantize.MEDIANCUT
  Image.MAXCOVERAGE: Image.Quantize.MAXCOVERAGE
  Image.FASTOCTREE: Image.Quantize.FASTOCTREE
  Image.LIBIMAGEQUANT: Image.Quantize.LIBIMAGEQUANT
  ImageCms.INTENT_PERCEPTUAL: ImageCms.Intent.PERCEPTUAL
  ImageCms.INTENT_RELATIVE_COLORMETRIC: ImageCms.Intent.RELATIVE_COLORMETRIC
  ImageCms.INTENT_SATURATION: ImageCms.Intent.SATURATION
  ImageCms.INTENT_ABSOLUTE_COLORIMETRIC: ImageCms.Intent.ABSOLUTE_COLORIMETRIC
  ImageCms.DIRECTION_INPUT: ImageCms.Direction.INPUT
  ImageCms.DIRECTION_OUTPUT: ImageCms.Direction.OUTPUT
  ImageCms.DIRECTION_PROOF: ImageCms.Direction.PROOF
  ImageFont.LAYOUT_BASIC: ImageFont.Layout.BASIC
  ImageFont.LAYOUT_RAQM: ImageFont.Layout.RAQM
  BlpImagePlugin.BLP_FORMAT_JPEG: BlpImagePlugin.Format.JPEG
  BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED: BlpImagePlugin.Encoding.UNCOMPRESSED
  BlpImagePlugin.BLP_ENCODING_DXT: BlpImagePlugin.Encoding.DXT
  BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED_RAW_RGBA: BlpImagePlugin.Encoding.UNCOMPRESSED_RAW_RGBA
  BlpImagePlugin.BLP_ALPHA_ENCODING_DXT1: BlpImagePlugin.AlphaEncoding.DXT1
  BlpImagePlugin.BLP_ALPHA_ENCODING_DXT3: BlpImagePlugin.AlphaEncoding.DXT3
  BlpImagePlugin.BLP_ALPHA_ENCODING_DXT5: BlpImagePlugin.AlphaEncoding.DXT5
  FtexImagePlugin.FORMAT_DXT1: FtexImagePlugin.Format.DXT1
  FtexImagePlugin.FORMAT_UNCOMPRESSED: FtexImagePlugin.Format.UNCOMPRESSED
```

----------------------------------------

TITLE: Draw Arc in Pillow ImageDraw
DESCRIPTION: Draws a portion of a circle's outline within a specified bounding box. Angles are measured clockwise from 3 o'clock. This method is suitable for creating curved lines or segments of circles.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
ImageDraw.arc(xy, start, end, fill=None, width=0)
  Parameters:
    xy: Two points to define the bounding box. Sequence of [(x0, y0), (x1, y1)] or [x0, y0, x1, y1], where x1 >= x0 and y1 >= y0.
    start: Starting angle, in degrees. Angles are measured from 3 o'clock, increasing clockwise.
    end: Ending angle, in degrees.
    fill: Color to use for the arc.
    width: The line width, in pixels. (versionadded: 5.3.0)
```

----------------------------------------

TITLE: Pillow and PIL Coexistence Restriction
DESCRIPTION: As of Pillow 1.0.0, Pillow and the original PIL (Python Imaging Library) cannot co-exist in the same environment. Users must uninstall PIL before installing Pillow to prevent conflicts and ensure proper functionality.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_52

LANGUAGE: APIDOC
CODE:
```
Pillow and PIL

.. versionremoved:: 1.0.0

Pillow and PIL cannot co-exist in the same environment.
Before installing Pillow, please uninstall PIL.
```

----------------------------------------

TITLE: Add `textlength` and `getlength` for text measurement in Pillow 8.0.0
DESCRIPTION: Pillow 8.0.0 introduces `ImageDraw.textlength` and `FreeTypeFont.getlength` methods. These functions provide the exact advance length of text with 1/64 pixel precision, useful for precise text layout like word-wrapping.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_11

LANGUAGE: APIDOC
CODE:
```
ImageDraw.textlength method:
  Description: Returns the exact advance length of text with 1/64 pixel precision.
FreeTypeFont.getlength method:
  Description: Returns the exact advance length of text with 1/64 pixel precision.
```

----------------------------------------

TITLE: Accessing TIFF EXIF and GPS IFDs via getexif()
DESCRIPTION: API documentation demonstrating how to access TIFF `tag_v2` data, including GPS and EXIF IFDs, using the updated `getexif()` method in Pillow.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.3.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
TIFF getexif()
  Description: TIFF tag_v2 data can now be accessed through PIL.Image.Image.getexif.
  Usage:
    im.getexif().get_ifd(0x8825) # Access GPS IFD
    im.getexif().get_ifd(0x8769) # Access EXIF IFD
```

----------------------------------------

TITLE: Pillow Image.save Method for TIFF
DESCRIPTION: Documents the keyword arguments available for the `Image.save` method when saving TIFF files. These arguments control multi-frame saving, metadata inclusion, compression, quality, and various TIFF header fields.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_60

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save(filename, format="TIFF", **kwargs)
  Keyword Arguments for TIFF Saving:
    save_all: bool
      Description: If true, or if append_images is not empty, Pillow will save all frames of the image to a multiframe tiff document.
      Version Added: 3.4.0
    append_images: list[PIL.Image.Image]
      Description: A list of images to append as additional frames. Each image can be single or multiframe.
      Version Added: 4.2.0
    tiffinfo: PIL.TiffImagePlugin.ImageFileDirectory_v2 | dict
      Description: Object or dict containing tiff tags and values. Field type is autodetected for Numeric and string values; other types require ImageFileDirectory_v2 with tagtype. Rational values should use IFDRational. ImageFileDirectory_v1 is deprecated. Supports signed types and multiple values (as tuple with matching tagtype).
      Version Added: 2.3.0 (IFDRational: 3.1.0, ImageFileDirectory_v1 deprecated: 5.4.0, Signed types/multiple values: 6.1.0)
    exif: (Alias for tiffinfo)
      Description: Alternate keyword to "tiffinfo", for consistency with other formats.
      Version Added: 8.4.0
    big_tiff: bool
      Description: If true, the image will be saved as a BigTIFF.
      Version Added: 11.1.0
    compression: str | None
      Description: Desired compression method. Valid only with libtiff installed.
      Valid values: None, "group3", "group4", "jpeg", "lzma", "packbits", "tiff_adobe_deflate", "tiff_ccitt", "tiff_lzw", "tiff_raw_16", "tiff_sgilog", "tiff_sgilog24", "tiff_thunderscan", "webp", "zstd"
    quality: int (0-100)
      Description: Image quality for JPEG compression. Default is 75.
      Version Added: 6.1.0
    description: str
      Description: String for the TIFF header field.
    software: str
      Description: String for the TIFF header field.
    date_time: str
      Description: String for the TIFF header field.
    artist: str
      Description: String for the TIFF header field.
    copyright: str
      Description: String for the TIFF header field.
    icc_profile: bytes
      Description: The ICC Profile to include in the saved file.
    resolution_unit: int
      Description: An integer. 1 for no unit, 2 for inches and 3 for centimeters.
    resolution: int | float
      Description: Either an integer or a float, used for both the x and y resolution.
    x_resolution: int | float
      Description: Either an integer or a float for the x resolution.
    y_resolution: int | float
      Description: Either an integer or a float for the y resolution.
    dpi: tuple[int, int]
      Description: A tuple of (x_resolution, y_resolution), with inches as the resolution unit. X and Y resolutions will be rounded to the nearest integer.
```

----------------------------------------

TITLE: Pillow: Text Stroking with ImageDraw and ImageFont
DESCRIPTION: Demonstrates the new "stroke_width" and "stroke_fill" arguments for text drawing operations in Pillow. This example shows how to apply stroking to ImageFont.getsize, ImageDraw.textsize, and ImageDraw.text methods, allowing text to be outlined with a specified width and color.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.2.0.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/FreeMono.ttf", 40)
font.getsize_multiline("A", stroke_width=2)
font.getsize("ABC\nAaaa", stroke_width=2)

im = Image.new("RGB", (100, 100))
draw = ImageDraw.Draw(im)
draw.textsize("A", font, stroke_width=2)
draw.multiline_textsize("ABC\nAaaa", font, stroke_width=2)
draw.text((10, 10), "A", "#f00", font, stroke_width=2, stroke_fill="#0f0")
draw.multiline_text((10, 10), "A\nB", "#f00", font,
                        stroke_width=2, stroke_fill="#0f0")
```

----------------------------------------

TITLE: Pillow API Addition: features.check_feature and version_feature for MozJPEG
DESCRIPTION: Documents the new `features.check_feature("mozjpeg")` and `features.version_feature("mozjpeg")` methods to programmatically check for MozJPEG support and its version.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.2.1.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
API Addition: PIL.features module
  Method: features.check_feature(feature_name: str)
    Description: Checks if a specific feature (e.g., "mozjpeg") is enabled in the Pillow build.
    Returns: bool (True if enabled, False otherwise)
  Method: features.version_feature(feature_name: str)
    Description: Returns the version string of a specific feature (e.g., "mozjpeg") if enabled.
    Returns: str (version string, e.g., "4.1.1") or None (if feature not enabled)
```

LANGUAGE: python
CODE:
```
from PIL import features
features.check_feature("mozjpeg")  # True or False
features.version_feature("mozjpeg")  # "4.1.1" for example, or None
```

----------------------------------------

TITLE: Save TIFF with ICC Profile in Pillow
DESCRIPTION: Pillow now allows specifying an ICC profile when saving TIFF files, similar to JPEG, PNG, and WebP. This is achieved by passing the `icc_profile` keyword argument to the `save` method.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.2.0.rst#_snippet_7

LANGUAGE: Python
CODE:
```
im.save("out.tif", icc_profile=...)
```

----------------------------------------

TITLE: Add `ImageDraw.regular_polygon` method in Pillow 8.0.0
DESCRIPTION: Pillow 8.0.0 introduces `ImageDraw.regular_polygon`, a new method for drawing regular polygons. It takes a bounding circle (center and radius) and the number of sides, simplifying the creation of geometric shapes.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
ImageDraw.regular_polygon method:
  Description: Draws a regular polygon of n_sides, inscribed in a bounding_circle.
  Example: draw.regular_polygon(((100, 100), 50), 5)
    Draws a pentagon centered at (100, 100) with a polygon radius of 50.
```

----------------------------------------

TITLE: Update Image Module Import for Pillow Compatibility
DESCRIPTION: When porting PIL-based code to Pillow, the `Image` module must be imported from the `PIL` namespace instead of the global namespace to ensure compatibility. This snippet illustrates the 'before' and 'after' import statements.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/porting.rst#_snippet_0

LANGUAGE: Python
CODE:
```
import Image
```

LANGUAGE: Python
CODE:
```
from PIL import Image
```

----------------------------------------

TITLE: Pillow Resampling Filter: HAMMING
DESCRIPTION: The HAMMING filter produces a sharper image than BILINEAR and avoids local dislocations seen with BOX. It is restricted to `resize` and `thumbnail` methods.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_11

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Resampling.HAMMING
Description: Produces a sharper image than Resampling.BILINEAR, doesn't have dislocations on local level like with Resampling.BOX.
This filter can only be used with the PIL.Image.Image.resize and PIL.Image.Image.thumbnail methods.
```

----------------------------------------

TITLE: Pillow ExifTags Enums API Reference
DESCRIPTION: The `TAGS` and `GPSTAGS` data from `PIL.ExifTags` are now exposed as `enum.IntEnum` classes: `PIL.ExifTags.Base` and `PIL.ExifTags.GPS`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.3.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.ExifTags.Base (enum.IntEnum)
  Description: Provides EXIF tag data as an IntEnum class.
  Source: Data from PIL.ExifTags.TAGS

PIL.ExifTags.GPS (enum.IntEnum)
  Description: Provides GPS tag data as an IntEnum class.
  Source: Data from PIL.ExifTags.GPSTAGS
```

----------------------------------------

TITLE: Accessing Base EXIF Tag Values with PIL.ExifTags.Base
DESCRIPTION: Demonstrates how to use the PIL.ExifTags.Base enum to retrieve integer values for common EXIF tags and their corresponding descriptive names. This enum provides a clear mapping between numerical EXIF tag IDs and human-readable names, simplifying EXIF data interpretation.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ExifTags.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.ExifTags.Base: enum.IntEnum
  Provides constants and clear-text names for base EXIF tags.
```

LANGUAGE: python
CODE:
```
from PIL.ExifTags import Base
Base.ImageDescription.value
270
Base(270).name
'ImageDescription'
```

----------------------------------------

TITLE: Python File Codec API for Pillow
DESCRIPTION: Details the API for creating custom Python-based image decoders and encoders in Pillow. It outlines the base classes (`PyDecoder`, `PyEncoder`), registration methods, and the three stages in the lifetime of a Python-based file codec: setup, transforming (via `decode` or `encode`), and cleanup.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/writing-your-own-image-plugin.rst#_snippet_13

LANGUAGE: APIDOC
CODE:
```
Base Classes:
  PIL.ImageFile.PyDecoder: Base class for Python decoders.
  PIL.ImageFile.PyEncoder: Base class for Python encoders.

Registration Methods:
  PIL.Image.register_decoder(format_name, decoder_class): Registers a Python decoder class.
  PIL.Image.register_encoder(format_name, encoder_class): Registers a Python encoder class.

Codec Instance Lifecycle (Methods to Override/Properties):
  decode(self, buffer):
    Purpose: Interprets a buffer of data to populate the image.
    Behavior:
      - Called repeatedly with a buffer of data.
      - If `_pulls_fd` property is `True`: Called only once; `self.fd` provides access to the file-like object.
    Output: Use `set_as_raw(mode, size, data)` to populate the image data.
  encode(self, size):
    Purpose: Outputs data of a given size.
    Behavior:
      - Called repeatedly with the size of data to be output.
      - If `_pushes_fd` property is `True`: Called only once; transforms the entire tile.
  cleanup(self):
    Purpose: Cleans up any resources used by the codec.
    Behavior: Called once the transformation is complete or on error.
    Note: If `_pulls_fd` or `_pushes_fd` is `True`, cleanup might be handled at the end of `decode` or `encode`.

Properties:
  _pulls_fd (bool): If set to `True`, the `decode` method is called once, and `self.fd` can be used to access the file-like object.
  _pushes_fd (bool): If set to `True`, the `encode` method is called once for the entire tile transformation.
  self.fd: File-like object available within `decode` when `_pulls_fd` is `True`.
```

----------------------------------------

TITLE: Blur Image using PIL ImageFilter
DESCRIPTION: This code snippet demonstrates how to blur an input image using a filter from the `ImageFilter` module provided by the Pillow library. It opens an image and applies a blur filter to it.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_6

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageFilter

with Image.open("hopper.jpg") as im:

    # Blur the input image using the filter ImageFilter.BLUR
    im_blurred = im.filter(filter=ImageFilter.BLUR)
```

----------------------------------------

TITLE: Draw Regular Polygon with Pillow ImageDraw
DESCRIPTION: Draws a regular polygon inscribed in a bounding circle, with a specified number of sides and rotation. It allows customization of fill, outline, and line width.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_18

LANGUAGE: APIDOC
CODE:
```
ImageDraw.regular_polygon(bounding_circle, n_sides, rotation=0, fill=None, outline=None, width=1)
  bounding_circle: The bounding circle is a tuple defined by a point and radius. (e.g. (x, y, r) or ((x, y), r)). The polygon is inscribed in this circle.
  n_sides: Number of sides (e.g. 3 for a triangle, 6 for a hexagon).
  rotation: Apply an arbitrary rotation to the polygon (e.g. 90, applies a 90 degree rotation).
  fill: Color to use for the fill.
  outline: Color to use for the outline.
  width: The line width, in pixels.
```

----------------------------------------

TITLE: Pillow API Change: append_images save_all Default
DESCRIPTION: Describes the API change where `save_all` is no longer strictly required for `append_images`. It now defaults to `True` if `append_images` is not empty and the format supports multiple frames.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.2.1.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
API Change: append_images behavior
  Previous Requirement: save_all was required to use append_images.
  New Behavior: save_all will default to True if append_images is not empty and the format supports saving multiple frames.
```

LANGUAGE: python
CODE:
```
im.save("out.gif", append_images=ims)
```

----------------------------------------

TITLE: Adjust Image Sharpness with PIL.ImageEnhance
DESCRIPTION: This Python example demonstrates how to use the `PIL.ImageEnhance.Sharpness` class to programmatically vary and display the sharpness of an image. It iterates through different enhancement factors, applying each to the image and showing the result.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageEnhance.rst#_snippet_0

LANGUAGE: python
CODE:
```
from PIL import ImageEnhance

enhancer = ImageEnhance.Sharpness(image)

for i in range(8):
    factor = i / 4.0
    enhancer.enhance(factor).show(f"Sharpness {factor:f}")
```

----------------------------------------

TITLE: Pillow API Addition: Arrow Data Exchange Integration
DESCRIPTION: Documents the new `Image.fromarrow` method for creating images from Arrow arrays (zero-copy) and the ability to convert Pillow images to Arrow arrays using `pa.array(im)`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.2.1.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
API Addition: Arrow Data Exchange Integration
  Method: PIL.Image.fromarrow(arrow_array, mode: str, size: tuple)
    Description: Creates a Pillow Image from an object exporting the arrow_c_array interface protocol with zero-copy shared memory.
    Parameters:
      arrow_array: An object exporting the arrow_c_array interface.
      mode: The image mode (e.g., 'RGBA').
      size: A tuple (width, height) for the image dimensions.
  Conversion: pyarrow.array(pil_image_object)
    Description: Converts a Pillow Image object into a PyArrow array.
```

LANGUAGE: python
CODE:
```
from PIL import Image
import pyarrow as pa
arr = pa.array([0]*(5*5*4), type=pa.uint8())
im = Image.fromarrow(arr, 'RGBA', (5, 5))
```

LANGUAGE: python
CODE:
```
from PIL import Image
import pyarrow as pa
im = Image.open('hopper.jpg')
arr = pa.array(im)
```

----------------------------------------

TITLE: Specify Font Size for Default Font in Pillow
DESCRIPTION: Pillow's default font can now be drawn at chosen font sizes using the `size` or `font_size` arguments in `ImageFont.load_default()` and `draw.text()` methods. This functionality is available when FreeType support is present, utilizing a version of Aileron Regular for scalable text rendering.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.1.0.rst#_snippet_6

LANGUAGE: Python
CODE:
```
ImageFont.load_default(size=24)
draw.text((0, 0), "test", font_size=24)
draw.textlength((0, 0), "test", font_size=24)
draw.textbbox((0, 0), "test", font_size=24)
draw.multiline_text((0, 0), "test", font_size=24)
draw.multiline_textbbox((0, 0), "test", font_size=24)
```

----------------------------------------

TITLE: Pillow ImageFilter Module API Reference
DESCRIPTION: Comprehensive API documentation for the `PIL.ImageFilter` module, detailing predefined filter constants and abstract/concrete filter classes with their methods and usage.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageFilter.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Predefined Filters:
- BLUR
- CONTOUR
- DETAIL
- EDGE_ENHANCE
- EDGE_ENHANCE_MORE
- EMBOSS
- FIND_EDGES
- SHARPEN
- SMOOTH
- SMOOTH_MORE

Classes:
- PIL.ImageFilter.Color3DLUT
- PIL.ImageFilter.BoxBlur
- PIL.ImageFilter.GaussianBlur
- PIL.ImageFilter.UnsharpMask
- PIL.ImageFilter.Kernel
- PIL.ImageFilter.RankFilter
- PIL.ImageFilter.MedianFilter
- PIL.ImageFilter.MinFilter
- PIL.ImageFilter.MaxFilter
- PIL.ImageFilter.ModeFilter

class Filter:
  description: An abstract mixin used for filtering images (for use with PIL.Image.Image.filter).
  methods:
    filter(self, image):
      description: Applies a filter to a single-band image, or a single band of an image.
      returns: A filtered copy of the image.

class MultibandFilter:
  description: An abstract mixin used for filtering multi-band images (for use with PIL.Image.Image.filter).
  methods:
    filter(self, image):
      description: Applies a filter to a multi-band image.
      returns: A filtered copy of the image.
```

----------------------------------------

TITLE: Opening Image Directly from a URL (Pillow)
DESCRIPTION: Explains how to open an image by providing its URL. It uses `urllib.request.urlopen` to fetch the image data, which is then passed to `PIL.Image.open` for processing.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_33

LANGUAGE: Python
CODE:
```
from PIL import Image
from urllib.request import urlopen
url = "https://python-pillow.github.io/assets/images/pillow-logo.png"
img = Image.open(urlopen(url))
```

----------------------------------------

TITLE: Pillow Resampling Filter: BILINEAR
DESCRIPTION: The BILINEAR filter calculates output pixel values using linear interpolation. For resizing, it interpolates across all contributing pixels; for other transformations, it uses a 2x2 environment.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_10

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Resampling.BILINEAR
Description: For resize calculate the output pixel value using linear interpolation on all pixels that may contribute to the output value.
For other transformations linear interpolation over a 2x2 environment in the input image is used.
```

----------------------------------------

TITLE: Define a Custom Image Plugin for Pillow (SpamImagePlugin)
DESCRIPTION: This Python code defines a custom image plugin for Pillow, `SpamImageFile`, which handles a simple 'SPAM' raster image format. It includes an `_accept` function to identify the file by its prefix, an `_open` method to parse the header and set image metadata (size, mode), and registers the plugin with Pillow. The plugin supports bi-level, grayscale, and 24-bit RGB images based on header information.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/writing-your-own-image-plugin.rst#_snippet_0

LANGUAGE: python
CODE:
```
from PIL import Image, ImageFile


def _accept(prefix: bytes) -> bool:
    return prefix.startswith(b"SPAM")


class SpamImageFile(ImageFile.ImageFile):

    format = "SPAM"
    format_description = "Spam raster image"

    def _open(self) -> None:

        header = self.fp.read(128).split()

        # size in pixels (width, height)
        self._size = int(header[1]), int(header[2])

        # mode setting
        bits = int(header[3])
        if bits == 1:
            self._mode = "1"
        elif bits == 8:
            self._mode = "L"
        elif bits == 24:
            self._mode = "RGB"
        else:
            msg = "unknown number of bits"
            raise SyntaxError(msg)

        # data descriptor
        self.tile = [ImageFile._Tile("raw", (0, 0) + self.size, 128, (self.mode, 0, 1))]


Image.register_open(SpamImageFile.format, SpamImageFile, _accept)

Image.register_extensions(
    SpamImageFile.format,
    [
        ".spam",
        ".spa",  # DOS version
    ],
)
```

----------------------------------------

TITLE: Pillow ImageOps.pad Method Addition
DESCRIPTION: The new `ImageOps.pad` method allows padding images to a requested aspect ratio and size. It fills new space with a specified `color` and positions the original image using a `centering` argument, complementing `ImageOps.fit`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.3.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
ImageOps.pad(image, size, method=Image.Resampling.BICUBIC, color=0, centering=(0.5, 0.5))

Parameters:
  image (Image.Image): The input image.
  size (tuple): The desired output size (width, height).
  method (int, optional): Resampling filter. Defaults to Image.Resampling.BICUBIC.
  color (color, optional): Color to fill the new space. Defaults to 0 (black).
  centering (tuple, optional): A 2-tuple (x, y) for positioning the image. Defaults to (0.5, 0.5) (center).
```

----------------------------------------

TITLE: Opening Image from In-Memory Binary Data (Pillow)
DESCRIPTION: Shows how to load an image from a byte buffer in memory using `io.BytesIO` with `PIL.Image.open`. This method is ideal for handling images that are not stored as physical files but as raw binary data.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_32

LANGUAGE: Python
CODE:
```
from PIL import Image
import io

im = Image.open(io.BytesIO(buffer))
```

----------------------------------------

TITLE: Deprecated Pillow Font Size and Offset Methods
DESCRIPTION: Lists several font size and offset calculation functions removed in Pillow 10.0.0 (deprecated in 9.2.0), providing their modern `getbbox` and `getlength` method equivalents.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_27

LANGUAGE: APIDOC
CODE:
```
Font size and offset methods removed in Pillow 10.0.0 (deprecated 9.2.0):

Removed                                                         Use instead
=============================================================== =============================================================================================================
FreeTypeFont.getsize() and FreeTypeFont.getoffset()             .FreeTypeFont.getbbox and .FreeTypeFont.getlength
FreeTypeFont.getsize_multiline()                            .ImageDraw.multiline_textbbox
ImageFont.getsize()                                         .ImageFont.getbbox and .ImageFont.getlength
TransposedFont.getsize()                                    .TransposedFont.getbbox and .TransposedFont.getlength
ImageDraw.textsize() and ImageDraw.multiline_textsize()     .ImageDraw.textbbox, .ImageDraw.textlength and .ImageDraw.multiline_textbbox
ImageDraw2.Draw.textsize()                                  .ImageDraw2.Draw.textbbox and .ImageDraw2.Draw.textlength
```

----------------------------------------

TITLE: Pillow ImageDraw Text and Multiline Text Enhancements
DESCRIPTION: Multiple issues in `ImageDraw.text` and `ImageDraw.multiline_text` methods, which sometimes caused unexpected text alignment, have been resolved. The `align` parameter of `ImageDraw.multiline_text` now provides improved results in certain scenarios. Additionally, TrueType fonts with embedded bitmaps are now supported.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_13

LANGUAGE: APIDOC
CODE:
```
PIL.ImageDraw.ImageDraw.text(xy, text, fill=None, font=None, anchor=None, spacing=0, align="left", direction=None, features=None, language=None, stroke_width=0, stroke_fill=None, embedded_color=False)
PIL.ImageDraw.ImageDraw.multiline_text(xy, text, fill=None, font=None, anchor=None, spacing=0, align="left", direction=None, features=None, language=None, stroke_width=0, stroke_fill=None, embedded_color=False)

Key updates:
- Improved 'align' parameter behavior for multiline_text
- Support for TrueType fonts with embedded bitmaps
```

----------------------------------------

TITLE: Pillow ImageFont.getsize_multiline for Multiline Text Size
DESCRIPTION: A new method, `ImageFont.getsize_multiline`, has been introduced to accurately calculate the size (width and height) required to render multiline text using a specified font. This is essential for proper text layout and rendering.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.2.0.rst#_snippet_4

LANGUAGE: Python
CODE:
```
from PIL import ImageFont

# Assuming 'font' is a loaded ImageFont object
# font = ImageFont.truetype("arial.ttf", 20)

# Example of getting the size of multiline text
text_size = font.getsize_multiline("ABC\nAaaa")
print(f"Multiline text size: {text_size}")

# API Description for ImageFont.getsize_multiline
# ImageFont.getsize_multiline(text: str) -> Tuple[int, int]
#   text: The multiline string for which to calculate the size. Newlines (\n) are recognized.
#   Returns: A tuple (width, height) representing the dimensions needed to render the text.
```

----------------------------------------

TITLE: Mapping EXIF Tags to Names with PIL.ExifTags.TAGS Dictionary
DESCRIPTION: Explains how to use the PIL.ExifTags.TAGS dictionary to map 16-bit integer EXIF tag enumerations to their descriptive string names. This dictionary provides a convenient lookup for understanding the meaning of numerical EXIF tags.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ExifTags.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.ExifTags.TAGS: dict
  Maps 16-bit integer EXIF tag enumerations to descriptive string names.
```

LANGUAGE: python
CODE:
```
from PIL.ExifTags import TAGS
TAGS[0x010e]
'ImageDescription'
```

----------------------------------------

TITLE: Instantiating ImageStat for Faster Statistics
DESCRIPTION: This snippet demonstrates the instantiation of the `ImageStat.Stat` object in Pillow. Recent optimizations have made subsequent access to attributes like `count` and `extrema` significantly faster after the `Stat` object is created from an image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.2.0.rst#_snippet_14

LANGUAGE: Python
CODE:
```
st = ImageStat.Stat(im)
```

----------------------------------------

TITLE: PIL.ImageFont Module Functions Reference
DESCRIPTION: Reference documentation for functions available in the PIL.ImageFont module for loading and managing fonts.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageFont.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Functions:
  PIL.ImageFont.load(filename)
  PIL.ImageFont.load_path(filename)
  PIL.ImageFont.truetype(font=None, size=10, index=0, encoding="", layout_engine=None)
  PIL.ImageFont.load_default()
  PIL.ImageFont.load_default_imagefont()
```

----------------------------------------

TITLE: Create macOS Universal2 Pillow Binary
DESCRIPTION: Steps to download x86-64 and arm64 Pillow wheels and combine them into a universal2 binary using the `delocate` tool on macOS. This allows a single Pillow installation to run natively on both Intel and Apple Silicon Macs.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/basic-installation.rst#_snippet_2

LANGUAGE: bash
CODE:
```
python3 -m pip download --only-binary=:all: --platform macosx_10_10_x86_64 Pillow
python3 -m pip download --only-binary=:all: --platform macosx_11_0_arm64 Pillow
python3 -m pip install delocate
```

LANGUAGE: python
CODE:
```
from delocate.fuse import fuse_wheels
fuse_wheels('Pillow-9.4.0-2-cp39-cp39-macosx_10_10_x86_64.whl', 'Pillow-9.4.0-cp39-cp39-macosx_11_0_arm64.whl', 'Pillow-9.4.0-cp39-cp39-macosx_11_0_universal2.whl')
```

----------------------------------------

TITLE: Retrieve Comprehensive Pillow Feature Information
DESCRIPTION: This function provides a detailed dictionary containing information about all detected Pillow features, modules, and codecs, including their availability status and version numbers where applicable. It offers a holistic view of Pillow's capabilities on the current system.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/features.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.features.pilinfo() -> dict
  Returns: A dictionary mapping feature/module/codec names to their status and version information.
```

----------------------------------------

TITLE: Writing XMP Data to JPEG and MPO Images in Pillow
DESCRIPTION: Pillow 11.1.0 revised XMP data handling. XMP data is no longer automatically retained from opened images. To write XMP data, use the `xmp` argument for JPEG files or the `encoderinfo` dictionary for the second frame of MPO images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.1.0.rst#_snippet_1

LANGUAGE: Python
CODE:
```
im.save("out.jpg", xmp=b"test")
```

LANGUAGE: Python
CODE:
```
second_im.encoderinfo = {"xmp": b"test"}
im.save("out.mpo", save_all=True, append_images=[second_im])
```

----------------------------------------

TITLE: Draw Points (Pixels) in Pillow ImageDraw
DESCRIPTION: Draws individual pixels at the specified coordinates. This method is used for drawing single points or a collection of discrete points on an image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_16

LANGUAGE: APIDOC
CODE:
```
ImageDraw.point(xy, fill=None)
  Parameters:
    xy: Sequence of either 2-tuples like [(x, y), (x, y), ...] or numeric values like [x, y, x, y, ...].
    fill: Color to use for the point.
```

----------------------------------------

TITLE: Draw Text with Middle-Baseline Anchor in Pillow
DESCRIPTION: This Python example demonstrates how to use the `anchor` parameter with `PIL.ImageDraw.Draw.text` to align text. It sets the anchor to 'ms' (middle-baseline), positioning the text so its middle-baseline point aligns with the specified `xy` coordinates (100, 100) on a white image with gray crosshairs.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/text-anchors.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/NotoSans-Regular.ttf", 48)
im = Image.new("RGB", (200, 200), "white")
d = ImageDraw.Draw(im)
d.line(((0, 100), (200, 100)), "gray")
d.line(((100, 0), (100, 200)), "gray")
d.text((100, 100), "Quick", fill="black", anchor="ms", font=font)
```

----------------------------------------

TITLE: Check Availability of Pillow Components
DESCRIPTION: These functions allow developers to programmatically verify if specific Pillow modules, codecs, or features are available on the system. Availability can depend on compile-time configurations or run-time library presence. For codecs, support is primarily checked during Pillow compilation, with run-time checks for version numbers.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/features.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.features.check(name: str) -> bool
  name: The name of a general feature, module, or codec (e.g., 'webp', 'freetype2', 'jpg').
  Returns: True if the component is available, False otherwise.
```

LANGUAGE: APIDOC
CODE:
```
PIL.features.check_module(module_name: str) -> bool
  module_name: The name of a specific module (e.g., 'tkinter', 'freetype2', 'pil').
  Returns: True if the module is available, False otherwise.
```

LANGUAGE: APIDOC
CODE:
```
PIL.features.check_codec(codec_name: str) -> bool
  codec_name: The name of a specific image codec (e.g., 'jpg', 'zlib', 'libtiff'). Support is typically compile-time.
  Returns: True if the codec is available, False otherwise.
```

LANGUAGE: APIDOC
CODE:
```
PIL.features.check_feature(feature_name: str) -> bool
  feature_name: The name of a specific Pillow feature (e.g., 'libjpeg_turbo', 'raqm', 'libimagequant'). Some are compile-time only.
  Returns: True if the feature is available, False otherwise.
```

----------------------------------------

TITLE: Pillow API Addition: JPEG Saving Options
DESCRIPTION: New options have been added to `Image.save` for JPEG files, including `keep_rgb` to preserve RGB color space, `restart_marker_blocks` and `restart_marker_rows` for restart markers, and `streamtype=1` for tables-only output.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.2.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Image.save(filename: str, format: str = "JPEG", **options)
  keep_rgb: bool = False
    If True, saves RGB images in RGB color space instead of YCbCr.
    Raises OSError if subsampling is used with keep_rgb=True on RGB images.
  restart_marker_blocks: int = None
    Emit restart marker after this many MCU blocks.
  restart_marker_rows: int = None
    Emit restart marker after this many MCU rows.
  streamtype: int = 0
    Set to 1 to output only quantization and Huffman tables (tables-only stream).
```

----------------------------------------

TITLE: Pillow PIL.Image.Image.save Method WebP Options
DESCRIPTION: Documents the various options available when saving images in WebP format using Pillow's `PIL.Image.Image.save` method, including general compression and animation-specific parameters.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_62

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save(filename, format=None, **options)
  Options for WebP format:
    lossless: bool - If present and true, instructs the WebP writer to use lossless compression.
    quality: int (0-100) - For lossy, 0 gives smallest size, 100 largest. For lossless, effort (0=fast, 100=slow-best). Defaults to 80.
    alpha_quality: int (0-100) - For lossy compression only. 0 gives smallest size, 100 is lossless. Defaults to 100.
    method: int (0-6) - Quality/speed trade-off (0=fast, 6=slower-better). Defaults to 4.
    exact: bool - If true, preserve transparent RGB values. Otherwise, discard invisible RGB values for better compression. Defaults to false.
    icc_profile: bytes - The ICC Profile to include in the saved file.
    exif: bytes - The exif data to include in the saved file.
    xmp: bytes - The XMP data to include in the saved file.

  Options for Saving Sequences (Animated WebP, requires save_all=True or append_images):
    append_images: list[PIL.Image.Image] - A list of images to append as additional frames.
    duration: int | list[int] - The display duration of each frame, in milliseconds. Pass a single integer for a constant duration, or a list or tuple to set the duration for each frame separately.
    loop: int - Number of times to repeat the animation. Defaults to [0 = infinite].
    background: tuple[int, int, int, int] - Background color of the canvas, as an RGBA tuple with values in the range of (0-255).
    minimize_size: bool - If true, minimize the output size (slow). Implicitly disables key-frame insertion.
    kmin: int - Minimum distance between consecutive key frames in the output. The library may insert some key frames as needed to satisfy this criteria. Note that these conditions should hold: kmax > kmin and kmin >= kmax / 2 + 1. Also, if kmax <= 0, then key-frame insertion is disabled; and if kmax == 1, then all frames will be key-frames (kmin value does not matter for these special cases).
    kmax: int - Maximum distance between consecutive key frames in the output. The library may insert some key frames as needed to satisfy this criteria. Note that these conditions should hold: kmax > kmin and kmin >= kmax / 2 + 1. Also, if kmax <= 0, then key-frame insertion is disabled; and if kmax == 1, then all frames will be key-frames (kmin value does not matter for these special cases).
    allow_mixed: bool - If true, use mixed compression mode; the encoder heuristically chooses between lossy and lossless for each frame.
```

----------------------------------------

TITLE: Deprecation of PyAccess and Image.USE_CFFI_ACCESS
DESCRIPTION: PyAccess and `Image.USE_CFFI_ACCESS` are deprecated and will be removed in Pillow 11.0.0. Pillow's C API is now the default and faster option on PyPy, replacing PyAccess.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Deprecated: PyAccess, Image.USE_CFFI_ACCESS
Reason: C API is now default and faster on PyPy.
Removal Target: Pillow 11.0.0 (2024-10-15)
```

----------------------------------------

TITLE: Pillow Image.show Command Parameter Deprecation
DESCRIPTION: The `command` parameter for `PIL.Image.Image.show` has been deprecated in Pillow 7.2.0 and will be removed in a future release. Users should now use a subclass of `PIL.ImageShow.Viewer` for custom display behavior.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.2.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.show:
  - Deprecated parameter: `command`
  - Recommended alternative: Use a subclass of `PIL.ImageShow.Viewer`.
```

----------------------------------------

TITLE: Pillow Image Coordinate System
DESCRIPTION: Explains Pillow's Cartesian pixel coordinate system, where the origin (0,0) is located at the upper-left corner of the image. It also defines how coordinates are passed as 2-tuples and rectangles as 4-tuples.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Pillow Coordinate System:
  Origin: (0,0) at the upper left corner of the image.
  Pixel Center: The center of a pixel addressed as (0,0) is at (0.5, 0.5).
  Coordinates: Represented as 2-tuples (x, y).
  Rectangles: Represented as 4-tuples (x1, y1, x2, y2), where (x1, y1) is the upper left corner and (x2, y2) is the lower right corner.
```

----------------------------------------

TITLE: Pillow Image Orientation via EXIF Tag
DESCRIPTION: Describes the EXIF orientation tag, a common element found in JPG and TIFF images within the `PIL.Image.Image.info` attribute. This tag provides instructions on how the image data should be oriented.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.info["exif"]["Orientation"]
  Description: An EXIF tag found in JPG and TIFF images that provides instructions on how the image data should be oriented (e.g., rotated or flipped).
  Location: Stored within the 'info' dictionary, typically under an 'exif' key.
```

----------------------------------------

TITLE: Pillow Multi-frame TIFF Navigation (seek, tell)
DESCRIPTION: Describes how to navigate multi-frame TIFF images using the `seek` and `tell` methods. `seek` takes a frame number (0 to `n_frames - 1`), and `tell` returns the current frame number. Seeking past the last frame raises an `EOFError`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_59

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.seek(frame: int)
  Description: Seeks to the specified frame number within the image file. Frames are 0-indexed.
  Parameters:
    frame: The 0-indexed frame number to seek to.
  Raises: EOFError if seeking after the last frame.
PIL.Image.Image.tell() -> int
  Description: Returns the current frame number within the image file.
Usage Example:
  im.seek(im.tell() + 1) # Seek to the next frame
```

----------------------------------------

TITLE: Enhancing Image Contrast with Pillow
DESCRIPTION: Shows how to use the `PIL.ImageEnhance` module to adjust image properties. Specifically, it demonstrates enhancing contrast by creating an `ImageEnhance.Contrast` object and applying an enhancement factor.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_25

LANGUAGE: python
CODE:
```
from PIL import ImageEnhance

enh = ImageEnhance.Contrast(im)
enh.enhance(1.3).show("30% more contrast")
```

----------------------------------------

TITLE: Migrating Font Size and Offset Calculation in Pillow
DESCRIPTION: This snippet demonstrates the migration path for font and drawing methods used to calculate text size and offset. It shows the deprecated methods (e.g., `getsize`, `getoffset`) and their recommended replacements (`getbbox`, `getlength`, `multiline_textbbox`) introduced in Pillow 9.2.0 for more accurate text measurement.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.2.0.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
width, height = font.getsize("Hello world")
left, top = font.getoffset("Hello world")

im = Image.new("RGB", (100, 100))
draw = ImageDraw.Draw(im)
width, height = draw.textsize("Hello world", font)

width, height = font.getsize_multiline("Hello\nworld")
width, height = draw.multiline_textsize("Hello\nworld", font)
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
left, top, right, bottom = font.getbbox("Hello world")
width, height = right - left, bottom - top

im = Image.new("RGB", (100, 100))
draw = ImageDraw.Draw(im)
width = draw.textlength("Hello world", font)

left, top, right, bottom = draw.multiline_textbbox((0, 0), "Hello\nworld", font)
width, height = right - left, bottom - top
```

----------------------------------------

TITLE: PIL.ImageOps General Image Processing Functions and Classes API Reference
DESCRIPTION: API reference for the core image processing functions and classes available in the `PIL.ImageOps` module, covering operations like `autocontrast`, `colorize`, `crop`, `scale`, and the `SupportsGetMesh` class.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageOps.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.ImageOps:
  autocontrast()
  colorize()
  crop()
  scale()
  deform()
  equalize()
  expand()
  flip()
  grayscale()
  invert()
  mirror()
  posterize()
  solarize()
  exif_transpose()

class SupportsGetMesh:
  # Details not provided in source
```

----------------------------------------

TITLE: Removed Image Categories (im.category, Image.NORMAL, etc.)
DESCRIPTION: `im.category` and related attributes (`Image.NORMAL`, `Image.SEQUENCE`, `Image.CONTAINER`) were removed in Pillow 10.0.0. To check if an image has multiple frames, use `getattr(im, "is_animated", False)` instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_21

LANGUAGE: Python
CODE:
```
# Removed attributes:
im.category
Image.NORMAL
Image.SEQUENCE
Image.CONTAINER

# Replacement for checking animation:
getattr(im, "is_animated", False)
```

----------------------------------------

TITLE: Image.is_animated Attribute
DESCRIPTION: A boolean attribute indicating if an image has more than one frame. This attribute is defined by image plugins that support animated images. For robust checking, use `getattr(image, "is_animated", False)` as it may not be present for all images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_13

LANGUAGE: APIDOC
CODE:
```
Image.is_animated
  type: bool
  description: True if this image has more than one frame, or False otherwise.
  usage_example: getattr(image, "is_animated", False)
```

----------------------------------------

TITLE: Supported Color String Formats in PIL.ImageColor
DESCRIPTION: Details the various string formats accepted by PIL.ImageColor for specifying colors, including hexadecimal, RGB, HSL, HSV, and common HTML color names. These formats are used when parsing color inputs.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageColor.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Color String Formats:
  Hexadecimal:
    Format: #rgb, #rgba, #rrggbb, #rrggbbaa
    Description: r=red, g=green, b=blue, a=alpha (opacity). Values are hexadecimal.
    Example: #ff0000 (pure red), #ff0000cc (red with 80% opacity)
  RGB Functions:
    Format: rgb(red, green, blue)
    Description: Color values as integers (0-255) or percentages (0%-100%).
    Example: rgb(255,0,0), rgb(100%,0%,0%) (both pure red)
  HSL Functions:
    Format: hsl(hue, saturation%, lightness%)
    Description: hue (0-360, angle), saturation (0%-100%), lightness (0%-100%).
    Example: hsl(0,100%,50%) (pure red)
  HSV Functions (also HSB):
    Format: hsv(hue, saturation%, value%) or hsb(hue, saturation%, brightness%)
    Description: hue (0-360), saturation (0%-100%), value/brightness (0%-100%).
    Example: hsv(0,100%,100%) (pure red)
  Common HTML Color Names:
    Description: Approximately 140 standard color names (case insensitive), based on X Window system and web browsers.
    Example: red, Red
```

----------------------------------------

TITLE: Measure Text Length with ImageDraw
DESCRIPTION: Documents the `ImageDraw.textlength` method, which calculates the length of a given text string in pixels, considering font, direction, features, and language. It provides details on the return value and considerations for kerning.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_24

LANGUAGE: APIDOC
CODE:
```
ImageDraw.textlength(text, font=None, direction=None, features=None, language=None, embedded_color=False, font_size=None)
  Returns: Length (in pixels with 1/64 precision) of given text when rendered in font with provided direction, features, and language. This is the amount by which following text should be offset. Text bounding box may extend past the length in some fonts, e.g. when using italics or accents. The result is returned as a float; it is a whole number if using basic layout. Note that the sum of two lengths may not equal the length of a concatenated string due to kerning. If you need to adjust for kerning, include the following character and subtract its length.
```

----------------------------------------

TITLE: Specify Separate X and Y Radii for BoxBlur and GaussianBlur
DESCRIPTION: The `PIL.ImageFilter.BoxBlur` and `PIL.ImageFilter.GaussianBlur` filters now allow a sequence of x and y radii to be specified. This enhancement enables asymmetric blurring, providing more granular control over the blur effect in horizontal and vertical directions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.1.0.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from PIL import ImageFilter
ImageFilter.BoxBlur((2, 5))
ImageFilter.GaussianBlur((2, 5))
```

----------------------------------------

TITLE: Save Custom TIFF Tags with Pillow
DESCRIPTION: Demonstrates how to save TIFF images with custom integer, float, and string TIFF tags using the 'tiffinfo' parameter during the save operation. It also shows how to retrieve these custom tags from the saved image using 'im.tag_v2'.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.4.0.rst#_snippet_3

LANGUAGE: python
CODE:
```
im = Image.new("RGB", (200, 100))
custom = {
    37000: 4,
    37001: 4.2,
    37002: "custom tag value",
    37003: u"custom tag value",
    37004: b"custom tag value"
}
im.save("output.tif", tiffinfo=custom)

im2 = Image.open("output.tif")
print(im2.tag_v2[37000])  # 4
print(im2.tag_v2[37002])  # "custom tag value"
print(im2.tag_v2[37004])  # b"custom tag value"
```

----------------------------------------

TITLE: Image.n_frames Attribute
DESCRIPTION: An integer attribute representing the total number of frames in an image. Similar to `is_animated`, this attribute is only defined by plugins supporting animated images. Use `getattr(image, "n_frames", 1)` to safely check the frame count regardless of format support.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Image.n_frames
  type: int
  description: The number of frames in this image.
  usage_example: getattr(image, "n_frames", 1)
```

----------------------------------------

TITLE: Pillow GIF Image.save() Options
DESCRIPTION: API documentation for the `PIL.Image.Image.save` method when writing GIF files, detailing available options such as `save_all`, `append_images`, `disposal`, `duration`, and `loop` for controlling multi-frame saving, animation, and transparency.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_13

LANGUAGE: APIDOC
CODE:
```
im.save(out, save_all=True, append_images=[im1, im2, ...])

Options:
  save_all: If present and true, or if append_images is not empty, all frames of the image will be saved. Otherwise, only the first frame of a multiframe image will be saved.
  append_images: A list of images to append as additional frames. Each of the images in the list can be single or multiframe images. This is supported for AVIF, GIF, PDF, PNG, TIFF and WebP. It is also supported for ICO and ICNS. If images are passed in of relevant sizes, they will be used instead of scaling down the main image.
  include_color_table: Whether or not to include local color table.
  interlace: Whether or not the image is interlaced. By default, it is, unless the image is less than 16 pixels in width or height.
  disposal: Indicates the way in which the graphic is to be treated after being displayed.
    0 - No disposal specified.
    1 - Do not dispose.
    2 - Restore to background color.
    3 - Restore to previous content.
    Pass a single integer for a constant disposal, or a list or tuple to set the disposal for each frame separately.
  palette: Use the specified palette for the saved image. The palette should be a bytes or bytearray object containing the palette entries in RGBRGB... form. It should be no more than 768 bytes. Alternately, the palette can be passed in as a PIL.ImagePalette.ImagePalette object.
  optimize: Whether to attempt to compress the palette by eliminating unused colors (this is only useful if the palette can be compressed to the next smaller power of 2 elements) and whether to mark all pixels that are not new in the next frame as transparent. This is attempted by default, unless a palette is specified as an option or as part of the first image's info dictionary.

Properties from Image.info dictionary (defaults if not passed):
  transparency: Transparency color index.
  duration: The display duration of each frame of the multiframe gif, in milliseconds. Pass a single integer for a constant duration, or a list or tuple to set the duration for each frame separately.
  loop: Integer number of times the GIF should loop. 0 means that it will loop forever. If omitted or None, the image will not loop.
  comment: A comment about the image.
```

----------------------------------------

TITLE: PNG Text Chunk Size Limits for DoS Prevention
DESCRIPTION: Pillow 2.7.0 introduces limits on the decompressed size of text chunks in PNG images to mitigate denial of service attacks. Exceeding these limits will raise a `ValueError`. Individual chunks are limited by `PIL.PngImagePlugin.MAX_TEXT_CHUNK` (1MB default), and total chunks by `PIL.PngImagePlugin.MAX_TEXT_MEMORY` (64MB default). These values can be adjusted programmatically.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/2.7.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.PngImagePlugin.MAX_TEXT_CHUNK: int
  Description: Maximum decompressed size for an individual PNG text chunk.
  Default: 1MB
PIL.PngImagePlugin.MAX_TEXT_MEMORY: int
  Description: Maximum total decompressed size for all PNG text chunks.
  Default: 64MB
ValueError: exception
  Description: Raised if PNG text chunk limits are exceeded.
```

----------------------------------------

TITLE: Enhanced APNG Read and Write Support
DESCRIPTION: Pillow 7.1.0 significantly improves support for Animated Portable Network Graphics (APNG). The PNG plugin now allows reading APNG frame sequences using `Image.Image.seek()` and `ImageSequence.Iterator`, and writing sequences via the `append_images` argument in `Image.save()`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.1.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.seek(frame: int)
  frame: The frame number to seek to.

PIL.ImageSequence.Iterator(im: PIL.Image.Image)
  im: The APNG Image object to iterate through frames.

Image.save(filename: str, format: str = 'PNG', append_images: list = None, **options)
  filename: The path to save the APNG file.
  format: Must be 'PNG'.
  append_images: A list of Image objects to append as frames.
```

----------------------------------------

TITLE: Pillow Resampling Filter: NEAREST
DESCRIPTION: This filter picks the single nearest pixel from the input image, ignoring all others. It is generally used for speed or when pixel-perfect alignment is required.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Resampling.NEAREST
Description: Pick one nearest pixel from the input image. Ignore all other input pixels.
```

----------------------------------------

TITLE: Accept List of Coordinates in PIL.Image.Image.getpixel()
DESCRIPTION: The `PIL.Image.Image.getpixel()` method now accepts a list of coordinates in addition to a tuple, providing more flexibility for specifying pixel locations. This change allows for consistent coordinate handling across different data structures.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.1.0.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from PIL import Image
im = Image.new("RGB", (1, 1))
im.getpixel((0, 0))
im.getpixel([0, 0])
```

----------------------------------------

TITLE: Pillow Image Info Attribute
DESCRIPTION: Explains the `PIL.Image.Image.info` attribute, which is a dictionary object used to attach and retrieve auxiliary information to an image. Its handling during loading and saving depends on the specific file format handler.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.info
  Type: dictionary
  Description: A dictionary object for storing auxiliary image information.
  Behavior: Most file format handlers add properties to this attribute when loading an image, but typically ignore it when saving.
```

----------------------------------------

TITLE: APNG Parameters for Image Saving
DESCRIPTION: Describes the parameters available when saving APNG files using Pillow, including options for looping, frame duration, disposal operations, and blending modes. These parameters can be single values or lists/tuples for per-frame control.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_50

LANGUAGE: APIDOC
CODE:
```
loop:
  Integer number of times to loop this APNG, 0 indicates infinite looping.
  Defaults to 0.
duration:
  Integer (or list or tuple of integers) length of time to display this APNG frame (in milliseconds).
  Defaults to 0.
disposal:
  An integer (or list or tuple of integers) specifying the APNG disposal operation to be used for this frame before rendering the next frame.
  Defaults to 0.
  * 0 (OP_NONE, default) - No disposal is done on this frame before rendering the next frame.
  * 1 (OP_BACKGROUND) - This frame's modified region is cleared to fully transparent black before rendering the next frame.
  * 2 (OP_PREVIOUS) - This frame's modified region is reverted to the previous frame's contents before rendering the next frame.
blend:
  An integer (or list or tuple of integers) specifying the APNG blend operation to be used for this frame before rendering the next frame.
  Defaults to 0.
  * 0 (OP_SOURCE) - All color components of this frame, including alpha, overwrite the previous output image contents.
  * 1 (OP_OVER) - This frame should be alpha composited with the previous output image contents.
```

----------------------------------------

TITLE: Add `formats` parameter to `Image.open` in Pillow 8.0.0
DESCRIPTION: Pillow 8.0.0 introduces a new `formats` parameter to `Image.open`. This parameter accepts a list or tuple of formats, allowing users to restrict the image loading process to specific types, improving efficiency or handling ambiguous files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Image.open function:
  Parameter: formats
    Type: list or tuple of strings (format names)
    Description: A list or tuple of formats to attempt to load the file in.
                 Pass None to try all supported formats.
                 Available formats can be printed using 'python3 -m PIL' or PIL.features.pilinfo().
```

----------------------------------------

TITLE: Pillow Image Function: min
DESCRIPTION: Compares two images pixel-wise and returns an image with the minimum values.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_12

LANGUAGE: APIDOC
CODE:
```
Function: min(image1, image2)
Description: Minimum value.
Parameters:
  image1: The first input image.
  image2: The second input image.
Returns: An image where each pixel is the minimum of the corresponding pixels in image1 and image2.
```

----------------------------------------

TITLE: Evaluate Image Expressions with PIL.ImageMath
DESCRIPTION: This example demonstrates how to use `PIL.ImageMath` to combine two images (`image1.jpg` and `image2.jpg`) by taking the minimum pixel value and converting the result to a grayscale ('L') image. It shows both the `lambda_eval` (secure) and `unsafe_eval` (less secure) methods for achieving this.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_0

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageMath

with Image.open("image1.jpg") as im1:
    with Image.open("image2.jpg") as im2:
        out = ImageMath.lambda_eval(
          lambda args: args["convert"](args["min"](args["a"], args["b"]), 'L'),
          a=im1,
          b=im2
        )
        out = ImageMath.unsafe_eval(
          "convert(min(a, b), 'L')",
          a=im1,
          b=im2
        )
```

----------------------------------------

TITLE: Resampling Class (Resampling Filters)
DESCRIPTION: An enumeration used to specify the resampling filters for image resizing and transformations. Refer to the concept-filters documentation for detailed information on each filter.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_28

LANGUAGE: APIDOC
CODE:
```
Resampling
  members: all
  undoc-members: true
```

----------------------------------------

TITLE: Dither Class (Dither Modes)
DESCRIPTION: An enumeration used to specify the dithering method for image color conversion and quantization, applicable to `Image.convert` and `Image.quantize` methods. Includes options like NONE and FLOYDSTEINBERG.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_29

LANGUAGE: APIDOC
CODE:
```
Dither
  NONE: No dither
  ORDERED: Not implemented
  RASTERIZE: Not implemented
  FLOYDSTEINBERG: Floyd-Steinberg dither
```

----------------------------------------

TITLE: Convert Color String to RGB or Grayscale (PIL.ImageColor.getcolor)
DESCRIPTION: Similar to getrgb, this function converts a color string to an RGB value. Additionally, it converts the RGB value to a grayscale value if the specified image mode is not a color or palette image. Raises ValueError if parsing fails.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageColor.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
getcolor(color, mode)
  color: The color string to convert.
  mode: The image mode (e.g., 'L' for grayscale, 'RGB' for color, 'P' for palette).
  Returns: An RGB tuple if mode is color/palette, or a grayscale integer if mode is grayscale.
  Raises: ValueError if the string cannot be parsed.
  Version Added: 1.1.4
```

----------------------------------------

TITLE: API Change: Structured EXIF and GPS IFD access in Image.getexif
DESCRIPTION: Previously, `PIL.Image.Image.getexif` flattened EXIF IFD data. Now, EXIF IFD (0x8769) and GPS IFD (0x8825) are accessed separately using `im.getexif().get_ifd(IFD_TAG)`. Direct access to GPS IFD via `im.getexif()[0x8825]` is no longer supported.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.2.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.getexif()

Old access (Pillow < 6.0):
  _getexif() methods

New access (Pillow >= 6.0):
  im.getexif().get_ifd(0x8769)  # EXIF IFD
  im.getexif().get_ifd(0x8825)  # GPS IFD

Deprecated direct access:
  im.getexif()[0x8825]
```

----------------------------------------

TITLE: Access Image Pixels with Negative Indexes in Pillow
DESCRIPTION: Explains that Pillow now supports negative indexing when accessing individual image pixels, similar to Python's sequence indexing. An example is provided to get and set the farthest pixel in the lower right corner of an image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.4.0.rst#_snippet_2

LANGUAGE: python
CODE:
```
px = im.load()
print(px[-1, -1])
px[-1, -1] = (0, 0, 0)
```

----------------------------------------

TITLE: Pillow Resampling Filter: LANCZOS
DESCRIPTION: The LANCZOS filter employs a high-quality Lanczos filter (truncated sinc) for output pixel calculation, considering all contributing pixels. It is only available for `resize` and `thumbnail` methods.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_13

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Resampling.LANCZOS
Description: Calculate the output pixel value using a high-quality Lanczos filter (a truncated sinc) on all pixels that may contribute to the output value.
This filter can only be used with the PIL.Image.Image.resize and PIL.Image.Image.thumbnail methods.
```

----------------------------------------

TITLE: Pillow PDF Save Method Keyword Arguments
DESCRIPTION: This section documents the keyword arguments available for the `PIL.Image.Image.save` method when saving images in PDF format. It covers options for saving multiple frames, appending images to an existing PDF, setting resolution, and adding document metadata such as title, author, subject, and keywords.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_66

LANGUAGE: APIDOC
CODE:
```
Saving method parameters for PIL.Image.Image.save (PDF format):
  save_all:
    Type: bool
    Description: If a multiframe image is used, by default, only the first image will be saved. To save all frames, each frame to a separate page of the PDF, the `save_all` parameter should be present and set to `True` or `append_images` should not be empty.
    Version Added: 3.0.0
  append_images:
    Type: list[PIL.Image.Image]
    Description: A list of `PIL.Image.Image` objects to append as additional pages. Each of the images in the list can be single or multiframe images.
    Version Added: 4.2.0
  append:
    Type: bool
    Description: Set to True to append pages to an existing PDF file. If the file doesn't exist, an `OSError` will be raised.
    Version Added: 5.1.0
  resolution:
    Type: int
    Description: Image resolution in DPI. This, together with the number of pixels in the image, will determine the physical dimensions of the page that will be saved in the PDF.
  dpi:
    Type: tuple[int, int]
    Description: A tuple of `(x_resolution, y_resolution)`, with inches as the resolution unit. If both the `resolution` parameter and the `dpi` parameter are present, `resolution` will be ignored.
  title:
    Type: str
    Description: The document’s title. If not appending to an existing PDF file, this will default to the filename.
    Version Added: 5.1.0
  author:
    Type: str
    Description: The name of the person who created the document.
    Version Added: 5.1.0
  subject:
    Type: str
    Description: The subject of the document.
    Version Added: 5.1.0
  keywords:
    Type: str (implied)
    Description: (Incomplete in source text)
```

----------------------------------------

TITLE: Alpha Channel-Based Bounding Box Calculation
DESCRIPTION: The `Image.Image.getbbox()` method in Pillow 7.1.0 now exclusively uses the alpha channel to calculate the bounding box for images that possess one (e.g., RGBA, LA). This ensures that transparent pixels are correctly trimmed, regardless of their color.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.1.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.getbbox()
```

----------------------------------------

TITLE: Pillow API Addition: ImageDraw 'justify' Text Alignment
DESCRIPTION: Documents the addition of "justify" as a new alignment option for multiline text in `PIL.ImageDraw`, complementing "left", "center", and "right".
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.2.1.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
API Addition: PIL.ImageDraw multiline text alignment
  New Alignment Option: "justify"
  Existing Options: "left", "center", "right"
  Usage: Applicable to multiline_text and multiline_textbbox methods.
```

LANGUAGE: python
CODE:
```
from PIL import Image, ImageDraw
im = Image.new("RGB", (50, 25))
draw = ImageDraw.Draw(im)
draw.multiline_text((0, 0), "Multiline\ntext 1", align="justify")
draw.multiline_textbbox((0, 0), "Multiline\ntext 2", align="justify")
```

----------------------------------------

TITLE: Add `mask` parameter to `ImageOps.autocontrast` in Pillow 8.0.0
DESCRIPTION: Pillow 8.0.0 enhances `ImageOps.autocontrast` with a new `mask` parameter. When provided, the histogram used for contrast adjustment is computed only from pixels within the specified mask, enabling localized contrast enhancements.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
ImageOps.autocontrast function:
  Parameter: mask
    Type: Image.Image (mask image)
    Description: Histogram used in contrast operation is computed using pixels within the mask.
                 If no mask is given, the entire image is used.
```

----------------------------------------

TITLE: Draw Ellipse in Pillow ImageDraw
DESCRIPTION: Draws an ellipse within a specified bounding box. This method allows for drawing oval shapes. (width parameter added in version 5.3.0)
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_13

LANGUAGE: APIDOC
CODE:
```
ImageDraw.ellipse(xy, fill=None, outline=None, width=1)
  Parameters:
    xy: Two points to define the bounding box. Sequence of either [(x0, y0), (x1, y1)] or [x0, y0, x1, y1], where x1 >= x0 and y1 >= y0.
    outline: Color to use for the outline.
    fill: Color to use for the fill.
    width: The line width, in pixels. (versionadded: 5.3.0)
```

----------------------------------------

TITLE: Specify Language for Text Rendering in Pillow
DESCRIPTION: Several text-rendering functions in Pillow now accept a 'language' parameter. This enables requesting language-specific glyphs and ligatures from the font, improving text display accuracy for different languages.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Text-rendering functions now accept a 'language' parameter:
  - ImageDraw.ImageDraw.multiline_text()
  - ImageDraw.ImageDraw.multiline_textsize()
  - ImageDraw.ImageDraw.text()
  - ImageDraw.ImageDraw.textsize()
  - ImageFont.ImageFont.getmask()
  - ImageFont.ImageFont.getsize_multiline()
  - ImageFont.ImageFont.getsize()
```

----------------------------------------

TITLE: PILLOW_VERSION Constant Removed
DESCRIPTION: The `PILLOW_VERSION` constant has been removed. Users should now use `__version__` to retrieve the Pillow version.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_5

LANGUAGE: Python
CODE:
```
# Old:
# print(PILLOW_VERSION)

# New:
import PIL
print(PIL.__version__)
```

----------------------------------------

TITLE: Pillow ImageFile.get_format_mimetype for MIME Type Retrieval
DESCRIPTION: A new method, `ImageFile.get_format_mimetype`, has been added to return the MIME type of an image file if available. This is useful for identifying the content type of an opened image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.2.0.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from PIL import Image

# Example of getting the MIME type of an opened image
img = Image.open("hopper.jpg")
mime_type = img.get_format_mimetype()
print(f"MIME type: {mime_type}") # Expected output: "image/jpeg"

# API Description for ImageFile.get_format_mimetype
# Image.get_format_mimetype() -> Optional[str]
#   Returns: The MIME type of the image file as a string (e.g., "image/jpeg"), or None if not available.
```

----------------------------------------

TITLE: PIL.ImageOps and PIL.Image Resizing and Padding Functions API Reference
DESCRIPTION: API reference for functions used in resizing and padding images, including `PIL.ImageOps.contain`, `cover`, `fit`, `pad`, and the in-place `PIL.Image.Image.thumbnail` method.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageOps.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.ImageOps:
  contain(image, size)
  cover(image, size)
  fit(image, size)
  pad(image, size, color)

PIL.Image.Image:
  thumbnail(size)
```

----------------------------------------

TITLE: Draw Chord in Pillow ImageDraw
DESCRIPTION: Draws an arc and connects its endpoints with a straight line, similar to `ImageDraw.arc`. This method is useful for creating segments of a circle with a closed base.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_11

LANGUAGE: APIDOC
CODE:
```
ImageDraw.chord(xy, start, end, fill=None, outline=None, width=1)
  Parameters:
    xy: Two points to define the bounding box. Sequence of [(x0, y0), (x1, y1)] or [x0, y0, x1, y1], where x1 >= x0 and y1 >= y0.
    outline: Color to use for the outline.
    fill: Color to use for the fill.
    width: The line width, in pixels. (versionadded: 5.3.0)
```

----------------------------------------

TITLE: Enable RGBA Mode for PDF Saving
DESCRIPTION: Pillow now supports saving PDFs in RGBA mode, utilizing the JPXDecode filter. This allows for PDFs with transparency.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.5.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save(filename, format='PDF', mode='RGBA', ...)
  Note: Uses JPXDecode filter for RGBA support.
```

----------------------------------------

TITLE: Rotate Image 90 Degrees with Pillow
DESCRIPTION: This snippet demonstrates rotating an image 90 degrees counter-clockwise using the `transpose()` method with `Image.Transpose.ROTATE_90`. This is an alternative to `rotate()` for fixed 90-degree rotations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_13

LANGUAGE: Python
CODE:
```
out = im.transpose(Image.Transpose.ROTATE_90)
```

----------------------------------------

TITLE: Pillow: Simple Text Stroking Example
DESCRIPTION: A concise example illustrating how to draw text with a stroke using ImageDraw.text. It creates a new image and draws a large 'A' character with a red fill and a green stroke, demonstrating the "stroke_width" and "stroke_fill" parameters.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.2.0.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw, ImageFont

im = Image.new("RGB", (120, 130))
draw = ImageDraw.Draw(im)
font = ImageFont.truetype("Tests/fonts/FreeMono.ttf", 120)
draw.text((10, 10), "A", "#f00", font, stroke_width=2, stroke_fill="#0f0")
```

----------------------------------------

TITLE: Pillow Image Module-level Functions
DESCRIPTION: API reference for key module-level functions within the `PIL.Image` module, such as `Image.new` for creating new images and `Image.merge` for combining image bands.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_17

LANGUAGE: APIDOC
CODE:
```
PIL.Image Module Functions:
  Image.new(mode: str, size: tuple, color=0) -> Image.Image
    mode: The mode to use for the new image (e.g., "RGB", "RGBA").
    size: A 2-tuple (width, height) giving the size of the new image.
    color: The color to use for the image.
    Returns: A new image.
  Image.merge(mode: str, bands: tuple[Image.Image, ...]) -> Image.Image
    mode: The mode of the new image (e.g., "RGB").
    bands: A tuple of single-band images to merge.
    Returns: A new multi-band image.
```

----------------------------------------

TITLE: Transpose Class (Image.transpose methods)
DESCRIPTION: An enumeration used to specify the available methods for the `Image.transpose` operation, allowing for various image rotations and flips.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_26

LANGUAGE: APIDOC
CODE:
```
Transpose
  members: all
  undoc-members: true
```

----------------------------------------

TITLE: New API: ImageDraw.circle Method
DESCRIPTION: A new method, `PIL.ImageDraw.ImageDraw.circle()`, has been added. It provides functionality similar to `ImageDraw.ellipse()`, but takes a center point and radius instead of a bounding box for drawing circles.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.4.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
New Method: PIL.ImageDraw.ImageDraw.circle(xy: tuple, radius: float, fill=None, outline=None, width: int = 1)
Parameters:
  - xy (tuple): Center coordinates (x, y) of the circle.
  - radius (float): Radius of the circle.
  - fill (color, optional): Color to fill the circle.
  - outline (color, optional): Color for the circle's outline.
  - width (int, optional): Width of the outline. Defaults to 1.
Functionality: Draws a circle.
Note: Provides similar functionality to ImageDraw.ellipse, but uses center and radius.
```

----------------------------------------

TITLE: Pillow Image Function: int
DESCRIPTION: Converts an image to 32-bit integer. This is equivalent to `convert(image, "I")`. Note that 1-bit and 8-bit images are automatically converted if necessary.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_10

LANGUAGE: APIDOC
CODE:
```
Function: int(image)
Description: Convert image to 32-bit integer. This is equivalent to convert(image, "I").
Note: 1-bit and 8-bit images are automatically converted to 32-bit integers if necessary to get a correct result.
Parameters:
  image: The input image.
Returns: The image converted to 32-bit integer.
```

----------------------------------------

TITLE: Saving Multipage Images with Pillow
DESCRIPTION: Pillow 3.0.0 introduces support for saving multipage images in GIF and PDF formats. To enable this functionality, pass `save_all=True` as a keyword argument to the `save()` method. This allows a single image object to be saved as a multi-page document.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/3.0.0.rst#_snippet_0

LANGUAGE: Python
CODE:
```
im.save('test.pdf', save_all=True)
```

----------------------------------------

TITLE: Pillow Image Function: float
DESCRIPTION: Converts an image to 32-bit floating point. This is equivalent to `convert(image, "F")`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Function: float(image)
Description: Convert image to 32-bit floating point. This is equivalent to convert(image, "F").
Parameters:
  image: The input image.
Returns: The image converted to 32-bit floating point.
```

----------------------------------------

TITLE: Install Optional Pillow Dependencies
DESCRIPTION: Instructions to install optional Python packages `defusedxml` and `olefile` for Pillow to enable reading XMP data, FPX, and MIC images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/basic-installation.rst#_snippet_1

LANGUAGE: Python
CODE:
```
python3 -m pip install --upgrade defusedxml olefile
```

----------------------------------------

TITLE: Draw Polygon in Pillow ImageDraw
DESCRIPTION: Draws a closed polygon defined by a sequence of coordinates. The outline consists of straight lines connecting the given points, including a line from the last to the first point. Coordinate pixels are included in the drawn polygon.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_17

LANGUAGE: APIDOC
CODE:
```
ImageDraw.polygon(xy, fill=None, outline=None, width=1)
  Parameters:
    xy: Sequence of either 2-tuples like [(x, y), (x, y), ...] or numeric values like [x, y, x, y, ...].
    fill: Color to use for the fill.
    outline: Color to use for the outline.
    width: The line width, in pixels.
```

----------------------------------------

TITLE: Capture Clipboard Image (PIL.ImageGrab.grabclipboard)
DESCRIPTION: This function attempts to take a snapshot of the image data currently stored in the system clipboard. Its behavior and return types vary slightly across operating systems, potentially returning an image, a list of filenames, or None if no image data is found. On Linux, it requires `wl-paste` or `xclip`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageGrab.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.ImageGrab.grabclipboard()

Description: Take a snapshot of the clipboard image, if any. On Linux, `wl-paste` or `xclip` is required.

Returns:
  PIL.Image.Image or list[str] or None
    On Windows: An image, a list of filenames, or None if the clipboard does not contain image data or filenames. Note that if a list is returned, the filenames may not represent image files.
    On Mac: An image, or None if the clipboard does not contain image data.
    On Linux: An image.
```

----------------------------------------

TITLE: Pillow Resampling Filter: BOX
DESCRIPTION: The BOX filter ensures each source image pixel contributes equally to one destination pixel. For upscaling, it behaves like NEAREST. This filter is compatible only with `resize` and `thumbnail` methods.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Resampling.BOX
Description: Each pixel of source image contributes to one pixel of the destination image with identical weights.
For upscaling is equivalent of Resampling.NEAREST.
This filter can only be used with the PIL.Image.Image.resize and PIL.Image.Image.thumbnail methods.
```

----------------------------------------

TITLE: Transform Class (Image.transform methods)
DESCRIPTION: An enumeration defining the methods available for the `Image.transform` operation, including affine, extent, perspective, quad, and mesh transformations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_27

LANGUAGE: APIDOC
CODE:
```
Transform
  AFFINE: Affine transform
  EXTENT: Cut out a rectangular subregion
  PERSPECTIVE: Perspective transform
  QUAD: Map a quadrilateral to a rectangle
  MESH: Map a number of source quadrilaterals in one operation
```

----------------------------------------

TITLE: Pillow Image Resizing Methods API Reference
DESCRIPTION: This section provides an API reference for various image resizing methods available in Pillow, including `thumbnail`, `contain`, `cover`, `fit`, and `pad`. It outlines their common input parameters (given size) and the characteristics of their resulting output images, specifically their dimensions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_19

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.thumbnail:
  Given size: (100, 150)
  Resulting size: 100x100

PIL.ImageOps.contain:
  Given size: (100, 150)
  Resulting size: 100x100

PIL.ImageOps.cover:
  Given size: (100, 150)
  Resulting size: 150x150

PIL.ImageOps.fit:
  Given size: (100, 150)
  Resulting size: 100x150

PIL.ImageOps.pad:
  Given size: (100, 150)
  Resulting size: 100x150
```

----------------------------------------

TITLE: PIL.Image Module and Image Class API Documentation
DESCRIPTION: Comprehensive API documentation for the PIL.Image module, including its factory functions and the methods available on instances of the PIL.Image.Image class.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Module: PIL.Image
  Description: The PIL.Image module provides a class with the same name which is used to represent a PIL image. The module also provides a number of factory functions, including functions to load images from files, and to create new images.
  Functions:
    open:
      Description: To protect against potential DOS attacks caused by "decompression bombs" (i.e. malicious files which decompress into a huge amount of data and are designed to crash or cause disruption by using up a lot of memory), Pillow will issue a DecompressionBombWarning if the number of pixels in an image is over a certain limit, MAX_IMAGE_PIXELS. This threshold can be changed by setting MAX_IMAGE_PIXELS. It can be disabled by setting Image.MAX_IMAGE_PIXELS = None. If desired, the warning can be turned into an error with warnings.simplefilter('error', Image.DecompressionBombWarning) or suppressed entirely with warnings.simplefilter('ignore', Image.DecompressionBombWarning). See also the logging documentation to have warnings output to the logging facility instead of stderr. If the number of pixels is greater than twice MAX_IMAGE_PIXELS, then a DecompressionBombError will be raised instead.
    alpha_composite
    blend
    composite
    eval
    merge
    new
    fromarray
    fromarrow
    frombytes
    frombuffer
    effect_mandelbrot
    effect_noise
    linear_gradient
    radial_gradient
    preinit
    init:
      Note: These functions are for use by plugin authors. They are called when a plugin is loaded as part of preinit() or init(). Application authors can ignore them.
    register_open
    register_mime
    register_save
    register_save_all
    register_extension
    register_extensions
    registered_extensions
    register_decoder
    register_encoder

Class: PIL.Image.Image
  Description: An instance of the PIL.Image.Image class has the following methods. Unless otherwise stated, all methods return a new instance of the PIL.Image.Image class, holding the resulting image.
  Methods:
    alpha_composite
    apply_transparency
    convert
    copy
    crop
```

----------------------------------------

TITLE: Deprecating Implicit File Closing in Image.__del__
DESCRIPTION: Implicitly closing the image's underlying file in `Image.__del__` has been deprecated. It is recommended to use a context manager or explicitly call `Image.close()` to ensure deterministic file closing.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.1.0.rst#_snippet_0

LANGUAGE: Python
CODE:
```
im = Image.open("hopper.png")
im.save("out.jpg")
```

LANGUAGE: Python
CODE:
```
with Image.open("hopper.png") as im:
    im.save("out.jpg")
```

----------------------------------------

TITLE: New UnidentifiedImageError Exception in Pillow 7.0.0
DESCRIPTION: Pillow 7.0.0 introduces a new custom exception, `UnidentifiedImageError`, which is raised when the library cannot identify an image file. For backward compatibility, this new exception inherits from `OSError`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.0.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
class UnidentifiedImageError(OSError):
  Description: Custom exception raised when Pillow cannot identify an image.
  Inherits from: OSError
```

----------------------------------------

TITLE: Pillow Image.Exif Migration to ImageFileDirectory_v2
DESCRIPTION: Pillow 7.2.0 migrates `PIL.Image.Exif` from the legacy `PIL.TiffImagePlugin.ImageFileDirectory_v1` to `PIL.TiffImagePlugin.ImageFileDirectory_v2`. As a result, Exif RATIONALs and SIGNED_RATIONALs are now read as `PIL.TiffImagePlugin.IFDRational` objects instead of a tuple (numerator, denominator).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.2.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Exif:
  - Internal change: Moved from PIL.TiffImagePlugin.ImageFileDirectory_v1 to PIL.TiffImagePlugin.ImageFileDirectory_v2
  - Impact: Exif RATIONALs and SIGNED_RATIONALs are now read as PIL.TiffImagePlugin.IFDRational objects.
```

----------------------------------------

TITLE: Pillow PyQt4 and PySide Support Removal
DESCRIPTION: Pillow has removed support for PyQt4 and PySide in `ImageQt` (deprecated 6.0.0, removed 7.0.0) due to their end-of-life status. Users are advised to upgrade to PyQt5 or PySide2.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_45

LANGUAGE: APIDOC
CODE:
```
Support for PyQt4 and PySide removed from ImageQt. Upgrade to PyQt5 or PySide2.
```

----------------------------------------

TITLE: Saving TIFF Images as BigTIFF in Pillow
DESCRIPTION: Pillow 11.1.0 introduces the ability to save TIFF images in the BigTIFF format. This is achieved by passing the `big_tiff=True` argument to the `save` method, enabling support for larger TIFF files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.1.0.rst#_snippet_3

LANGUAGE: Python
CODE:
```
im.save("out.tiff", big_tiff=True)
```

----------------------------------------

TITLE: Pillow Library Module Listing
DESCRIPTION: Provides a comprehensive list of modules and sub-packages within the Pillow library, serving as a table of contents for its API documentation. Each entry points to a specific area of functionality, such as image processing, file I/O, drawing, enhancements, and various utility functions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/index.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Image
ImageChops
ImageCms
ImageColor
ImageDraw
ImageEnhance
ImageFile
ImageFilter
ImageFont
ImageGrab
ImageMath
ImageMorph
ImageOps
ImagePalette
ImagePath
ImageQt
ImageSequence
ImageShow
ImageStat
ImageTk
ImageTransform
ImageWin
ExifTags
TiffTags
JpegPresets
PSDraw
PixelAccess
features
../PIL
plugins
internal_design
```

----------------------------------------

TITLE: Saving AVIF Sequences with PIL.Image.Image.save
DESCRIPTION: By default, only the first frame of a multiframe image is saved when writing an AVIF file. To save all frames, the `save_all` argument must be set to true, enabling additional options for sequence handling.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save(filename, format="AVIF", save_all=True, **options)
Options (when save_all=True):
  append_images: List[PIL.Image.Image], a list of images to append as additional frames. Each can be single or multiframe.
  duration: Union[int, List[int], Tuple[int]], the display duration of each frame in milliseconds. Can be a single integer or a list/tuple for per-frame duration.
```

----------------------------------------

TITLE: Pillow ImageDraw.textlength API Parameters
DESCRIPTION: Defines the parameters and return type for the `ImageDraw.textlength` method in Pillow, used for measuring text width or height. It details various options for text layout, including font, direction, OpenType features, language, embedded color, and font size, along with their requirements and effects.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_28

LANGUAGE: APIDOC
CODE:
```
Parameters for ImageDraw.textlength:
  text (str): Text to be measured. May not contain any newline characters.
  font (PIL.ImageFont.ImageFont): An ImageFont instance.
  direction (str, optional): Direction of the text. It can be "rtl" (right to left), "ltr" (left to right) or "ttb" (top to bottom). Requires libraqm.
  features (list[str], optional): A list of OpenType font features to be used during text layout. E.g., "dlig" or "ss01", or to turn off default features, e.g., "-liga" or "-kern". Requires libraqm.
  language (str, optional): Language of the text (BCP 47 language code). Affects glyph shapes or ligatures. Requires libraqm.
  embedded_color (bool, optional): Whether to use font embedded color glyphs (COLR, CBDT, SBIX).
  font_size (int, optional, keyword-only): If 'font' is not provided, then the size to use for the default font. (versionadded:: 10.1.0)

Returns:
  (int): Either width for horizontal text, or height for vertical text.
```

----------------------------------------

TITLE: Pillow API: Appending Images to PDF Files
DESCRIPTION: Images can now be appended to existing PDF files in place. This functionality is enabled by passing `append=True` when saving an image to a PDF.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.1.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Pillow PDF Save Options:
  - `append`: boolean
    - Description: If True, appends the image to an existing PDF file instead of creating a new one.
    - Usage Example: `image.save('output.pdf', append=True)`
```

----------------------------------------

TITLE: Add DPI Argument to PDF Saving
DESCRIPTION: The `Image.save()` method for PDF now accepts a `dpi` argument, allowing specification of resolution as a tuple `(x_resolution, y_resolution)`. If both `dpi` and `resolution` are provided, `dpi` takes precedence.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.5.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save(filename, format='PDF', dpi=(x_res, y_res), ...)
  Parameters:
    dpi: tuple[int, int], optional
      A tuple `(x_resolution, y_resolution)` specifying the resolution for PDF saving.
      Overrides `resolution` if both are provided.
```

----------------------------------------

TITLE: Pillow Image.save JPEG 2000 Options (mct, no_jp2)
DESCRIPTION: The `PIL.Image.Image.save` method now supports `mct` and `no_jp2` options for JPEG 2000 encoding. `mct` enables multiple component transformation, while `no_jp2` prevents wrapping the raw codestream in the JP2 file format.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save(filename, format=None, **options)
  Options for JPEG 2000:
    mct: int (0 or 1)
      If 1, enable multiple component transformation. Default is 0.
      If MCT is enabled and 'irreversible' is True, Irreversible Color Transformation is applied.
      Best with 'RGB' mode and 3 components.
    no_jp2: bool
      If True, don't wrap raw codestream in JP2 file format.
      Default behavior uses filename extension to determine format.
```

----------------------------------------

TITLE: Changed Default Resampling Filter for I;16* Modes
DESCRIPTION: The default resampling filter for `I;16`, `I;16L`, `I;16B`, and `I;16N` image modes has been changed from `Image.NEAREST` to `Image.BICUBIC` to align with other modes.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.0.0.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.resize(..., filter=Image.NEAREST) -> filter=Image.BICUBIC (default for I;16* modes)
```

----------------------------------------

TITLE: Removed Deprecated ImageOps Functions
DESCRIPTION: Several undocumented functions in `ImageOps`, including `gaussian_blur`, `gblur`, `unsharp_mask`, `usm`, and `box_blur`, have been removed. Users should now use the equivalent operations available in `ImageFilter`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ImageOps:
  - gaussian_blur (removed)
  - gblur (removed)
  - unsharp_mask (removed)
  - usm (removed)
  - box_blur (removed)
Recommendation: Use ImageFilter for equivalent operations.
```

----------------------------------------

TITLE: Pillow Image.open Method JPEG Info Properties
DESCRIPTION: Details the properties that may be set in the `PIL.Image.Image.info` dictionary when opening a JPEG file using the `PIL.Image.open` method. These properties provide metadata about the JPEG file, such as JFIF, EXIF, and ICC profile information.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_20

LANGUAGE: APIDOC
CODE:
```
PIL.Image.open method info properties (for JPEG):

jfif:
  Type: bool
  Description: True if a JFIF application marker is found. Not present if the file is not a JFIF file.

jfif_version:
  Type: tuple (int, int)
  Description: A tuple representing the JFIF version (major, minor).

jfif_density:
  Type: tuple (int, int)
  Description: A tuple representing the pixel density of the image, in units specified by jfif_unit.

jfif_unit:
  Type: int
  Description: Units for the jfif_density.
    0: No Units
    1: Pixels per Inch
    2: Pixels per Centimeter

dpi:
  Type: tuple (int, int)
  Description: A tuple representing the reported pixel density in pixels per inch, if the file is a JFIF file and units are inches.

adobe:
  Type: bool
  Description: True if an Adobe application marker is found. Not present if the file is not an Adobe JPEG file.

adobe_transform:
  Type: Vendor Specific Tag
  Description: Vendor Specific Tag.

progression:
  Type: bool
  Description: Indicates that this is a progressive JPEG file.

icc_profile:
  Type: bytes
  Description: The ICC color profile for the image.

exif:
  Type: bytes
  Description: Raw EXIF data from the image.

comment:
  Type: str
  Description: A comment about the image, from the COM marker. This is separate from the UserComment tag that may be stored in the EXIF data.
  Version Added: 7.1.0
```

----------------------------------------

TITLE: Remove `fromstring` and `tostring` methods in Pillow 8.0.0
DESCRIPTION: Pillow 8.0.0 removes `Image.fromstring()`, `im.fromstring()`, and `im.tostring()`. These methods are replaced by `Image.frombytes()`, `PIL.Image.Image.frombytes()`, and `PIL.Image.Image.tobytes()` respectively, offering byte-based image conversion.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Removed: Image.fromstring()
Use instead: Image.frombytes()

Removed: im.fromstring()
Use instead: PIL.Image.Image.frombytes()

Removed: im.tostring()
Use instead: PIL.Image.Image.tobytes()
```

----------------------------------------

TITLE: Add PIL.ImageFilter.BoxBlur Filter
DESCRIPTION: A new filter, `BoxBlur`, has been introduced in `PIL.ImageFilter`. This filter provides results similar to a Gaussian blur but is designed for much faster execution, offering a performance-optimized alternative for blurring operations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.3.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
class PIL.ImageFilter.BoxBlur(radius: float)

Parameters:
  radius (float): The blur radius.

Description:
  A fast box blur filter. Similar results to Gaussian blur but significantly faster.
```

----------------------------------------

TITLE: Pillow TIFF Image Resolution Attribute
DESCRIPTION: Describes the `resolution` attribute of a TIFF image, providing the image resolution as an `(xres, yres)` tuple. The unit of measurement is determined by the file.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_56

LANGUAGE: APIDOC
CODE:
```
PIL.TiffImagePlugin.TiffImageFile.resolution: tuple[int, int]
  Description: Image resolution as an (xres, yres) tuple, in units specified by the file.
  Version Added: 1.1.5
```

----------------------------------------

TITLE: TIFF Image File Opening Info Properties
DESCRIPTION: Describes the `info` properties that are set on the Image object when a TIFF image file is opened using Pillow's `Image.open` method. These properties provide details such as the compression mode and image resolution.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_55

LANGUAGE: APIDOC
CODE:
```
compression:
  Compression mode. (versionadded: 2.0.0)
dpi:
  Image resolution as an (xdpi, ydpi) tuple, where applicable.
```

----------------------------------------

TITLE: Add 'box' Argument to PIL.Image.Image.resize
DESCRIPTION: The `resize` method of `PIL.Image.Image` now accepts a new `box` argument. This allows specifying a source rectangle within the original image to be resized, similar to cropping and then resizing, but with the added benefit of subpixel accuracy.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.3.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.resize(size: Tuple[int, int], resample=None, box=None) -> PIL.Image.Image

Parameters:
  size (Tuple[int, int]): The desired output size as a (width, height) tuple.
  resample (int, optional): The resampling filter to use. Defaults to NEAREST.
  box (Tuple[float, float, float, float], optional): A 4-tuple defining the left, upper, right, and lower pixel coordinate box. Can be specified with subpixel accuracy.

Description:
  Defines a source rectangle from within the source image to be resized. Similar to image.crop(box).resize(size) but supports subpixel accuracy for the box.
```

----------------------------------------

TITLE: New ImageChops Channel Operations
DESCRIPTION: Pillow 7.1.0 introduces three new channel operations within the `PIL.ImageChops` module: `soft_light`, `hard_light`, and `overlay`. These methods provide advanced blending and light manipulation capabilities for image processing.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.1.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.ImageChops.soft_light
PIL.ImageChops.hard_light
PIL.ImageChops.overlay
```

----------------------------------------

TITLE: Rotate Image 270 Degrees with Pillow
DESCRIPTION: This snippet demonstrates rotating an image 270 degrees counter-clockwise using the `transpose()` method with `Image.Transpose.ROTATE_270`. This is an alternative to `rotate()` for fixed 270-degree rotations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_15

LANGUAGE: Python
CODE:
```
out = im.transpose(Image.Transpose.ROTATE_270)
```

----------------------------------------

TITLE: Pillow Optimization: ImageColor.getrgb and getcolor Caching
DESCRIPTION: The color calculations for `PIL.ImageColor.getrgb` and `PIL.ImageColor.getcolor` are now cached using `functools.lru_cache`, significantly improving performance for cached calls.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.2.0.rst#_snippet_11

LANGUAGE: APIDOC
CODE:
```
PIL.ImageColor.getrgb(color: str)
  Now uses functools.lru_cache for performance optimization.
PIL.ImageColor.getcolor(color: str, mode: str)
  Now uses functools.lru_cache for performance optimization.
```

----------------------------------------

TITLE: Pillow ImageColor.getrgb Supports HSB/HSV and Floats
DESCRIPTION: The `ImageColor.getrgb` function has been enhanced to support HSB (Hue, Saturation, Brightness) and HSV (Hue, Saturation, Value) color strings, in addition to the previously supported HSL. It also now accepts float values within the color string specifications.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.2.0.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from PIL import ImageColor

# Example of using hsv with float values
rgb_color = ImageColor.getrgb("hsv(180,100%,99.5%)")
print(rgb_color)

# API Description for ImageColor.getrgb
# ImageColor.getrgb(color_string: str) -> Tuple[int, int, int]
#   color_string: A string representing a color, now supporting HSB and HSV formats with float values.
#   Returns: An RGB tuple (red, green, blue) of integer values.
```

----------------------------------------

TITLE: PIL.ImageDraw.fontmode Attribute
DESCRIPTION: The current font drawing mode. Set to "1" to disable antialiasing or "L" to enable it.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
ImageDraw.fontmode
  Description: The current font drawing mode.
  Values:
    "1": Disable antialiasing
    "L": Enable antialiasing
```

----------------------------------------

TITLE: Parse Image with PIL.ImageFile.Parser
DESCRIPTION: Demonstrates how to use the PIL.ImageFile.Parser class to decode an image file piece by piece. This approach is suitable for processing images received over a network connection, where data arrives in chunks. The example reads a PPM file in 1KB chunks, feeds them to the parser, and then saves the reconstructed image as a JPEG.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageFile.rst#_snippet_0

LANGUAGE: python
CODE:
```
from PIL import ImageFile

fp = open("hopper.ppm", "rb")

p = ImageFile.Parser()

while 1:
    s = fp.read(1024)
    if not s:
        break
    p.feed(s)

im = p.close()

im.save("copy.jpg")
```

----------------------------------------

TITLE: ImageFont.FreeTypeFont Variation Font Methods
DESCRIPTION: Pillow now supports variation fonts, allowing different styles from the same font file. `ImageFont.FreeTypeFont` has four new methods for using named styles and font axes. An `IOError` is raised if the font is not a variation font, and FreeType 2.9.1 or greater is required.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.1.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
PIL.ImageFont.FreeTypeFont.get_variation_names() -> List[str]
  Returns a list of available variation style names.

PIL.ImageFont.FreeTypeFont.set_variation_by_name(name: str)
  Sets the font variation by a given style name.

PIL.ImageFont.FreeTypeFont.get_variation_axes() -> List[Dict]
  Returns a list of variation axes, each with properties like 'name', 'minimum', 'maximum', 'default', and 'tag'.

PIL.ImageFont.FreeTypeFont.set_variation_by_axes(axes: Dict[str, float])
  Sets the font variation by a dictionary of axis tags and their values.
```

----------------------------------------

TITLE: Add `embedded_color` parameter for `ImageDraw.text` in Pillow 8.0.0
DESCRIPTION: Pillow 8.0.0 adds `embedded_color=True` parameter to `ImageDraw.text` and `ImageDraw.multiline_text`, enabling rendering of fonts with embedded color data. This feature requires specific FreeType versions and libraries for different font types.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_10

LANGUAGE: APIDOC
CODE:
```
ImageDraw.text and ImageDraw.multiline_text methods:
  Parameter: embedded_color
    Type: bool
    Description: Set to True to render text with embedded color data.
    Requirements:
      CBDT fonts: FreeType 2.5 compiled with libpng.
      SBIX fonts: FreeType 2.5.1 compiled with libpng.
      COLR fonts: FreeType 2.10.
      SVG fonts: Not yet supported.
```

----------------------------------------

TITLE: Add PIL.Image.Image.getchannel Method
DESCRIPTION: A new method, `getchannel`, has been added to `PIL.Image.Image` to efficiently extract a single channel from an image by index or name. This method offers significant performance improvements over previous methods like `image.split()[0]`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.3.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.getchannel(channel: Union[int, str]) -> PIL.Image.Image

Parameters:
  channel (int or str): The index (0-indexed) or name ('R', 'G', 'B', 'A', etc.) of the channel to retrieve.

Returns:
  PIL.Image.Image: A new image containing only the specified channel.

Example:
image.getchannel("A") # Returns the alpha channel as a separate image.
```

----------------------------------------

TITLE: Pillow ImageOps Function Replacements
DESCRIPTION: This section lists `ImageOps` functions that have been removed and provides their corresponding replacements in `ImageFilter` for updated Pillow versions. Users should migrate to the `ImageFilter` equivalents.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_49

LANGUAGE: APIDOC
CODE:
```
Removed                     Use instead
==========================  ============================
``ImageOps.box_blur``       ``ImageFilter.BoxBlur``
``ImageOps.gaussian_blur``  ``ImageFilter.GaussianBlur``
``ImageOps.gblur``          ``ImageFilter.GaussianBlur``
``ImageOps.usm``            ``ImageFilter.UnsharpMask``
``ImageOps.unsharp_mask``   ``ImageFilter.UnsharpMask``
```

----------------------------------------

TITLE: Pillow APNG Save Parameters
DESCRIPTION: Parameters for saving Animated Portable Network Graphics (APNG) files using Pillow's Image.save method, enabling multi-frame animations and default image handling.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_49

LANGUAGE: APIDOC
CODE:
```
Parameter: save_all
  Type: boolean
  Description: If True, an APNG file (including a single frame APNG) will be saved. Required if append_images is not empty.

Parameter: default_image
  Type: boolean
  Description: Specifies whether or not the base image is a default image. If True, the base image will be used as the default image, and the first image from the append_images sequence will be the first APNG animation frame. If False, the base image will be used as the first APNG animation frame.
  Default: False

Parameter: append_images
  Type: list or tuple of images
  Description: A list or tuple of images to append as additional frames. Each of the images in the list can be single or multiframe images. The size of each frame should match the size of the base image.
```

----------------------------------------

TITLE: Image.show 'command' Parameter Removed
DESCRIPTION: The `command` parameter in `Image.show` has been removed. Custom display behavior should now be implemented by subclassing `PIL.ImageShow.Viewer`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.show(title=None, **options)

# 'command' parameter removed.
# Use a subclass of PIL.ImageShow.Viewer instead.
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageShow

class CustomViewer(ImageShow.Viewer):
    # ... custom implementation ...
    pass

ImageShow.register(CustomViewer)

im = Image.new('RGB', (100, 100))
im.show()
```

----------------------------------------

TITLE: Accessing IFD EXIF Tag Values with PIL.ExifTags.IFD
DESCRIPTION: Demonstrates the use of the PIL.ExifTags.IFD enum for accessing Image File Directory (IFD) related EXIF tag values and their names. This enum helps in navigating the structure of EXIF data within an image file.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ExifTags.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.ExifTags.IFD: enum.IntEnum
  Provides constants and clear-text names for Image File Directory (IFD) EXIF tags.
```

LANGUAGE: python
CODE:
```
from PIL.ExifTags import IFD
IFD.Exif.value
34665
IFD(34665).name
'Exif'
```

----------------------------------------

TITLE: Navigate GIF Frames in Pillow
DESCRIPTION: Demonstrates how to use `im.tell()` and `im.seek()` methods to navigate between frames in a multi-frame GIF image. `im.seek()` raises an `EOFError` if seeking beyond the last frame.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_12

LANGUAGE: python
CODE:
```
im.seek(im.tell() + 1)
```

----------------------------------------

TITLE: Load EPS Image with Transparency (Pillow)
DESCRIPTION: Demonstrates how to load an EPS image with a transparent background using the new `transparency` argument in `Image.open().load()`. This switches the Ghostscript device to 'pngalpha' for RGBA output instead of 'ppmraw' for RGB.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.4.0.rst#_snippet_1

LANGUAGE: Python
CODE:
```
with Image.open("sample.eps") as im:
    im.load(transparency=True)
```

----------------------------------------

TITLE: Font Size and Offset Method Replacements
DESCRIPTION: Several legacy functions for calculating text size and offset in `FreeTypeFont`, `ImageFont`, `TransposedFont`, `ImageDraw`, and `ImageDraw2.Draw` have been removed. Users should now use the new `getbbox`, `getlength`, and `multiline_textbbox` methods for equivalent functionality.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Removed Methods and Their Replacements:
- FreeTypeFont.getsize(), FreeTypeFont.getoffset() → FreeTypeFont.getbbox, FreeTypeFont.getlength
- FreeTypeFont.getsize_multiline() → ImageDraw.multiline_textbbox
- ImageFont.getsize() → ImageFont.getbbox, ImageFont.getlength
- TransposedFont.getsize() → TransposedFont.getbbox, TransposedFont.getlength
- ImageDraw.textsize(), ImageDraw.multiline_textsize() → ImageDraw.textbbox, ImageDraw.textlength, ImageDraw.multiline_textbbox
- ImageDraw2.Draw.textsize() → ImageDraw2.Draw.textbbox, ImageDraw2.Draw.textlength
```

----------------------------------------

TITLE: Handling Closed Files in Pillow: Operations After File Closure
DESCRIPTION: This snippet illustrates common pitfalls when working with Pillow images and closed files. It shows that attempting to call load() on an image whose underlying file has already been closed (either explicitly or by exiting a context manager) will result in a failure, emphasizing the importance of keeping the file open until load() is called or using the context manager correctly.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/open_files.rst#_snippet_3

LANGUAGE: Python
CODE:
```
with open("test.jpg", "rb") as f:
    im5 = Image.open(f)
im5.load()  # FAILS, closed file

with Image.open("test.jpg") as im6:
    pass
im6.load()  # FAILS, closed file
```

----------------------------------------

TITLE: Improved Bicubic and Bilinear Downscaling Quality
DESCRIPTION: Pillow 2.7.0 updates `BILINEAR` and `BICUBIC` filters to use a high-quality convolutions-based algorithm for downscaling, similar to the `ANTIALIAS` filter. This resolves previous unsatisfactory results and eliminates the need for multi-step downscaling tricks.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/2.7.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.resize(size, resample=PIL.Image.BILINEAR or PIL.Image.BICUBIC): Image
  Description: Resizes an image using the specified resampling filter.
  resample: The filter to use for resampling.
    Values: PIL.Image.NEAREST, PIL.Image.BILINEAR, PIL.Image.BICUBIC, PIL.Image.ANTIALIAS (now LANCZOS)
  Change: BILINEAR and BICUBIC now use a high-quality convolutions-based algorithm for improved downscaling quality.
PIL.Image.Image.thumbnail(size, resample=PIL.Image.BILINEAR or PIL.Image.BICUBIC): None
  Description: Creates a thumbnail image using the specified resampling filter.
  resample: The filter to use for resampling.
    Values: PIL.Image.NEAREST, PIL.Image.BILINEAR, PIL.Image.BICUBIC, PIL.Image.ANTIALIAS (now LANCZOS)
  Change: BILINEAR and BICUBIC now use a high-quality convolutions-based algorithm for improved downscaling quality.
```

----------------------------------------

TITLE: Open Image from HTTP Response Objects with Pillow
DESCRIPTION: Demonstrates the direct opening of images from `urllib2` and `requests` HTTP response objects using `Image.open()`, leveraging the new functionality in Pillow 2.8.0 that handles file-like objects without `.seek()` support.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/2.8.0.rst#_snippet_0

LANGUAGE: Python
CODE:
```
Image.open(urllib2.urlopen(url))
Image.open(requests.get(url, stream=True).raw)
```

----------------------------------------

TITLE: Draw Pie Slice in Pillow ImageDraw
DESCRIPTION: Draws an arc and connects its endpoints to the center of the bounding box with straight lines, creating a pie slice shape. This is useful for charts or segmented circular graphics. (width parameter added in version 5.3.0)
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_15

LANGUAGE: APIDOC
CODE:
```
ImageDraw.pieslice(xy, start, end, fill=None, outline=None, width=1)
  Parameters:
    xy: Two points to define the bounding box. Sequence of [(x0, y0), (x1, y1)] or [x0, y0, x1, y1], where x1 >= x0 and y1 >= y0.
    start: Starting angle, in degrees. Angles are measured from 3 o'clock, increasing clockwise.
    end: Ending angle, in degrees.
    fill: Color to use for the fill.
    outline: Color to use for the outline.
    width: The line width, in pixels. (versionadded: 5.3.0)
```

----------------------------------------

TITLE: PIL.TiffTags.TAGS Dictionary and Example
DESCRIPTION: A dictionary mapping 16-bit integer TIFF tag numbers to descriptive string names, containing a superset of tags from TAGS_V2, common EXIF tags, and other well-known metadata tags.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/TiffTags.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Data: PIL.TiffTags.TAGS
Type: dict
Description: The TAGS dictionary maps 16-bit integer TIFF tag number to descriptive string names. This dictionary contains a superset of the tags in PIL.TiffTags.TAGS_V2, common EXIF tags, and other well known metadata tags.
```

LANGUAGE: python
CODE:
```
from PIL.TiffTags import TAGS
TAGS[0x010e]
# Expected Output: 'ImageDescription'
```

----------------------------------------

TITLE: Removed ImageCms.CmsProfile Attributes
DESCRIPTION: Documents the removal of several attributes from `PIL.ImageCms.core.CmsProfile`, deprecated since 3.2.0 and removed in 8.0.0. A `DeprecationWarning` was issued from 6.0.0. Provides a mapping of removed attributes to their recommended replacements.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_41

LANGUAGE: APIDOC
CODE:
```
Removed: color_space, Use instead: Padded .CmsProfile.xcolor_space
Removed: pcs, Use instead: Padded .CmsProfile.connection_space
Removed: product_copyright, Use instead: Unicode .CmsProfile.copyright
Removed: product_desc, Use instead: Unicode .CmsProfile.profile_description
Removed: product_description, Use instead: Unicode .CmsProfile.profile_description
Removed: product_manufacturer, Use instead: Unicode .CmsProfile.manufacturer
Removed: product_model, Use instead: Unicode .CmsProfile.model
```

----------------------------------------

TITLE: Deprecation of FreeType 2.9.0 support
DESCRIPTION: Support for FreeType 2.9.0 is deprecated since Pillow 11.0.0 and will be removed in Pillow 12.0.0. Users should update their FreeType library version.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
FreeType 2.9.0
```

----------------------------------------

TITLE: Improved Thumbnail Geometry Calculation in Pillow
DESCRIPTION: Describes the enhancement in Pillow's `Image.thumbnail()` method, where new dimensions are now rounded to the nearest integer instead of always rounding down. This change improves the preservation of the original aspect ratio and ensures correct weight for the last row/column in JPEG DCT scaling.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.0.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.thumbnail()
  Behavior Change:
    - New dimensions are now rounded to the nearest integer instead of always rounding down.
    - Improves preservation of original aspect ratio.
    - Ensures correct weight for last row/column in JPEG DCT scaling when image width/height is not divisible by 8.
```

----------------------------------------

TITLE: Opening Image from a Tar Archive (Pillow)
DESCRIPTION: Demonstrates accessing and opening an image embedded within a tar archive using `PIL.TarIO`. This allows direct image access without needing to extract the entire archive, useful for large collections.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_34

LANGUAGE: Python
CODE:
```
from PIL import Image, TarIO

fp = TarIO.TarIO("hopper.tar", "hopper.jpg")
im = Image.open(fp)
```

----------------------------------------

TITLE: Crop Local GIF Image Data in Pillow
DESCRIPTION: Illustrates how to open a GIF file and crop it to its 'local image' rectangle, which contains the actual pixel data, rather than the logical screen size. This is useful for extracting individual frames or specific image areas.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_14

LANGUAGE: python
CODE:
```
im = Image.open(...)

if im.tile[0][0] == "gif":
    # only read the first "local image" from this GIF file
    box = im.tile[0][1]
    im = im.crop(box)
```

----------------------------------------

TITLE: Add alpha_quality Argument for WebP Image Saving in Pillow
DESCRIPTION: Introduces a new `alpha_quality` argument for saving WebP images. This integer parameter, ranging from 0 to 100, allows for lossy compression of the alpha channel when set to values other than 100.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.3.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
WebP Image Saving:
  Argument: alpha_quality
    Type: int
    Range: 0-100
    Description: Controls the quality of alpha channel compression. Values other than 100 enable lossy compression.
```

----------------------------------------

TITLE: New Optional Parameters for `PIL.ImageDraw.floodfill` and Image Writers
DESCRIPTION: Pillow 4.2.0 adds new optional parameters to existing functions. `PIL.ImageDraw.floodfill` now includes a `threshold` parameter to specify color tolerance. Additionally, TIFF and PDF image writers support an `append_images` parameter for creating multi-page outputs from multiple images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.2.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.ImageDraw.floodfill:
  Parameters:
    threshold (int, optional): Tolerance for the color to replace during flood fill.

TIFF and PDF Image Writers:
  Parameters:
    append_images (list of PIL.Image.Image, optional): Additional images to append for multi-page output.
```

----------------------------------------

TITLE: Added 'alpha_only' Argument to Image.Image.getbbox
DESCRIPTION: The `Image.Image.getbbox` method now accepts an optional `alpha_only` keyword argument. When `True` (default) and an alpha channel exists, it trims transparent pixels; otherwise, it trims pixels where all channels are zero.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Added Parameter: PIL.Image.Image.getbbox(alpha_only: bool = True)
```

----------------------------------------

TITLE: Removed Undocumented ImageOps Functions
DESCRIPTION: Several undocumented functions in `ImageOps` have been removed, deprecated in 4.3.0 and removed in 6.0.0. Users should use equivalent functions in `ImageFilter` instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_48

LANGUAGE: APIDOC
CODE:
```
Undocumented ImageOps functions removed. Use equivalents in ImageFilter instead.
```

----------------------------------------

TITLE: MPO File Handling and Saving Options
DESCRIPTION: Details on how Pillow reads and writes Multi Picture Object (MPO) files, including navigation with seek/tell and options for saving multiple frames.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_41

LANGUAGE: APIDOC
CODE:
```
Pillow reads and writes Multi Picture Object (MPO) files. When first opened, it loads the primary image. The PIL.Image.Image.seek and PIL.Image.Image.tell methods may be used to read other pictures from the file. The pictures are zero-indexed and random access is supported.
```

LANGUAGE: APIDOC
CODE:
```
Saving:
  When calling PIL.Image.Image.save to write an MPO file, by default only the first frame of a multiframe image will be saved. If the save_all argument is present and true, or if append_images is not empty, all frames will be saved.
```

LANGUAGE: APIDOC
CODE:
```
append_images: list[PIL.Image.Image]
  A list of images to append as additional pictures. Each of the images in the list can be single or multiframe images.
  Version added: 9.3.0
```

----------------------------------------

TITLE: PNG File Handling and Opening Properties
DESCRIPTION: Pillow's comprehensive support for PNG files, including various data types, interlacing, EXIF data handling, and properties set during opening.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_45

LANGUAGE: APIDOC
CODE:
```
Pillow identifies, reads, and writes PNG files containing 1, L, LA, I, P, RGB or RGBA data. Interlaced files are supported as of v1.1.7.
As of Pillow 6.0, EXIF data can be read from PNG images. However, unlike other image formats, EXIF data is not guaranteed to be present in PIL.Image.Image.info until PIL.Image.Image.load has been called.
By default Pillow doesn't allow loading of truncated PNG files, set .ImageFile.LOAD_TRUNCATED_IMAGES to override this.
```

LANGUAGE: APIDOC
CODE:
```
Opening:
  The PIL.Image.open function sets the following PIL.Image.Image.info properties, when appropriate:
  chromaticity: tuple[float, ...]
    The chromaticity points, as an 8 tuple of floats. (White Point X, White Point Y, Red X, Red Y, Green X, Green Y, Blue X, Blue Y)
```

LANGUAGE: APIDOC
CODE:
```
gamma: float
  Gamma, given as a floating point number.
```

LANGUAGE: APIDOC
CODE:
```
srgb: int
  The sRGB rendering intent as an integer:
    0 Perceptual
    1 Relative Colorimetric
    2 Saturation
    3 Absolute Colorimetric
```

LANGUAGE: APIDOC
CODE:
```
transparency: int | bytes
  For P images: Either the palette index for full transparent pixels, or a byte string with alpha values for each palette entry.
  For 1, L, I and RGB images, the color that represents full transparent pixels in this image.
  This key is omitted if the image is not a transparent palette image.
```

LANGUAGE: APIDOC
CODE:
```
Image.text: dict
  PIL.Image.open also sets Image.text to a dictionary of the values of the tEXt, zTXt, and iTXt chunks of the PNG image. Individual compressed chunks are limited to a decompressed size of .PngImagePlugin.MAX_TEXT_CHUNK (by default 1MB), to prevent decompression bombs. Additionally, the total size of all of the text chunks is limited to .PngImagePlugin.MAX_TEXT_MEMORY (defaulting to 64MB).
```

----------------------------------------

TITLE: Append frames to GIF files with append_images
DESCRIPTION: Additional frames can now be appended when saving a GIF file by using the `append_images` argument. This argument accepts a list of images, which can themselves contain multiple frames. Note that `append_images` is only utilized if `save_all` is also set to `True`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/3.4.0.rst#_snippet_4

LANGUAGE: Python
CODE:
```
im.save(out, save_all=True, append_images=[im1, im2, ...])
```

----------------------------------------

TITLE: ImageDraw Methods Now Support Float Arguments
DESCRIPTION: Pillow 3.1.0 updates the `ImageDraw.arc`, `ImageDraw.chord`, and `ImageDraw.pieslice` methods to accept float values for their start and end arguments, eliminating the previous requirement for integers. These float values are directly utilized in the drawing process for more precise rendering.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/3.1.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ImageDraw.arc(xy, start, end, fill=None, width=0)
ImageDraw.chord(xy, start, end, fill=None, outline=None, width=0)
ImageDraw.pieslice(xy, start, end, fill=None, outline=None, width=0)

Parameters:
  start (float): The start angle in degrees.
  end (float): The end angle in degrees.
```

----------------------------------------

TITLE: Quantize Class (Quantization Methods)
DESCRIPTION: An enumeration used to specify the quantization method for reducing the number of colors in an image, primarily for the `Image.quantize` method. Options include MEDIANCUT, MAXCOVERAGE, FASTOCTREE, and LIBIMAGEQUANT.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_31

LANGUAGE: APIDOC
CODE:
```
Quantize
  MEDIANCUT: Median cut. Default method, except for RGBA images. This method does not support RGBA images.
  MAXCOVERAGE: Maximum coverage. This method does not support RGBA images.
  FASTOCTREE: Fast octree. Default method for RGBA images.
  LIBIMAGEQUANT: libimagequant. Check support using PIL.features.check_feature with feature="libimagequant".
```

----------------------------------------

TITLE: Pillow API: Image.frombuffer 'raw' Decoder Deprecation
DESCRIPTION: API documentation regarding the deprecation of Image.frombuffer defaults for the 'raw' decoder. The change, previously warned about, is now confirmed to take place in Pillow 7.0.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.2.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Image.frombuffer
  Deprecation: The defaults of Image.frombuffer for the "raw" decoder may change in Pillow 7.0.
  Note: This change will now take place in Pillow 7.0.
```

----------------------------------------

TITLE: Calculate Text Length in Pillow with Kerning Disabled
DESCRIPTION: Shows how to disable kerning using the `features=['-kern']` parameter when calculating text length with `draw.textlength`. This simplifies length calculation as no manual adjustment is needed, ensuring the sum of individual lengths matches the combined string's length. Requires `libraqm`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_27

LANGUAGE: python
CODE:
```
hello = draw.textlength("Hello", font, features=["-kern"])
world = draw.textlength("World", font, features=["-kern"])
hello_world = hello + world  # kerning is disabled, no need to adjust
assert hello_world == draw.textlength("HelloWorld", font, features=["-kern"])  # True
```

----------------------------------------

TITLE: Add XMP Data to JPEG and MPO Images
DESCRIPTION: XMP data can now be saved to JPEG files using the `xmp` argument in `save()` or by setting it in the `Image.Image.info` dictionary for both JPEG and MPO images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.0.0.rst#_snippet_10

LANGUAGE: Python
CODE:
```
im.save("out.jpg", xmp=b"test")
```

LANGUAGE: Python
CODE:
```
im.info["xmp"] = b"test"
im.save("out.jpg")
```

----------------------------------------

TITLE: ImageDraw.Draw.polygon Adds Line Width Parameter
DESCRIPTION: An optional `width` parameter has been added to `ImageDraw.Draw.polygon`, allowing users to specify the line width when drawing polygons.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_10

LANGUAGE: APIDOC
CODE:
```
PIL.ImageDraw.Draw.polygon(xy, fill=None, outline=None, width=1)
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageDraw

im = Image.new('RGB', (200, 200), color = 'white')
draw = ImageDraw.Draw(im)

# Draw a polygon with a specified line width
draw.polygon([(50, 50), (150, 50), (100, 150)], outline='red', width=5)

im.save('polygon_with_width.png')
```

----------------------------------------

TITLE: Removed PyAccess and Image.USE_CFFI_ACCESS
DESCRIPTION: The `PyAccess` module and `Image.USE_CFFI_ACCESS` attribute have been removed as Pillow's C API is now faster on PyPy. The C API is now used by default.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.0.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.PyAccess: Removed
PIL.Image.USE_CFFI_ACCESS: Removed
```

----------------------------------------

TITLE: Pillow APNG Image Properties
DESCRIPTION: Properties set for APNG frames when loaded using Pillow, providing information about animation loops, frame duration, and the presence of a default image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_48

LANGUAGE: APIDOC
CODE:
```
Property: default_image
  Type: boolean
  Description: Specifies whether or not this APNG file contains a separate default image, which is not a part of the actual APNG animation.
  Values:
    True: The APNG contains default image, which is not an animation frame. The initially loaded image (i.e. the result of seek(0)) will be the default image. The n_frames property will be set to frame_count + 1.
    False: The APNG does not contain a default image. The n_frames property will be set to the actual APNG animation frame count. The initially loaded image (i.e. seek(0)) will be the first APNG animation frame.

Property: loop
  Type: int
  Description: The number of times to loop this APNG, 0 indicates infinite looping.

Property: duration
  Type: int (milliseconds)
  Description: The time to display this APNG frame (in milliseconds).
```

----------------------------------------

TITLE: Mapping GPS EXIF Tags to Names with PIL.ExifTags.GPSTAGS Dictionary
DESCRIPTION: Demonstrates the use of the PIL.ExifTags.GPSTAGS dictionary to map 8-bit integer EXIF GPS enumerations to their descriptive string names. This dictionary is specifically designed for interpreting GPS-related EXIF tags.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ExifTags.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
PIL.ExifTags.GPSTAGS: dict
  Maps 8-bit integer EXIF GPS enumerations to descriptive string names.
```

LANGUAGE: python
CODE:
```
from PIL.ExifTags import GPSTAGS
GPSTAGS[20]
'GPSDestLatitude'
```

----------------------------------------

TITLE: Pillow Gaussian Blur Quality Enhancement
DESCRIPTION: The new Gaussian blur implementation addresses a limitation of the previous version by considering a wider range of source pixels. This results in higher quality blur that is more comparable to other Gaussian blur software.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/2.7.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
PIL.ImageFilter.GaussianBlur(radius)
  Previous quality:
    Only considered source pixels within 2 * standard deviation radius.
    Resulted in lower quality compared to other software.
  New quality:
    Considers a wider range of source pixels.
    Provides improved quality, comparable to other Gaussian blur implementations.
```

----------------------------------------

TITLE: Pillow API: ImageGrab.grab all_screens Argument
DESCRIPTION: API documentation for the new "all_screens" argument added to ImageGrab.grab. When set to True, this argument enables the capture of all connected monitors into a single image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.2.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
ImageGrab.grab
  Arguments:
    all_screens: bool
      Description: If True, all monitors will be included in the created image.
```

----------------------------------------

TITLE: Pillow Drops Python 3.6 Support
DESCRIPTION: Pillow no longer supports Python 3.6, which reached its end-of-life on December 23, 2021. Users should upgrade to a newer Python version.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_4

LANGUAGE: Python
CODE:
```
# Python 3.6 is no longer supported.
# Upgrade to Python 3.7+.
```

----------------------------------------

TITLE: Removed Deprecated VERSION Attribute
DESCRIPTION: The old PIL version constant `VERSION`, which always returned '1.1.7', has been removed from Pillow. For retrieving the current Pillow version, use `PIL.__version__` instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL:
  - VERSION (removed)
Recommendation: Use PIL.__version__ instead.
```

----------------------------------------

TITLE: Deprecation of Experimental BGR Image Modes
DESCRIPTION: The experimental BGR;15, BGR;16, and BGR;24 image modes have been deprecated. Users should transition to supported image modes.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.4.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Deprecated Image Modes:
  - BGR;15
  - BGR;16
  - BGR;24
Recommendation: Use alternative supported image modes.
```

----------------------------------------

TITLE: PIL.Image.Image.has_transparency_data Attribute
DESCRIPTION: An automatically documented attribute indicating the presence of transparency data within the image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_15

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.has_transparency_data
```

----------------------------------------

TITLE: PIL.Image.Image.draft API Reference
DESCRIPTION: The `Image.Image.draft` method reconfigures the image decoder to match a desired mode and size as closely as possible, without fully loading the image. This is primarily used for performance optimization with JPEG and MPO files, such as for quick previews or thumbnails.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_39

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.draft(mode: str, size: Tuple[int, int]) -> None

Parameters:
  mode: The target mode for the image (e.g., 'L', 'RGB').
  size: A tuple (width, height) representing the desired maximum size.

Notes:
  The actual resulting mode and size may not exactly match the request.
  This method is only effective for JPEG and MPO image formats.
  For precise resizing, consider using the 'thumbnail' method instead.
```

----------------------------------------

TITLE: Pillow Resampling Filter: BICUBIC
DESCRIPTION: The BICUBIC filter uses cubic interpolation to calculate output pixel values. For resizing, it considers all contributing pixels; for other transformations, it uses a 4x4 environment.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_12

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Resampling.BICUBIC
Description: For resize calculate the output pixel value using cubic interpolation on all pixels that may contribute to the output value.
For other transformations cubic interpolation over a 4x4 environment in the input image is used.
```

----------------------------------------

TITLE: API Change: Image.alpha_composite 'dest' argument
DESCRIPTION: The `dest` argument in `PIL.Image.Image.alpha_composite` now supports negative coordinates, similar to `box` in `PIL.Image.Image.paste`, allowing for cropping of the overlaid image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.2.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.alpha_composite(im, dest=(x, y))
Parameters:
  dest: (x, y) tuple, top-left corner of the destination. Negative coordinates are now accepted.
```

----------------------------------------

TITLE: Deprecated: ImageFile.raise_ioerror function
DESCRIPTION: The `ImageFile.raise_ioerror` function has been removed in Pillow 9.0.0 (deprecated in 7.2.0) because `IOError` was merged into `OSError` in Python 3.3. Use `ImageFile.raise_oserror` instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_37

LANGUAGE: APIDOC
CODE:
```
ImageFile.raise_ioerror() -> None
  - Deprecated: 7.2.0
  - Removed: 9.0.0
  - Reason: IOError merged into OSError in Python 3.3.
  - Replacement: Use ImageFile.raise_oserror().
```

----------------------------------------

TITLE: Register Custom WMF/EMF Handler in Pillow
DESCRIPTION: This example shows how to register a custom handler for WMF and EMF files in Pillow. By implementing the `ImageFile.StubHandler` interface, developers can define custom `open`, `load`, and `save` behaviors for these formats, allowing for extended or specialized processing.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_65

LANGUAGE: Python
CODE:
```
from typing import IO

from PIL import Image, ImageFile
from PIL import WmfImagePlugin


class WmfHandler(ImageFile.StubHandler):
    def open(self, im: ImageFile.StubImageFile) -> None:
        ...

    def load(self, im: ImageFile.StubImageFile) -> Image.Image:
        ...
        return image

    def save(self, im: Image.Image, fp: IO[bytes], filename: str) -> None:
        ...


wmf_handler = WmfHandler()

WmfImagePlugin.register_handler(wmf_handler)

im = Image.open("sample.wmf")
```

----------------------------------------

TITLE: PIL.ImageMath Expression Syntax Overview
DESCRIPTION: Describes the general syntax for expressions used with `PIL.ImageMath` functions. `lambda_eval` uses functions receiving a dictionary, while `unsafe_eval` uses standard Python expressions in a non-standard environment. Includes warnings about `unsafe_eval`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Expression syntax:
  lambda_eval expressions:
    - Functions that receive a dictionary containing images and operators.
  unsafe_eval expressions:
    - Standard Python expressions, evaluated in a non-standard environment.
  Danger:
    - unsafe_eval uses Python's eval() function and carries security risks.
    - lambda_eval is a more secure alternative.
```

----------------------------------------

TITLE: PNG Saving Options
DESCRIPTION: Parameters available when saving PNG files using Pillow.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_46

LANGUAGE: APIDOC
CODE:
```
The PIL.Image.Image.save method supports the following options:
optimize: bool
```

----------------------------------------

TITLE: Pillow ImageGrab.grab Linux Behavior
DESCRIPTION: This section details the behavior of the `ImageGrab.grab` method specifically on Linux. It explains how the method utilizes `gnome-screenshot` for display capture when `xdisplay` is `None`, and provides instructions on how to explicitly capture the default X11 display instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.2.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
ImageGrab.grab(xdisplay=None) (Linux specific)
  Parameters:
    xdisplay:
      Type: str or None
      Description: Controls the display capture method.
      Values:
        None: If gnome-screenshot is installed, it will be used to capture the display.
        "": Captures the default X11 display instead of using gnome-screenshot.
```

----------------------------------------

TITLE: Pillow Security: ImageFont.getmask Glyph Trimming
DESCRIPTION: To protect against DOS attacks when using PIL fonts, `PIL.ImageFont.ImageFont` now trims individual glyph sizes to prevent them from extending beyond the bitmap image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.2.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.ImageFont.ImageFont:
  Trims individual glyph sizes in getmask to prevent bitmap overflow.
```

----------------------------------------

TITLE: Pillow Image Transparency via Info Attribute
DESCRIPTION: Details how transparency can be specified for images without an alpha band by using the 'transparency' key within the `PIL.Image.Image.info` dictionary. This value can vary based on the image mode and format.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/concepts.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.info["transparency"]
  Description: Specifies transparency for images that do not have an alpha band.
  Possible Values:
    - Single integer: For '1', 'L', 'I', or 'P' mode images, this integer value represents the transparent pixel.
    - Three integers: For 'RGB' mode PNG images, one integer for each channel (R, G, B).
    - Byte string: For 'P' mode images, specifies the alpha value for each entry in the color palette.
```

----------------------------------------

TITLE: Add PerspectiveTransform Class to Pillow
DESCRIPTION: Announces the addition of `PIL.ImageTransform.PerspectiveTransform`, completing the set of `PIL.Image.Transform` values with corresponding subclasses of `PIL.ImageTransform.Transform`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.3.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.ImageTransform.PerspectiveTransform:
  Type: Class
  Description: New class added to provide a corresponding subclass for PIL.Image.Transform values.
```

----------------------------------------

TITLE: Added Line Width Parameter to ImageDraw.Draw.regular_polygon
DESCRIPTION: An optional `width` parameter has been added to the `ImageDraw.Draw.regular_polygon` method, allowing control over the line thickness when drawing polygons.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Added Parameter: ImageDraw.Draw.regular_polygon(width: int = None)
```

----------------------------------------

TITLE: Deprecation of LibTIFF versions earlier than 4
DESCRIPTION: Support for LibTIFF versions earlier than 4 has been deprecated since Pillow 10.4.0. Users are advised to upgrade to a newer version of LibTIFF.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
LibTIFF < 4.0
```

----------------------------------------

TITLE: New `DecompressionBomb` Warning for `PIL.Image.Image.crop`
DESCRIPTION: Pillow 4.2.0 introduces a `DecompressionBomb` warning that may be raised by `PIL.Image.Image.crop`. This warning occurs if the specified crop region would enlarge the image beyond the maximum pixel threshold defined by `PIL.Image.MAX_IMAGE_PIXELS`, preventing potential memory issues.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.2.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.crop:
  Raises:
    DecompressionBombWarning: If the crop region enlarges the image beyond PIL.Image.MAX_IMAGE_PIXELS.
  Threshold:
    PIL.Image.MAX_IMAGE_PIXELS
```

----------------------------------------

TITLE: PIL.ImageDraw.font Attribute
DESCRIPTION: The current default font. Can be set per instance or globally for all future ImageDraw instances.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
ImageDraw.font
  Description: The current default font.
  Usage (per instance):
    from PIL import ImageDraw, ImageFont
    draw = ImageDraw.Draw(image)
    draw.font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
  Usage (globally):
    from PIL import ImageDraw, ImageFont
    ImageDraw.ImageDraw.font = ImageFont.truetype("Tests/fonts/FreeMono.ttf")
```

----------------------------------------

TITLE: Deprecation of IptcImageFile helper functions and constant
DESCRIPTION: The `IptcImageFile.dump`, `IptcImageFile.i` functions, and the `IptcImageFile.PAD` constant are deprecated since Pillow 10.2.0 and will be removed in Pillow 12.0.0. These are undocumented internal helper functions with no direct replacement, as they can be replicated with single lines of Python's built-in functions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
IptcImageFile.dump
IptcImageFile.i
IptcImageFile.PAD
```

----------------------------------------

TITLE: API Addition: PIL.Image.Image.has_transparency_data Attribute
DESCRIPTION: The `has_transparency_data` attribute indicates whether an image contains transparency information, such as an alpha channel, a palette with an alpha channel, or a 'transparency' key in the `info` dictionary. Even if true, the image might appear solid if all transparency values are opaque.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.1.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.has_transparency_data
  Type: Attribute (boolean)
  Description: Indicates whether the image has transparency data.
  Transparency Sources: Alpha channel, palette with alpha channel, or 'transparency' key in `PIL.Image.Image.info` dictionary.
  Note: An image can have transparency data but still appear solid if all values are opaque.
```

----------------------------------------

TITLE: Pillow 9.2.0 Deprecated vs. Recommended Font and Text Measurement API
DESCRIPTION: This API documentation provides a comprehensive mapping of font and text measurement methods that were deprecated in Pillow 9.2.0 to their modern, recommended alternatives. It serves as a reference for developers to update their code to use the new `getbbox` and `getlength` family of methods, which offer improved accuracy and clarity in text dimension calculations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.2.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Deprecated                                                      Use instead
=============================================================== =============================================================================================================
``FreeTypeFont.getsize()`` and ``FreeTypeFont.getoffset()``     :py:meth:`.FreeTypeFont.getbbox` and :py:meth:`.FreeTypeFont.getlength`
``FreeTypeFont.getsize_multiline()``                            :py:meth:`.ImageDraw.multiline_textbbox`
``ImageFont.getsize()``                                         :py:meth:`.ImageFont.getbbox` and :py:meth:`.ImageFont.getlength`
``TransposedFont.getsize()``                                    :py:meth:`.TransposedFont.getbbox` and :py:meth:`.TransposedFont.getlength`
``ImageDraw.textsize()`` and ``ImageDraw.multiline_textsize()`` :py:meth:`.ImageDraw.textbbox`, :py:meth:`.ImageDraw.textlength` and :py:meth:`.ImageDraw.multiline_textbbox`
``ImageDraw2.Draw.textsize()``                                  :py:meth:`.ImageDraw2.Draw.textbbox` and :py:meth:`.ImageDraw2.Draw.textlength`
=============================================================== =============================================================================================================
```

----------------------------------------

TITLE: Extend `cutoff` parameter for `ImageOps.autocontrast` in Pillow 8.0.0
DESCRIPTION: The `cutoff` parameter for `ImageOps.autocontrast` in Pillow 8.0.0 now accepts a tuple `(low, high)` in addition to a single number. This allows for independent control over the low and high end cutoff percentages for histogram adjustment.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
ImageOps.autocontrast function:
  Parameter: cutoff
    Type: number or tuple (low, high)
    Description: Previously a single number for low/high cutoff.
                 Now can be a tuple (low, high) for independent control.
```

----------------------------------------

TITLE: Deprecated: Image._showxv method
DESCRIPTION: The `Image._showxv` method has been removed in Pillow 9.0.0 (deprecated in 7.2.0). Use `Image.Image.show` instead. For custom behavior, use `ImageShow.register` to add a custom `ImageShow.Viewer` class.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_36

LANGUAGE: APIDOC
CODE:
```
Image._showxv() -> None
  - Deprecated: 7.2.0
  - Removed: 9.0.0
  - Replacement: Use Image.Image.show(). For custom behavior, use ImageShow.register() with a custom ImageShow.Viewer class.
```

----------------------------------------

TITLE: Support for display_jpeg() in IPython
DESCRIPTION: Pillow now supports displaying JPEG images in IPython environments using the `display_jpeg()` function, in addition to existing `display()` and `display_png()` methods.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_11

LANGUAGE: Python
CODE:
```
from PIL import Image
from IPython.display import display_jpeg

im = Image.new("RGB", (100, 100), (255, 0, 0))
display_jpeg(im)
```

----------------------------------------

TITLE: Remove `im.offset()` in Pillow 8.0.0
DESCRIPTION: The `im.offset()` method has been removed in Pillow 8.0.0. Users should now call `ImageChops.offset()` for similar functionality.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Removed: im.offset()
Use instead: ImageChops.offset()
```

----------------------------------------

TITLE: Removed: Image.offset method
DESCRIPTION: The `im.offset()` method has been removed in Pillow 8.0.0 (deprecated in PIL 1.1.2). Call `ImageChops.offset()` instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_39

LANGUAGE: APIDOC
CODE:
```
Image.offset() -> None
  - Deprecated: PIL 1.1.2
  - Removed: Pillow 8.0.0
  - Replacement: Use ImageChops.offset().
```

----------------------------------------

TITLE: Accessing Interoperability EXIF Tag Values with PIL.ExifTags.Interop
DESCRIPTION: Shows how to use the PIL.ExifTags.Interop enum to retrieve integer values and names for interoperability-related EXIF tags. This enum is crucial for handling tags that define relationships between images or image files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ExifTags.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.ExifTags.Interop: enum.IntEnum
  Provides constants and clear-text names for Interoperability EXIF tags.
```

LANGUAGE: python
CODE:
```
from PIL.ExifTags import Interop
Interop.RelatedImageFileFormat.value
4096
Interop(4096).name
'RelatedImageFileFormat'
```

----------------------------------------

TITLE: Pillow EXIF SubIFD Writing Support
DESCRIPTION: Pillow now supports writing subIFDs, such as the GPS IFD, when saving EXIF data. This functionality is designed to work automatically when an image is saved with its original EXIF data, for example, after using `PIL.ImageOps.exif_transpose`. Previously, the first tag's code in a subIFD was incorrectly written as the offset.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_14

LANGUAGE: APIDOC
CODE:
```
PIL.ImageOps.exif_transpose(image)

# When saving EXIF data, subIFDs (e.g., GPS IFD) are now correctly written.
```

----------------------------------------

TITLE: Pillow Raw Decoder Modes and Data Types
DESCRIPTION: Documents the various raw modes supported by Pillow's `raw` decoder, detailing the data type and endianness for each mode. These modes allow reading image data packed in standard machine data types.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/writing-your-own-image-plugin.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
mode         description
============ =======================================
`F`          32-bit native floating point.
`F;8`        8-bit unsigned integer.
`F;8S`       8-bit signed integer.
`F;16`       16-bit little endian unsigned integer.
`F;16S`      16-bit little endian signed integer.
`F;16B`      16-bit big endian unsigned integer.
`F;16BS`     16-bit big endian signed integer.
`F;16N`      16-bit native unsigned integer.
`F;16NS`     16-bit native signed integer.
`F;32`       32-bit little endian unsigned integer.
`F;32S`      32-bit little endian signed integer.
`F;32B`      32-bit big endian unsigned integer.
`F;32BS`     32-bit big endian signed integer.
`F;32N`      32-bit native unsigned integer.
`F;32NS`     32-bit native signed integer.
`F;32F`      32-bit little endian floating point.
`F;32BF`     32-bit big endian floating point.
`F;32NF`     32-bit native floating point.
`F;64F`      64-bit little endian floating point.
`F;64BF`     64-bit big endian floating point.
`F;64NF`     64-bit native floating point.
```

----------------------------------------

TITLE: TIFF Encoder Quality Parameter for JPEG Compression
DESCRIPTION: The TIFF encoder now accepts a `quality` parameter for `jpeg` compressed TIFF files. This parameter, ranging from 0 (worst) to 100 (best), controls the image quality, similar to the JPEG encoder. The default quality is 75.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.1.0.rst#_snippet_6

LANGUAGE: Python
CODE:
```
im.save("out.tif", compression="jpeg", quality=85)
```

----------------------------------------

TITLE: Accessing JPEG Comments via Image Info
DESCRIPTION: Pillow 7.1.0 enables reading JPEG comments directly into the `Image.Image.info` dictionary when an image is opened. This allows programmatic access to embedded metadata within JPEG files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.1.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.info
```

----------------------------------------

TITLE: Pillow GifImagePlugin Loading Strategy Options
DESCRIPTION: Pillow 9.0.0 introduced GIF frame conversion to `RGB`/`RGBA`. New `GifImagePlugin.LoadingStrategy` options allow controlling this behavior, including converting the first `P` frame to `RGB` or keeping subsequent frames in `P` mode if the palette is consistent.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_10

LANGUAGE: python
CODE:
```
from PIL import GifImagePlugin
GifImagePlugin.LOADING_STRATEGY = GifImagePlugin.LoadingStrategy.RGB_ALWAYS
```

LANGUAGE: python
CODE:
```
from PIL import GifImagePlugin
GifImagePlugin.LOADING_STRATEGY = GifImagePlugin.LoadingStrategy.RGB_AFTER_DIFFERENT_PALETTE_ONLY
```

----------------------------------------

TITLE: Use new ExifTags enums for IFD, Interop, and LightSource
DESCRIPTION: Pillow now includes new `ExifTags` enums: `IFD`, `Interop`, and `LightSource`. These enums enhance readability and type safety when working with EXIF data, allowing for more structured access to IFD, Interop IFD, and LightSource tag values.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.4.0.rst#_snippet_3

LANGUAGE: Python
CODE:
```
from PIL import Image, ExifTags
im = Image.open("Tests/images/flower.jpg")
print(im.getexif().get_ifd(ExifTags.IFD.Exif))
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ExifTags
im = Image.open("Tests/images/flower.jpg")
interop_ifd = im.getexif().get_ifd(ExifTags.IFD.Interop)
print(interop_ifd.get(ExifTags.Interop.InteropIndex))  # R98
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ExifTags
im = Image.open("Tests/images/iptc.jpg")
exif_ifd = im.getexif().get_ifd(ExifTags.IFD.Exif)
print(ExifTags.LightSource(exif_ifd[0x9208]))  # LightSource.Unknown
```

----------------------------------------

TITLE: Address ImagePath.Path Array Handling Vulnerabilities (CVE-2022-22815, CVE-2022-22816)
DESCRIPTION: Fixes vulnerabilities (CVE-2022-22815, CVE-2022-22816) related to array handling during the initialization of `ImagePath.Path` objects, improving stability and security.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_3

LANGUAGE: Python
CODE:
```
ImagePath.Path initialization: Addressed array handling vulnerabilities (CWE-126, CWE-665).
```

----------------------------------------

TITLE: ImageSequence.all_frames Method
DESCRIPTION: A new method to facilitate applying a given function to all frames in an image, or to all frames in a list of images. The frames are returned as a list of separate images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.1.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
ImageSequence.all_frames(im, func=None)

Applies a function to all frames in an image or list of images.

Parameters:
  im: The image or list of images to process.
  func: An optional function to apply to each frame. If provided, the function will be called with each frame as an argument, and its return value will be used.

Returns:
  A list of separate Image.Image instances, one for each frame.
```

LANGUAGE: Python
CODE:
```
ImageSequence.all_frames(im, lambda im_frame: im_frame.rotate(90))
```

----------------------------------------

TITLE: Performance Improvements with zlib-ng in Pillow Wheels
DESCRIPTION: Pillow wheels are now built against zlib-ng, leading to significant speed improvements, particularly for PNG saving at higher compression levels. This change enhances overall performance for users installing Pillow via wheels.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.1.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Performance Enhancement: Wheels are now built against zlib-ng.
Benefit: Improved speed, e.g., PNG saving more than twice as fast at higher compression levels.
```

----------------------------------------

TITLE: Set GIF Loading Strategy to Always RGB
DESCRIPTION: Configures Pillow's GIF loader to always convert the first frame of a P-mode GIF to RGB (or RGBA), ensuring consistent color mode handling across all frames.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_8

LANGUAGE: Python
CODE:
```
from PIL import GifImagePlugin
GifImagePlugin.LOADING_STRATEGY = GifImagePlugin.LoadingStrategy.RGB_ALWAYS
```

----------------------------------------

TITLE: Performance Improvements in Pillow 4.3.0
DESCRIPTION: This release of Pillow includes several significant performance optimizations across various image processing operations, leading to faster execution times for common tasks like cropping, image allocation, conversion, and JPEG handling.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.3.0.rst#_snippet_10

LANGUAGE: APIDOC
CODE:
```
Performance Enhancements:
- Memory bandwidth-bounded operations (crop, image allocation, conversion, split/merge bands) are up to 2x faster.
- Upscaling of multichannel images (e.g., RGB) is accelerated by 5-10%.
- JPEG loading is accelerated up to 15%, and saving up to 20% (with recent libjpeg-turbo).
- Image.transpose is accelerated 15%+ using a cache-friendly algorithm.
- Kernel convolution-based ImageFilters are significantly faster due to the new MultibandFilter feature.
- All image memory allocation is now block-based, improving efficiency for large images.
```

----------------------------------------

TITLE: Improved Top-to-Bottom Complex Text Rendering
DESCRIPTION: Drawing text in the 'ttb' (top-to-bottom) direction with `ImageFont` has been significantly improved. This enhancement requires Raqm 0.7 or greater.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.1.0.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
ImageFont Text Rendering Improvement:
- Drawing text in the 'ttb' (top-to-bottom) direction with `ImageFont` has been significantly improved.
- Requires Raqm 0.7 or greater.
```

----------------------------------------

TITLE: Pillow ImageDraw Line Width Parameter Addition
DESCRIPTION: An optional `width` parameter has been added to several `ImageDraw.Draw` methods, allowing users to specify the line thickness for drawn shapes.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.3.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ImageDraw.Draw.arc(xy, start, end, fill=None, width=1)
ImageDraw.Draw.chord(xy, start, end, fill=None, outline=None, width=1)
ImageDraw.Draw.ellipse(xy, fill=None, outline=None, width=1)
ImageDraw.Draw.pieslice(xy, start, end, fill=None, outline=None, width=1)
ImageDraw.Draw.rectangle(xy, fill=None, outline=None, width=1)

Parameters:
  width (int, optional): Line width in pixels. Defaults to 1.
```

----------------------------------------

TITLE: PIL.ImageMath.lambda_eval Function
DESCRIPTION: Returns the result of an image function by evaluating a Python lambda expression. This method is a more secure alternative to `unsafe_eval`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.ImageMath.lambda_eval(expression, options, **kw)
  expression: A function that receives a dictionary.
  options: Values to add to the function's dictionary. Note that the names must be valid Python identifiers. Deprecated. You can instead use one or more keyword arguments, as shown in the example.
  **kw: Values to add to the function's dictionary, mapping image names to Image instances.
  Returns: An image, an integer value, a floating point value, or a pixel tuple, depending on the expression.
```

----------------------------------------

TITLE: Pillow Image.transform Method 'fillcolor' Parameter Addition
DESCRIPTION: The `Image.transform` method now includes a new optional named parameter, `fillcolor`. This parameter specifies the background color for areas outside the transformed region in the output image, accepting standard Pillow color specifications.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.0.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Image.transform(size, method, data=None, resample=0, fill=1, fillcolor=None)
```

----------------------------------------

TITLE: Pillow Compatibility with Python 3.13 Beta
DESCRIPTION: Pillow has released wheels built against the Python 3.13 beta for preview and testing purposes. This is not official support but an opportunity for users to test compatibility and report issues before the final release of Python 3.13.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.4.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Pillow Compatibility: Python 3.13 Beta
Status:
  - Preview wheels built against Python 3.13 beta.
  - Not official support for Python 3.13.
  - Opportunity for users to test compatibility and report problems.
```

----------------------------------------

TITLE: Extending Pillow's Image Format Support for Identify-Only Formats
DESCRIPTION: Pillow provides stub drivers for identifying certain image formats (BUFR, GRIB, HDF5, MPEG) but does not natively support reading or writing them. This section outlines how to add full read/write support by registering custom handlers.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_68

LANGUAGE: APIDOC
CODE:
```
BUFR:
  description: Pillow provides a stub driver for BUFR files. To add read or write support to your application, use PIL.BufrStubImagePlugin.register_handler.
  version_added: 1.1.3
GRIB:
  description: Pillow provides a stub driver for GRIB files. The driver requires the file to start with a GRIB header. If you have files with embedded GRIB data, or files with multiple GRIB fields, your application has to seek to the header before passing the file handle to Pillow. To add read or write support to your application, use PIL.GribStubImagePlugin.register_handler.
  version_added: 1.1.5
HDF5:
  description: Pillow provides a stub driver for HDF5 files. To add read or write support to your application, use PIL.Hdf5StubImagePlugin.register_handler.
  version_added: 1.1.5
MPEG:
  description: Pillow identifies MPEG files.
```

----------------------------------------

TITLE: API Addition: Append Images to ICO Format
DESCRIPTION: Pillow 8.1.0 introduces the `append_images` parameter for the `Image.save()` method when saving images in ICO format. This allows users to provide a list of pre-scaled `Image` objects to be included in the ICO file, replacing the default behavior of Pillow automatically scaling down the main image. This functionality is consistent with existing support for the ICNS format.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.1.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Image.save(filename, format="ICO", append_images=None)

Parameters:
  filename: str | file-like object - The path or file-like object to save the image to.
  format: str - The image format. Must be "ICO" for this functionality.
  append_images: list[Image.Image] | None - A list of Image objects to be appended to the ICO file. These images will be used instead of automatically scaled versions of the main image. Defaults to None.
```

----------------------------------------

TITLE: Saving ICO Files in BMP Format
DESCRIPTION: Illustrates how to save ICO files in BMP format using the new `bitmap_format` argument in Pillow's `save` method, overriding the default PNG format.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.3.0.rst#_snippet_0

LANGUAGE: python
CODE:
```
im.save("out.ico", bitmap_format="bmp")
```

----------------------------------------

TITLE: Pillow Image.apply_transparency Method
DESCRIPTION: Documentation for the `Image.apply_transparency` method, which modifies a P mode image by moving transparency information from `im.info` directly into its palette. This process converts the image's palette mode to 'RGBA' and removes the original 'transparency' entry from `im.info`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.2.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Image.apply_transparency()
  Description: Converts transparency from im.info to the image's palette.
  Applies to: P mode images with "transparency" in im.info.
  Changes: Image's palette mode becomes "RGBA"; "transparency" removed from im.info.
```

----------------------------------------

TITLE: Pillow Image.category Removal and Replacement
DESCRIPTION: Documentation for the removal of `im.category` and related `Image.NORMAL`, `Image.SEQUENCE`, `Image.CONTAINER` attributes. Use `getattr(im, "is_animated", False)` to check for animated images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Removed:
  Image.category
  Image.NORMAL
  Image.SEQUENCE
  Image.CONTAINER
Replacement for animation check:
  getattr(im, "is_animated", False)
```

----------------------------------------

TITLE: Draw Bitmap (Mask) in Pillow ImageDraw
DESCRIPTION: Draws a bitmap (mask) at a given position, using the current fill color for non-zero portions. The bitmap should be a valid transparency mask (mode "1") or matte (mode "L" or "RGBA"). This is equivalent to `image.paste(xy, color, bitmap)` for drawing masks.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_10

LANGUAGE: APIDOC
CODE:
```
ImageDraw.bitmap(xy, bitmap, fill=None)
  Parameters:
    xy: Position to draw the bitmap.
    bitmap: The bitmap (mask) to draw. Should be a valid transparency mask (mode "1") or matte (mode "L" or "RGBA").
    fill: Color to use for the non-zero portions.
```

----------------------------------------

TITLE: Set GIF Loading Strategy for Global Palette
DESCRIPTION: Configures Pillow's GIF loader to keep frames in P-mode if only a global palette is present, converting to RGB only when different palettes are encountered.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_9

LANGUAGE: Python
CODE:
```
from PIL import GifImagePlugin
GifImagePlugin.LOADING_STRATEGY = GifImagePlugin.LoadingStrategy.RGB_AFTER_DIFFERENT_PALETTE_ONLY
```

----------------------------------------

TITLE: AVIF Save Options for PIL.Image.Image.save
DESCRIPTION: Pillow supports reading and writing AVIF files, including sequences. Only 8-bit AVIF images can be saved, and all are decoded as 8-bit RGB(A). This snippet details the available options for the `save` method when writing AVIF files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save(filename, format="AVIF", **options)
Options:
  quality: Integer, 0-100, defaults to 75. 0 gives smallest size, 100 best quality.
  subsampling: String, defaults to "4:2:0". Options: "4:0:0", "4:2:0", "4:2:2", "4:4:4".
  speed: Integer, 0-10, defaults to 6. (0=slower/better, 10=fastest).
  max_threads: Integer, limit number of active threads. No limit by default (max 64 for aom codec).
  range: String, YUV range, either "full" or "limited". Defaults to "full".
  codec: String, AV1 codec for encoding. Specific values: "aom", "rav1e", "svt". Defaults to "auto".
  tile_rows: Integer, 0-6, (log 2) number of tile rows. Default 0. Ignored if autotiling is true.
  tile_cols: Integer, 0-6, (log 2) number of tile columns. Default 0. Ignored if autotiling is true.
  autotiling: Boolean, split image for parallelization. Enabled automatically if tile_rows/cols are default.
  alpha_premultiplied: Boolean, encode image with premultiplied alpha. Defaults to False.
  advanced: Codec specific options.
  icc_profile: The ICC Profile to include in the saved file.
  exif: The EXIF data to include in the saved file.
  xmp: The XMP data to include in the saved file.
```

----------------------------------------

TITLE: Updated getxmp() Method for PNG, TIFF, and JPEG
DESCRIPTION: API documentation for the `getxmp()` method, now supporting XMP data retrieval for PNG and TIFF images, and updated structure for JPEG's `getxmp()` to start with an 'xmpmeta' key.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.3.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
getxmp()
  Description: XMP data can now be returned for PNG and TIFF images. The returned dictionary will start from the base of the XML, meaning that the top level should contain an "xmpmeta" key. JPEG's getxmp() method has also been updated to this structure.
  Supported Formats: PNG, TIFF, JPEG
  Return Structure: Dictionary starting with an "xmpmeta" key.
```

----------------------------------------

TITLE: Pillow WebP Image Saving
DESCRIPTION: Briefly notes that Pillow supports reading and writing WebP files, requiring libwebp v0.5.0 or later. This section serves as a placeholder for WebP-specific saving options.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_61

LANGUAGE: APIDOC
CODE:
```
Pillow WebP Support:
  Reads and writes WebP files.
  Requirement: libwebp v0.5.0 or later.
```

----------------------------------------

TITLE: Pillow TIFF Saving Kwarg Parameter Renaming
DESCRIPTION: Keyword arguments for saving TIFF images, previously specified as strings with included spaces (e.g., 'x resolution'), now use underscores (e.g., 'x_resolution'). This change simplifies their use as keyword arguments without requiring dictionary construction.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/2.7.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Image.save(filename, format='TIFF', **kwargs)
  Previous kwarg format:
    'x resolution', 'y resolution', 'resolution unit'
    Usage required dictionary: img.save('file.tif', tiffinfo={'x resolution': 300})
  New kwarg format:
    'x_resolution', 'y_resolution', 'resolution_unit'
    Usage directly as kwargs: img.save('file.tif', x_resolution=300)
```

----------------------------------------

TITLE: Deprecated Pillow Version Constants
DESCRIPTION: Several version constants have been deprecated and will be removed in future Pillow versions. Users should transition to using `PIL.__version__` for retrieving the Pillow version string.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.2.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Deprecated Constants:
- PIL.VERSION (old PIL version 1.1.7)
- PIL.PILLOW_VERSION
- PIL.Image.VERSION
- PIL.Image.PILLOW_VERSION

Recommended Replacement:
- PIL.__version__
```

----------------------------------------

TITLE: Removed: FreeType 2.7 Support
DESCRIPTION: Support for FreeType 2.7 has been removed in Pillow 9.0.0 (deprecated in 8.1.0). It is recommended to upgrade to at least FreeType 2.10.4 due to a severe vulnerability (CVE-2020-15999) in FreeType 2.6.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_38

LANGUAGE: APIDOC
CODE:
```
Dependency: FreeType 2.7
  - Deprecated: 8.1.0
  - Removed: 9.0.0
  - Recommendation: Upgrade to FreeType 2.10.4 or newer (addresses CVE-2020-15999).
```

----------------------------------------

TITLE: Accessing LightSource EXIF Tag Values with PIL.ExifTags.LightSource
DESCRIPTION: Illustrates how to use the PIL.ExifTags.LightSource enum to retrieve integer values and names for light source EXIF tags. This enum is useful for understanding the lighting conditions under which an image was captured.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ExifTags.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
PIL.ExifTags.LightSource: enum.IntEnum
  Provides constants and clear-text names for LightSource EXIF tags.
```

LANGUAGE: python
CODE:
```
from PIL.ExifTags import LightSource
LightSource.Unknown.value
0
LightSource(0).name
'Unknown'
```

----------------------------------------

TITLE: Install Python Development Libraries on Debian/Ubuntu
DESCRIPTION: This command installs essential Python 3 development headers and setuptools on Debian or Ubuntu systems. These packages are crucial for compiling and building Python packages, including Pillow, from their source code.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst#_snippet_1

LANGUAGE: Shell
CODE:
```
sudo apt-get install python3-dev python3-setuptools
```

----------------------------------------

TITLE: Add QOI File Format Support
DESCRIPTION: Pillow now supports reading images in the Quite OK Image (QOI) format. This extends Pillow's capability to handle a new image file type.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.5.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.Image.open(filename, format='QOI')
PIL.Image.save(filename, format='QOI')
```

----------------------------------------

TITLE: Deprecation of Non-Image Modes in ImageCms
DESCRIPTION: The use of input and output modes in `PIL.ImageCms` that are not standard Pillow image modes has been deprecated. Additionally, the automatic defaulting to 'L' or '1' for unmappable modes is also deprecated.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.4.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Module: PIL.ImageCms
Deprecated Usage:
  - Use of non-Pillow image modes for input/output.
  - Automatic defaulting to "L" or "1" when a mode cannot be mapped.
```

----------------------------------------

TITLE: Configure Pillow Build Options via pip
DESCRIPTION: Customize Pillow's build process using `pip install -C` config settings or environment variables. Options include `parallel=n` (or `MAX_CONCURRENCY=n`) for parallel compilation, `[feature]=disable` or `[feature]=enable` for specific features (e.g., zlib, jpeg, tiff, freetype, raqm, lcms, webp, jpeg2000, imagequant, xcb, avif), `raqm=vendor` or `fribidi=vendor` for vendor-supplied libraries, `platform-guessing=disable` to skip platform-dependent guessing, and `debug=true` for verbose logging.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst#_snippet_20

LANGUAGE: Shell
CODE:
```
python3 -m pip install --upgrade Pillow -C [feature]=enable
```

----------------------------------------

TITLE: List All Supported Pillow Components
DESCRIPTION: These functions return a list of strings, where each string is the name of a component (module, codec, or feature) that Pillow has detected as supported on the current system. This is useful for dynamically determining available capabilities.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/features.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.features.get_supported() -> list[str]
  Returns: A list of strings, each representing a supported general feature, module, or codec.
```

LANGUAGE: APIDOC
CODE:
```
PIL.features.get_supported_modules() -> list[str]
  Returns: A list of strings, each representing a supported module (e.g., 'pil', 'tkinter', 'freetype2').
```

LANGUAGE: APIDOC
CODE:
```
PIL.features.get_supported_codecs() -> list[str]
  Returns: A list of strings, each representing a supported codec (e.g., 'jpg', 'zlib', 'webp').
```

LANGUAGE: APIDOC
CODE:
```
PIL.features.get_supported_features() -> list[str]
  Returns: A list of strings, each representing a supported feature (e.g., 'libjpeg_turbo', 'raqm', 'webp_anim').
```

----------------------------------------

TITLE: Customize Dither Option in Pillow's Image.quantize
DESCRIPTION: The 'dither' option in Image.quantize is now a customizable parameter, no longer hardcoded. It accepts the same values as PIL.Image.Image.convert, allowing for more flexible image quantization.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Image.quantize
  dither: Customisable parameter (previously hardcoded to 1). Accepts values used in PIL.Image.Image.convert.
```

----------------------------------------

TITLE: Deprecation of ImageCms constants and versions() function
DESCRIPTION: Several constants and the `versions()` function in `ImageCms` are deprecated since Pillow 10.3.0. A new class, `ImageCms.Flags`, replaces many of the old LittleCMS version 1 based flags with LittleCMS 2 flags. Replacements are provided where available.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Deprecated                                    Use instead
============================================  ====================================================
ImageCms.DESCRIPTION                      No replacement
ImageCms.VERSION                          PIL.__version__
ImageCms.FLAGS["MATRIXINPUT"]             ImageCms.Flags.CLUT_POST_LINEARIZATION
ImageCms.FLAGS["MATRIXOUTPUT"]            ImageCms.Flags.FORCE_CLUT
ImageCms.FLAGS["MATRIXONLY"]              No replacement
ImageCms.FLAGS["NOWHITEONWHITEFIXUP"]     ImageCms.Flags.NOWHITEONWHITEFIXUP
ImageCms.FLAGS["NOPRELINEARIZATION"]      ImageCms.Flags.CLUT_PRE_LINEARIZATION
ImageCms.FLAGS["GUESSDEVICECLASS"]        ImageCms.Flags.GUESSDEVICECLASS
ImageCms.FLAGS["NOTCACHE"]                ImageCms.Flags.NOCACHE
ImageCms.FLAGS["NOTPRECALC"]              ImageCms.Flags.NOOPTIMIZE
ImageCms.FLAGS["NULLTRANSFORM"]           ImageCms.Flags.NULLTRANSFORM
ImageCms.FLAGS["HIGHRESPRECALC"]          ImageCms.Flags.HIGHRESPRECALC
ImageCms.FLAGS["LOWRESPRECALC"]           ImageCms.Flags.LOWRESPRECALC
ImageCms.FLAGS["GAMUTCHECK"]              ImageCms.Flags.GAMUTCHECK
ImageCms.FLAGS["WHITEBLACKCOMPENSATION"]  ImageCms.Flags.BLACKPOINTCOMPENSATION
ImageCms.FLAGS["BLACKPOINTCOMPENSATION"]  ImageCms.Flags.BLACKPOINTCOMPENSATION
ImageCms.FLAGS["SOFTPROOFING"]            ImageCms.Flags.SOFTPROOFING
ImageCms.FLAGS["PRESERVEBLACK"]           ImageCms.Flags.NONEGATIVES
ImageCms.FLAGS["NODEFAULTRESOURCEDEF"]    ImageCms.Flags.NODEFAULTRESOURCEDEF
ImageCms.FLAGS["GRIDPOINTS"]              ImageCms.Flags.GRIDPOINTS()
ImageCms.versions()                       PIL.features.version_module with feature="littlecms2", sys.version or sys.version_info, and PIL.__version__
```

----------------------------------------

TITLE: JPEG 2000 Saving Options
DESCRIPTION: Parameters available when saving JPEG 2000 files using Pillow, influencing encoding behavior and compliance.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_39

LANGUAGE: APIDOC
CODE:
```
signed: bool
  If true, then tell the encoder to save the image as signed.
  Version added: 9.4.0
```

LANGUAGE: APIDOC
CODE:
```
cinema_mode: str
  Set the encoder to produce output compliant with the digital cinema specifications.
  Options: "no" (default), "cinema2k-24" (24fps 2K), "cinema2k-48" (48fps 2K), "cinema4k-24" (24fps 4K).
  Note: For compliant 2K files, at least one dimension must match 2048x1080; for 4K files, at least one dimension must match 4096x2160.
```

LANGUAGE: APIDOC
CODE:
```
no_jp2: bool
  If True, then don't wrap the raw codestream in the JP2 file format when saving.
  Default: determined by filename extension.
```

LANGUAGE: APIDOC
CODE:
```
comment: str
  Adds a custom comment to the file, replacing the default "Created by OpenJPEG version" comment.
  Version added: 9.5.0
```

LANGUAGE: APIDOC
CODE:
```
plt: bool
  If True and OpenJPEG 2.4.0 or later is available, then include a PLT (packet length, tile-part header) marker in the produced file.
  Defaults to False.
  Version added: 9.5.0
```

----------------------------------------

TITLE: Palette Class (Image.convert palettes)
DESCRIPTION: An enumeration used to specify the palette to be used when converting an image's mode, particularly with the `Image.convert` method.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_30

LANGUAGE: APIDOC
CODE:
```
Palette
  members: all
  undoc-members: true
```

----------------------------------------

TITLE: Pillow ICO Image.save() Options
DESCRIPTION: API documentation for the `PIL.Image.Image.save` method when writing Windows `.ico` files, specifically detailing the `sizes` option. This option allows specifying the desired icon sizes to be included in the saved ICO file.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_18

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save() options for ICO:
  sizes:
```

----------------------------------------

TITLE: PIL.Image.Image.info Properties for GIF Files
DESCRIPTION: Documents the `info` dictionary properties set by `PIL.Image.open` when loading GIF files, including `background`, `transparency`, `version`, `duration`, `loop`, `comment`, and `extension`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_11

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.info (GIF properties):
  background:
    Default background color (a palette color index).
  transparency:
    Transparency color index. This key is omitted if the image is not transparent.
  version:
    Version (either "GIF87a" or "GIF89a").
  duration:
    May not be present. The time to display the current frame of the GIF, in milliseconds.
  loop:
    May not be present. The number of times the GIF should loop. 0 means that it will loop forever.
  comment:
    May not be present. A comment about the image. This is the last comment found before the current frame's image.
  extension:
    May not be present. Contains application specific information.
```

----------------------------------------

TITLE: Pillow JPEG Save Option: qtables
DESCRIPTION: Sets the quantization tables for the encoder. This is an advanced option and should be used with caution. It can be a string preset (e.g., 'keep', 'web_low', or 'web_high') or a list, tuple, or dictionary (with integer keys = range(len(keys))) of lists of 64 integers. There must be between 2 and 4 tables. Added in version 2.5.0.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_24

LANGUAGE: APIDOC
CODE:
```
qtables: str | list | tuple | dict
  Sets quantization tables for the encoder.
  - str: preset name (e.g., "keep", "web_low", "web_high")
  - list/tuple/dict: 2-4 lists of 64 integers.
```

----------------------------------------

TITLE: Deprecated ICNS Image Size Setting in Pillow
DESCRIPTION: Setting an ICNS image size using `(width, height, scale)` before loading is deprecated in Pillow 11.0.0. Instead, use the `load(scale)` method for specifying the scale.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_9

LANGUAGE: Python
CODE:
```
# Deprecated usage:
# im = Image.open('icon.icns', (width, height, scale))

# Recommended replacement:
im = Image.open('icon.icns')
im.load(scale)
```

----------------------------------------

TITLE: Deprecation of experimental BGR image modes
DESCRIPTION: The experimental BGR;15, BGR;16, and BGR;24 image modes have been deprecated since Pillow 10.4.0. Users should avoid these modes.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
BGR;15
BGR;16
BGR;24
```

----------------------------------------

TITLE: Pillow ImageDraw Vertical Text Anchor Alignments
DESCRIPTION: Defines the single-character codes for vertical text alignment when using the `anchor` parameter in Pillow's `ImageDraw.text` method. These codes determine how the text is positioned vertically relative to the `xy` coordinates.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/text-anchors.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
a --- ascender / top *(horizontal text only)*
    Anchor is at the ascender line (top) of the first line of text, as defined by the font.
    See `Font metrics on Wikipedia`_ for more information.
t --- top *(single-line text only)*
    Anchor is at the top of the text.
    For *vertical* text this is the origin of the first glyph, as shown in the `FreeType tutorial`_.
    For *horizontal* text it is recommended to use ``a`` (ascender) alignment instead,
    as it does not change based on the specific glyphs of the given text.
m --- middle
    Anchor is vertically centered with the text.
    For *horizontal* text this is the midpoint of the first ascender line and the last descender line.
s --- baseline *(horizontal text only)*
    Anchor is at the baseline (bottom) of the first line of text, only descenders extend below the anchor.
    See `Font metrics on Wikipedia`_ for more information.
b --- bottom *(single-line text only)*
    Anchor is at the bottom of the text.
    For *vertical* text this is the advanced origin of the last glyph, as shown in the `FreeType tutorial`_.
    For *horizontal* text it is recommended to use ``d`` (descender) alignment instead,
    as it does not change based on the specific glyphs of the given text.
d --- descender / bottom *(horizontal text only)*
    Anchor is at the descender line (bottom) of the last line of text, as defined by the font.
    See `Font metrics on Wikipedia`_ for more information.
```

----------------------------------------

TITLE: Generating PostScript Documents with Images and Text using Pillow
DESCRIPTION: Demonstrates how to use Pillow's `PSDraw` module to create PostScript files. The example shows drawing text with specific fonts and sizes, and embedding an image within the PostScript document, including positioning calculations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_29

LANGUAGE: python
CODE:
```
from PIL import Image, PSDraw
import os

# Define the PostScript file
ps_file = open("hopper.ps", "wb")

# Create a PSDraw object
ps = PSDraw.PSDraw(ps_file)

# Start the document
ps.begin_document()

# Set the text to be drawn
text = "Hopper"

# Define the PostScript font
font_name = "Helvetica-Narrow-Bold"
font_size = 36

# Calculate text size (approximation as PSDraw doesn't provide direct method)
# Assuming average character width as 0.6 of the font size
text_width = len(text) * font_size * 0.6
text_height = font_size

# Set the position (top-center)
page_width, page_height = 595, 842  # A4 size in points
text_x = (page_width - text_width) // 2
text_y = page_height - text_height - 50  # Distance from the top of the page

# Load the image
image_path = "hopper.ppm"  # Update this with your image path
with Image.open(image_path) as im:
    # Resize the image if it's too large
    im.thumbnail((page_width - 100, page_height // 2))

    # Define the box where the image will be placed
    img_x = (page_width - im.width) // 2
    img_y = text_y + text_height - 200  # 200 points below the text

    # Draw the image (75 dpi)
    ps.image((img_x, img_y, img_x + im.width, img_y + im.height), im, 75)

# Draw the text
ps.setfont(font_name, font_size)
ps.text((text_x, text_y), text)

# End the document
ps.end_document()
ps_file.close()
```

----------------------------------------

TITLE: Pickling TrueType Fonts in Pillow
DESCRIPTION: This snippet demonstrates how to serialize and deserialize TrueType font objects using Python's `pickle` module within the Pillow library. This functionality allows for saving and loading font configurations, making them reusable across different sessions or applications.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_13

LANGUAGE: python
CODE:
```
import pickle
from PIL import ImageFont

font = ImageFont.truetype("arial.ttf", size=30)
pickled_font = pickle.dumps(font, protocol=pickle.HIGHEST_PROTOCOL)

# Later...
unpickled_font = pickle.loads(pickled_font)
```

----------------------------------------

TITLE: PIL.PngImagePlugin Module API
DESCRIPTION: Documents the API for the `PIL.PngImagePlugin` module, providing comprehensive support for PNG image files. It explicitly lists specific members like `ChunkStream`, `PngImageFile`, and `getchunks`, along with directives for undocumented members, inheritance, and groupwise member ordering.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/plugins.rst#_snippet_31

LANGUAGE: APIDOC
CODE:
```
.. automodule:: PIL.PngImagePlugin
    :members: ChunkStream, PngImageFile, PngStream, getchunks, is_cid, putchunk,
        Blend, Disposal, MAX_TEXT_CHUNK, MAX_TEXT_MEMORY
    :undoc-members:
    :show-inheritance:
    :member-order: groupwise
```

----------------------------------------

TITLE: Pillow ImageDraw Horizontal Text Anchor Alignments
DESCRIPTION: Defines the single-character codes for horizontal text alignment when using the `anchor` parameter in Pillow's `ImageDraw.text` method. These codes determine how the text is positioned horizontally relative to the `xy` coordinates.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/text-anchors.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
l --- left
    Anchor is to the left of the text.
    For *horizontal* text this is the origin of the first glyph, as shown in the `FreeType tutorial`_.
m --- middle
    Anchor is horizontally centered with the text.
    For *vertical* text it is recommended to use ``s`` (baseline) alignment instead,
    as it does not change based on the specific glyphs of the given text.
r --- right
    Anchor is to the right of the text.
    For *horizontal* text this is the advanced origin of the last glyph, as shown in the `FreeType tutorial`_.
s --- baseline *(vertical text only)*
    Anchor is at the baseline (middle) of the text. The exact alignment depends on the font.
    For *vertical* text this is the recommended alignment,
    as it does not change based on the specific glyphs of the given text
    (see image for vertical text above).
```

----------------------------------------

TITLE: Restrict ImageMath.eval Builtins for Security (CVE-2022-22817)
DESCRIPTION: Limits the built-in functions available to `PIL.ImageMath.eval` to prevent arbitrary expression evaluation (e.g., `exec(exit())`), enhancing security by confining its use to image-related operations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_2

LANGUAGE: Python
CODE:
```
PIL.ImageMath.eval(expression)

# Previously vulnerable example:
# ImageMath.eval("exec(exit())")
# Now restricted to image-specific operations.
```

----------------------------------------

TITLE: Deprecated Image.isImageType()
DESCRIPTION: The `Image.isImageType(im)` method has been deprecated. Use `isinstance(im, Image.Image)` for type checking instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.0.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.Image.isImageType(im): Deprecated
Recommended alternative: isinstance(im, PIL.Image.Image)
```

----------------------------------------

TITLE: Calculate Text Length in Pillow with Manual Kerning Adjustment
DESCRIPTION: Illustrates how to manually adjust text length calculations for kerning. This approach involves measuring a combined prefix and subtracting the length of the overlapping character to account for kerning, ensuring the sum of adjusted parts equals the total length of the combined string.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_26

LANGUAGE: python
CODE:
```
hello = draw.textlength("HelloW", font) - draw.textlength(
    "W", font
)  # adjusted for kerning
world = draw.textlength("World", font)
hello_world = hello + world  # adjusted for kerning
assert hello_world == draw.textlength("HelloWorld", font)  # True
```

----------------------------------------

TITLE: Deprecated Pillow Constants and Replacements
DESCRIPTION: Documents constants removed in Pillow 10.0.0 (deprecated in 9.1.0) and their recommended `enum.IntEnum` class replacements. Note that some `Image` constants were restored in 9.4.0 and will remain available.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_25

LANGUAGE: APIDOC
CODE:
```
Constants removed in Pillow 10.0.0 (deprecated 9.1.0):

Removed                                                Use instead
=====================================================  ============================================================
Image.LINEAR                                           Image.BILINEAR or Image.Resampling.BILINEAR
Image.CUBIC                                            Image.BICUBIC or Image.Resampling.BICUBIC
Image.ANTIALIAS                                        Image.LANCZOS or Image.Resampling.LANCZOS
ImageCms.INTENT_PERCEPTUAL                             ImageCms.Intent.PERCEPTUAL
ImageCms.INTENT_RELATIVE_COLORMETRIC                   ImageCms.Intent.RELATIVE_COLORMETRIC
ImageCms.INTENT_SATURATION                             ImageCms.Intent.SATURATION
ImageCms.INTENT_ABSOLUTE_COLORIMETRIC                  ImageCms.Intent.ABSOLUTE_COLORIMETRIC
ImageCms.DIRECTION_INPUT                               ImageCms.Direction.INPUT
ImageCms.DIRECTION_OUTPUT                              ImageCms.Direction.OUTPUT
ImageCms.DIRECTION_PROOF                               ImageCms.Direction.PROOF
ImageFont.LAYOUT_BASIC                                 ImageFont.Layout.BASIC
ImageFont.LAYOUT_RAQM                                  ImageFont.Layout.RAQM
BlpImagePlugin.BLP_FORMAT_JPEG                         BlpImagePlugin.Format.JPEG
BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED               BlpImagePlugin.Encoding.UNCOMPRESSED
BlpImagePlugin.BLP_ENCODING_DXT                        BlpImagePlugin.Encoding.DXT
BlpImagePlugin.BLP_ENCODING_UNCOMPRESSED_RAW_RGBA      BlpImagePlugin.Encoding.UNCOMPRESSED_RAW_RGBA
BlpImagePlugin.BLP_ALPHA_ENCODING_DXT1                 BlpImagePlugin.AlphaEncoding.DXT1
BlpImagePlugin.BLP_ALPHA_ENCODING_DXT3                 BlpImagePlugin.AlphaEncoding.DXT3
BlpImagePlugin.BLP_ALPHA_ENCODING_DXT5                 BlpImagePlugin.AlphaEncoding.DXT5
FtexImagePlugin.FORMAT_DXT1                            FtexImagePlugin.Format.DXT1
FtexImagePlugin.FORMAT_UNCOMPRESSED                    FtexImagePlugin.Format.UNCOMPRESSED
PngImagePlugin.APNG_DISPOSE_OP_NONE                    PngImagePlugin.Disposal.OP_NONE
PngImagePlugin.APNG_DISPOSE_OP_BACKGROUND              PngImagePlugin.Disposal.OP_BACKGROUND
PngImagePlugin.APNG_DISPOSE_OP_PREVIOUS                PngImagePlugin.Disposal.OP_PREVIOUS
PngImagePlugin.APNG_BLEND_OP_SOURCE                    PngImagePlugin.Blend.OP_SOURCE
PngImagePlugin.APNG_BLEND_OP_OVER                      PngImagePlugin.Blend.OP_OVER
```

----------------------------------------

TITLE: Pillow Security: ImageMath.eval Environment Key Restrictions
DESCRIPTION: To prevent arbitrary code execution via `PIL.ImageMath.eval`'s `environment` argument, keys matching builtins or containing double underscores now raise a `ValueError`. This addresses CVE-2023-50447.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.2.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.ImageMath.eval(expression: str, environment: dict)
  environment: Dictionary of variables for the expression.
    Keys matching builtins or containing '__' (double underscores) will raise ValueError.
```

----------------------------------------

TITLE: Pillow Image.rotate Adds fillcolor Parameter
DESCRIPTION: The `Image.rotate` method now includes a new named parameter, `fillcolor`. This parameter allows users to specify the background color that will fill the areas outside the original image boundaries after rotation. It accepts the same color specifications as `Image.new`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.2.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Method: Image.rotate(angle: float, resample=0, expand=0, center=None, translate=None, fillcolor=None)
  Parameters:
    fillcolor: Optional[Union[str, Tuple[int, int, int], Tuple[int, int, int, int]]]
      - Purpose: Specifies the background color for the area outside the rotated image.
      - Accepted values: Any color specification accepted by `Image.new` (e.g., "red", "#RRGGBB", (R,G,B)).
```

----------------------------------------

TITLE: Install olefile Python Package
DESCRIPTION: `PIL.OleFileIO` has been removed from Pillow. If its functionality is required, install the upstream `olefile` package directly from PyPI.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_0

LANGUAGE: Shell
CODE:
```
python3 -m pip install olefile
```

----------------------------------------

TITLE: ANTIALIAS Filter Renamed to LANCZOS
DESCRIPTION: The `ANTIALIAS` constant has been renamed to `LANCZOS` to reflect its true name as a Lanczos filter. `ANTIALIAS` is retained as an alias for backward compatibility. This change clarifies that all convolution-based resize methods are now considered antialiasing.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/2.7.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.Image.LANCZOS: constant
  Description: New constant for the Lanczos resampling filter.
  Equivalent to: PIL.Image.ANTIALIAS
PIL.Image.ANTIALIAS: constant
  Description: Alias for PIL.Image.LANCZOS, retained for backward compatibility.
```

----------------------------------------

TITLE: Accessing GPS EXIF Tag Values with PIL.ExifTags.GPS
DESCRIPTION: Illustrates the usage of the PIL.ExifTags.GPS enum for accessing GPS-specific EXIF tag values and their descriptive names. This enum helps in parsing and understanding geographical metadata embedded in images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ExifTags.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.ExifTags.GPS: enum.IntEnum
  Provides constants and clear-text names for GPS EXIF tags.
```

LANGUAGE: python
CODE:
```
from PIL.ExifTags import GPS
GPS.GPSDestLatitude.value
20
GPS(20).name
'GPSDestLatitude'
```

----------------------------------------

TITLE: PIL.Image.Exif Class
DESCRIPTION: Represents the EXIF data associated with an image. This class provides access to EXIF members and supports inheritance.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_16

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Exif
  members: all
  undoc-members: true
  show-inheritance: true
```

----------------------------------------

TITLE: Pillow Support for LZMA, Zstd, and WebP TIFF Compression Codecs
DESCRIPTION: Pillow now supports additional compression codecs for TIFF images, including LZMA, Zstd, and WebP. This enhances compatibility and flexibility for handling various TIFF files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_14

LANGUAGE: APIDOC
CODE:
```
TIFF compression codecs:
  Support added for LZMA, Zstd, and WebP.
```

----------------------------------------

TITLE: PcfFontFile Charset Encoding Configuration
DESCRIPTION: Pillow's `PcfFontFile` now supports specifying different charset encodings in its constructor, improving compatibility with various language character sets beyond the default ISO 8859-1. When using such a font with `ImageDraw.text`, the text should be provided as a bytes object with the same encoding.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.1.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
PcfFontFile.__init__(charset_encoding: str = 'ISO 8859-1')
  charset_encoding: The desired character set encoding for the font.

ImageDraw.text(text: bytes, font: PcfFontFile, encoding: str)
  text: The text to draw, as a bytes object.
  font: The PcfFontFile instance.
  encoding: The encoding of the text bytes (should match font encoding).
```

----------------------------------------

TITLE: Removed 'file' Argument from ImageShow.Viewer.show_file()
DESCRIPTION: The `file` argument in `PIL.ImageShow.Viewer.show_file()` was removed in Pillow 10.0.0 and replaced by `path`. Existing calls like `viewer.show_file("test.jpg")` will continue to work due to argument order.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_24

LANGUAGE: APIDOC
CODE:
```
Deprecated signature:
PIL.ImageShow.Viewer.show_file(file)

Replacement signature:
PIL.ImageShow.Viewer.show_file(path)
```

----------------------------------------

TITLE: Pillow Image Cropping Negative Value Error
DESCRIPTION: Performing a negative crop on an image now raises a `ValueError` instead of returning a `(0, 0)` image. This change helps users identify unintentional incorrect arguments during image manipulation.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
# Old behavior: Negative crop returned (0,0) image
# New behavior: Negative crop raises ValueError
```

----------------------------------------

TITLE: Pillow TiffImageFile.get_photoshop_blocks Method
DESCRIPTION: The `PIL.TiffImagePlugin.TiffImageFile.get_photoshop_blocks` method has been added to retrieve Photoshop 'Image Resource Blocks' from TIFF images. It returns a dictionary where keys are resource IDs and values contain block data, allowing for future expansion.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
PIL.TiffImagePlugin.TiffImageFile.get_photoshop_blocks()
  Returns: dict
    Keys: Image resource IDs
    Values: dict with "data" entry (future expansion planned)
```

----------------------------------------

TITLE: PIL.ImageStat.Stat Class API Reference
DESCRIPTION: API documentation for the `Stat` class within the `PIL.ImageStat` module, used for calculating image statistics. This class provides methods to compute various statistical properties of an image or a specific region.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageStat.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: PIL.ImageStat.Stat
  Description: Calculates global statistics for an image, or for a region of an image.
  Methods:
    __init__(self, image_or_mode_list)
      Description: Initializes the Stat object.
      Parameters:
        image_or_mode_list: PIL.Image.Image or list of str
          The image to calculate statistics for, or a list of modes (e.g., ['L', 'RGB']) to initialize empty statistics.
      (Other members and methods are available as per PIL.ImageStat.Stat class definition, including extrema, count, sum, sum2, mean, median, rms, var, stddev)
```

----------------------------------------

TITLE: PIL Module API Reference
DESCRIPTION: API documentation for the core PIL module, specifically detailing the `UnidentifiedImageError` exception and its inheritance.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/PIL.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Module: PIL
  Exception: UnidentifiedImageError
    Inheritance: Shown
```

----------------------------------------

TITLE: Restore previously deprecated Image constants
DESCRIPTION: Several `Image` constants that were deprecated in Pillow 9.1.0 have been restored and will remain available. This ensures backward compatibility and continued access to commonly used constants for image manipulation operations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.4.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Image.NONE
Image.NEAREST
Image.ORDERED
Image.RASTERIZE
Image.FLOYDSTEINBERG
Image.WEB
Image.ADAPTIVE
Image.AFFINE
Image.EXTENT
Image.PERSPECTIVE
Image.QUAD
Image.MESH
Image.FLIP_LEFT_RIGHT
Image.FLIP_TOP_BOTTOM
Image.ROTATE_90
Image.ROTATE_180
Image.ROTATE_270
Image.TRANSPOSE
Image.TRANSVERSE
Image.BOX
Image.BILINEAR
Image.HAMMING
Image.BICUBIC
Image.LANCZOS
Image.MEDIANCUT
Image.MAXCOVERAGE
Image.FASTOCTREE
Image.LIBIMAGEQUANT
```

----------------------------------------

TITLE: Loading WMF Images with Custom DPI in Pillow
DESCRIPTION: Demonstrates how to load WMF image files on Windows using Pillow, specifying a custom DPI (e.g., 144) instead of the default 72 DPI. This ensures the image is loaded at the desired resolution.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.0.0.rst#_snippet_5

LANGUAGE: Python
CODE:
```
from PIL import Image
with Image.open("drawing.wmf") as im:
    im.load(dpi=144)
```

----------------------------------------

TITLE: ImageGrab.grab() X11 Support on Linux
DESCRIPTION: Pillow 7.1.0 introduces support for `ImageGrab.grab()` on Linux systems utilizing the X server and XCB library. An optional `xdisplay` parameter allows specifying a particular X server for screen capturing.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.1.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.ImageGrab.grab(bbox: tuple = None, xdisplay: str = None)
  bbox: Optional bounding box tuple (left, upper, right, lower) for the region to grab.
  xdisplay: Optional string to select the X server; defaults to None for the default X server.
```

----------------------------------------

TITLE: PIL.ImageShow Module Overview
DESCRIPTION: Provides core functionality for displaying images using Pillow, automatically converting them to PNG format for viewer compatibility.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageShow.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Module: PIL.ImageShow
Description: The PIL.ImageShow module is used to display images. All default viewers convert the image to be shown to PNG format.
```

----------------------------------------

TITLE: PIL.ImageMath Standard Operators
DESCRIPTION: Details the standard arithmetical operators supported by `PIL.ImageMath` expressions, including addition, subtraction, multiplication, division, unary minus, modulo, and power. Notes on 32-bit integer/float operations and type conversion functions are included.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Standard operators:
  Supported:
    - Arithmetical: +, -, *, /, unary -, %, **
  Notes:
    - All operations are done with 32-bit integers or 32-bit floating point values.
    - Example: Adding two 8-bit images results in a 32-bit integer image.
    - Example: Adding a floating point constant to an 8-bit image results in a 32-bit floating point image.
  Conversion:
    - Can force conversion using convert(), float(), and int() functions.
```

----------------------------------------

TITLE: PIL.ImageMath Bitwise Operators
DESCRIPTION: Describes the bitwise operators available in `PIL.ImageMath` expressions: AND (&), OR (|), exclusive OR (^), and invert (~). Notes that operands are converted to 32-bit signed integers and bitwise operators do not work on floating point images.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Bitwise operators:
  Supported:
    - &, |, ^ (exclusive or), ~ (invert)
  Notes:
    - Operands are converted to 32-bit signed integers before operation.
    - Inverting an ordinary grayscale image may result in negative values; use '&' to mask.
  Limitations:
    - Do not work on floating point images.
```

----------------------------------------

TITLE: Add `start` argument to FreeTypeFont.getmask and getmask2
DESCRIPTION: The `FreeTypeFont.getmask` and `FreeTypeFont.getmask2` methods now support a `start` argument, a tuple of horizontal and vertical offsets. This enhancement allows for more accurate text placement, especially when starting at fractional coordinates, and is used internally by `ImageDraw.text`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.4.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
FreeTypeFont.getmask(text: str, mode: str = "", start: tuple[float, float] = (0, 0))
FreeTypeFont.getmask2(text: str, mode: str = "", start: tuple[float, float] = (0, 0))
```

----------------------------------------

TITLE: Deprecated ICNS Image Size Setting
DESCRIPTION: Setting an ICNS image size to `(width, height, scale)` before loading is deprecated. The `load(scale)` method should be used instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.0.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
ICNS image size setting (width, height, scale): Deprecated
Recommended alternative: load(scale)
```

----------------------------------------

TITLE: Pillow Image Function: abs
DESCRIPTION: Calculates the absolute value for each pixel in an image.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Function: abs(image)
Description: Absolute value.
Parameters:
  image: The input image.
Returns: An image with absolute pixel values.
```

----------------------------------------

TITLE: Roll Image Sideways with Pillow
DESCRIPTION: This Python function `roll` takes an image and an integer `delta` to roll the image sideways. It calculates the new positions by splitting the image into two parts and pasting them back in a shifted order. The `delta` value is normalized to the image width.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_7

LANGUAGE: Python
CODE:
```
def roll(im: Image.Image, delta: int) -> Image.Image:
    """Roll an image sideways."""
    xsize, ysize = im.size

    delta = delta % xsize
    if delta == 0:
        return im

    part1 = im.crop((0, 0, delta, ysize))
    part2 = im.crop((delta, 0, xsize, ysize))
    im.paste(part1, (xsize - delta, 0, xsize, ysize))
    im.paste(part2, (0, 0, xsize - delta, ysize))

    return im
```

----------------------------------------

TITLE: Pillow Image._showxv Method Deprecation
DESCRIPTION: The `Image._showxv` method has been deprecated in Pillow 7.2.0. Developers should use `PIL.Image.Image.show` instead. For custom display requirements, `PIL.ImageShow.register` can be used to add a custom `PIL.ImageShow.Viewer` class.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.2.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.Image._showxv:
  - Deprecated method.
  - Recommended alternative: Use `PIL.Image.Image.show`.
  - For custom behavior: Use `PIL.ImageShow.register` with a custom `PIL.ImageShow.Viewer` class.
```

----------------------------------------

TITLE: Use a Custom Pillow Image Plugin
DESCRIPTION: This Python snippet demonstrates how to use a custom image plugin, `SpamImagePlugin`, after it has been imported. It shows opening a `.spam` image file using `PIL.Image.open`, which will automatically utilize the registered plugin.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/writing-your-own-image-plugin.rst#_snippet_1

LANGUAGE: python
CODE:
```
from PIL import Image
import SpamImagePlugin

with Image.open("hopper.spam") as im:
    pass
```

----------------------------------------

TITLE: Pillow PDF Document Metadata Fields
DESCRIPTION: This section describes the standard PDF metadata fields that Pillow can interact with, providing details on their purpose and when they were introduced.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_67

LANGUAGE: APIDOC
CODE:
```
creator:
  description: If the document was converted to PDF from another format, the name of the conforming product that created the original document from which it was converted.
  version_added: 5.1.0
producer:
  description: If the document was converted to PDF from another format, the name of the conforming product that converted it to PDF.
  version_added: 5.1.0
creationDate:
  description: The creation date of the document. If not appending to an existing PDF file, this will default to the current time.
  version_added: 5.3.0
modDate:
  description: The modification date of the document. If not appending to an existing PDF file, this will default to the current time.
  version_added: 5.3.0
```

----------------------------------------

TITLE: Pillow OS and Python Compatibility Table
DESCRIPTION: This table lists the supported operating systems (macOS and Linux), compatible Python versions, the corresponding Pillow library versions, and the target architectures. It helps users identify the correct environment setup for their Pillow installations and understand version dependencies.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/platform-support.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
+==================================+============================+==================+==============+
| macOS 15 Sequoia                 | 3.9, 3.10, 3.11, 3.12, 3.13| 11.2.1           |arm           |
|                                  +----------------------------+------------------+              |
|                                  | 3.8                        | 10.4.0           |              |
+----------------------------------+----------------------------+------------------+--------------+
| macOS 14 Sonoma                  | 3.8, 3.9, 3.10, 3.11, 3.12 | 10.4.0           |arm           |
+----------------------------------+----------------------------+------------------+--------------+
| macOS 13 Ventura                 | 3.8, 3.9, 3.10, 3.11       | 10.0.1           |arm           |
|                                  +----------------------------+------------------+              |
|                                  | 3.7                        | 9.5.0            |              |
+----------------------------------+----------------------------+------------------+--------------+
| macOS 12 Monterey                | 3.7, 3.8, 3.9, 3.10, 3.11  | 9.3.0            |arm           |
+----------------------------------+----------------------------+------------------+--------------+
| macOS 11 Big Sur                 | 3.7, 3.8, 3.9, 3.10        | 8.4.0            |arm           |
|                                  +----------------------------+------------------+--------------+
|                                  | 3.7, 3.8, 3.9, 3.10, 3.11  | 9.4.0            |x86-64        |
|                                  +----------------------------+------------------+              |
|                                  | 3.6                        | 8.4.0            |              |
+----------------------------------+----------------------------+------------------+--------------+
| macOS 10.15 Catalina             | 3.6, 3.7, 3.8, 3.9         | 8.3.2            |x86-64        |
|                                  +----------------------------+------------------+              |
|                                  | 3.5                        | 7.2.0            |              |
+----------------------------------+----------------------------+------------------+--------------+
| macOS 10.14 Mojave               | 3.5, 3.6, 3.7, 3.8         | 7.2.0            |x86-64        |
|                                  +----------------------------+------------------+              |
|                                  | 2.7                        | 6.0.0            |              |
|                                  +----------------------------+------------------+              |
|                                  | 3.4                        | 5.4.1            |              |
+----------------------------------+----------------------------+------------------+--------------+
| macOS 10.13 High Sierra          | 2.7, 3.4, 3.5, 3.6         | 4.2.1            |x86-64        |
+----------------------------------+----------------------------+------------------+--------------+
| macOS 10.12 Sierra               | 2.7, 3.4, 3.5, 3.6         | 4.1.1            |x86-64        |
+----------------------------------+----------------------------+------------------+--------------+
| Mac OS X 10.11 El Capitan        | 2.7, 3.4, 3.5, 3.6, 3.7    | 5.4.1            |x86-64        |
|                                  +----------------------------+------------------+              |
|                                  | 3.3                        | 4.1.0            |              |
+----------------------------------+----------------------------+------------------+--------------+
| Mac OS X 10.9 Mavericks          | 2.7, 3.2, 3.3, 3.4         | 3.0.0            |x86-64        |
+----------------------------------+----------------------------+------------------+--------------+
| Mac OS X 10.8 Mountain Lion      | 2.6, 2.7, 3.2, 3.3         |                  |x86-64        |
+----------------------------------+----------------------------+------------------+--------------+
| Redhat Linux 6                   | 2.6                        |                  |x86           |
+----------------------------------+----------------------------+------------------+--------------+
| CentOS 6.3                       | 2.7, 3.3                   |                  |x86           |
+----------------------------------+----------------------------+------------------+--------------+
| CentOS 8                         | 3.9                        | 9.0.0            |x86-64        |
+----------------------------------+----------------------------+------------------+--------------+
| Fedora 23                        | 2.7, 3.4                   | 3.1.0            |x86-64        |
+----------------------------------+----------------------------+------------------+--------------+
| Ubuntu Linux 12.04 LTS (Precise) | | 2.6, 3.2, 3.3, 3.4, 3.5  | 3.4.1            |x86,x86-64    |

```

----------------------------------------

TITLE: Deprecated Image.Image.get_child_images() Method
DESCRIPTION: `Image.Image.get_child_images()` is deprecated in Pillow 11.2.1 and will be moved to `ImageFile.ImageFile.get_child_images()` in Pillow 13. This method uses an image's file pointer, and so child images could only be retrieved from an `PIL.ImageFile.ImageFile` instance.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_16

LANGUAGE: Python
CODE:
```
# Deprecated:
Image.Image.get_child_images()

# Future location:
ImageFile.ImageFile.get_child_images()
```

----------------------------------------

TITLE: Pillow API Deprecation: Image.Image.get_child_images()
DESCRIPTION: Documents the deprecation of `Image.Image.get_child_images()` in Pillow 11.2.1, its planned removal in Pillow 13, and its relocation to `ImageFile.ImageFile.get_child_images()` due to its reliance on the image's file pointer.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.2.1.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Deprecated Method: Image.Image.get_child_images()
  Deprecated in: Pillow 11.2.1
  Planned Removal: Pillow 13 (2026-10-15)
  New Location: ImageFile.ImageFile.get_child_images()
  Reason: Method uses an image's file pointer, making it only retrievable from PIL.ImageFile.ImageFile instances.
```

----------------------------------------

TITLE: ImageTk.getimage Function Support
DESCRIPTION: The `ImageTk.getimage` function is now supported. It returns the contents of an `ImageTk.PhotoImage` as an RGBA `Image.Image` instance.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.1.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
ImageTk.getimage(photoimage) -> Image.Image

Parameters:
  photoimage: An ImageTk.PhotoImage instance.

Returns:
  An RGBA Image.Image instance containing the contents of the PhotoImage.
```

----------------------------------------

TITLE: Pillow Multiframe GIF 'disposal' Parameter Addition
DESCRIPTION: Multiframe GIF images now support an optional `disposal` parameter when saving, allowing users to specify the disposal option for changed pixels between frames.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.0.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Image.save(..., disposal=None) (for multiframe GIFs)
```

----------------------------------------

TITLE: API Addition: EpsImagePlugin.gs_binary for Ghostscript Executable Customization
DESCRIPTION: `EpsImagePlugin.gs_binary` has been added for all platforms to customize the Ghostscript executable name or disable its use entirely. This provides a unified way to manage Ghostscript integration, complementing the existing `EpsImagePlugin.gs_windows_binary`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.1.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.EpsImagePlugin.gs_binary
  Type: Module-level variable
  Description: Stores the name of the Ghostscript executable for all platforms.
  Customization: Can be set to a custom executable path or `False` to disable Ghostscript use.
```

----------------------------------------

TITLE: New DDS decoders for DXT3 images
DESCRIPTION: Pillow can now decode DXT3 images, expanding upon the previously supported DXT1 and DXT5 formats. All three DDS formats are now decoded using C code for improved performance.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/3.4.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Supports DXT1, DXT3, DXT5 DDS decoding.
```

----------------------------------------

TITLE: Calculate Text Length in Pillow Without Kerning Adjustment
DESCRIPTION: Demonstrates basic text length calculation using `draw.textlength` in Pillow. This method sums individual word lengths, which may not accurately reflect the total length when kerning is applied, leading to potential assertion failures if compared directly to the length of the combined string.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_25

LANGUAGE: python
CODE:
```
hello = draw.textlength("Hello", font)
world = draw.textlength("World", font)
hello_world = hello + world  # not adjusted for kerning
assert hello_world == draw.textlength("HelloWorld", font)  # may fail
```

----------------------------------------

TITLE: Complex Text Rendering Support in Pillow
DESCRIPTION: Pillow 4.2.0 introduces support for complex text rendering, enabling glyph composition and bidirectional flow. This optional feature requires additional dependencies: `harfbuzz`, `fribidi`, and `raqm`. It is currently tested and functional on Unix and Mac platforms.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.2.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Feature: Complex Text Rendering
  Description: Supports glyph composition and bidirectional text flow.
  Dependencies: harfbuzz, fribidi, raqm (optional)
  Supported Platforms: Unix, Mac (as of 4.2.0)
```

----------------------------------------

TITLE: Deprecated 'options' Parameter in ImageMath.lambda_eval/unsafe_eval
DESCRIPTION: The `options` parameter in `PIL.ImageMath.lambda_eval()` and `PIL.ImageMath.unsafe_eval()` has been deprecated. Keyword arguments should be used instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.0.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
PIL.ImageMath.lambda_eval(..., options): Deprecated
PIL.ImageMath.unsafe_eval(..., options): Deprecated
Recommended alternative: Use keyword arguments instead of 'options' parameter.
```

----------------------------------------

TITLE: Pillow Color3DLUT for 3D Color Transformations
DESCRIPTION: Pillow now supports 3D color lookup table transformations, enabling complex color adjustments in constant time using pre-calculated tables. The `Color3DLUT.generate` method transforms 3-channel pixels by interpolating values from the 3D table, while `Color3DLUT.transform()` allows modifying table values via a callback. Performance is improved with NumPy for buffer interface-supporting source tables.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.2.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Class: Color3DLUT
  Methods:
    generate(): Transforms 3-channel pixels using the 3D lookup table.
      - Purpose: Apply color transformations by interpolating nearest elements.
    transform(): Allows altering table values with a callback function.
      - Purpose: Dynamically modify the lookup table values.
```

----------------------------------------

TITLE: BMP Open Properties for PIL.Image.open
DESCRIPTION: Pillow reads and writes Windows and OS/2 BMP files with 1, L, P, or RGB data. 16-color images are read as P images. Support for 8-bit and 4-bit run-length encoding was added in Pillow 9.1.0 and 9.3.0, respectively. When opening a BMP file, the `Image.info` attribute may contain a `compression` property.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.Image.open(filename)
Image.info properties:
  compression: Integer.
    1: If the file is a 256-color run-length encoded image.
    2: If the file is a 16-color run-length encoded image.
```

----------------------------------------

TITLE: Get Default Font in Pillow ImageDraw
DESCRIPTION: Retrieves the current default font used by ImageDraw. If no default font is set, it initializes one using `ImageFont.load_default`. This method is useful for ensuring a font is available for drawing operations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
ImageDraw.getfont()
  Returns: An image font.
```

----------------------------------------

TITLE: Pillow Image Function: max
DESCRIPTION: Compares two images pixel-wise and returns an image with the maximum values.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_11

LANGUAGE: APIDOC
CODE:
```
Function: max(image1, image2)
Description: Maximum value.
Parameters:
  image1: The first input image.
  image2: The second input image.
Returns: An image where each pixel is the maximum of the corresponding pixels in image1 and image2.
```

----------------------------------------

TITLE: Pillow BMP Large File Error Handling Update
DESCRIPTION: For excessively large BMP files, Pillow now raises a `DecompressionBombError` instead of an `OSError`. This change aligns BMP error handling with other image formats already using `DecompressionBombError` to prevent potential denial-of-service attacks from malicious or malformed files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_15

LANGUAGE: APIDOC
CODE:
```
# Old behavior for large BMP files:
#   raises OSError

# New behavior for large BMP files:
#   raises DecompressionBombError
```

----------------------------------------

TITLE: Removed PIL ImagePlugin Version Attributes in Pillow 7.0.0
DESCRIPTION: This section lists the specific `__version__` attributes from various Pillow image plugins that have been removed in version 7.0.0. Users should now use `PIL.__version__` to check the overall Pillow version instead of individual plugin versions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.0.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Removed PIL ImagePlugin.__version__ attributes:
- BmpImagePlugin.__version__
- CurImagePlugin.__version__
- DcxImagePlugin.__version__
- EpsImagePlugin.__version__
- FliImagePlugin.__version__
- FpxImagePlugin.__version__
- GdImageFile.__version__
- GifImagePlugin.__version__
- IcoImagePlugin.__version__
- ImImagePlugin.__version__
- ImtImagePlugin.__version__
- IptcImagePlugin.__version__
- Jpeg2KImagePlugin.__version__
- JpegImagePlugin.__version__
- McIdasImagePlugin.__version__
- MicImagePlugin.__version__
- MpegImagePlugin.__version__
- MpoImagePlugin.__version__
- MspImagePlugin.__version__
- PalmImagePlugin.__version__
- PcdImagePlugin.__version__
- PcxImagePlugin.__version__
- PdfImagePlugin.__version__
- PixarImagePlugin.__version__
- PngImagePlugin.__version__
- PpmImagePlugin.__version__
- PsdImagePlugin.__version__
- SgiImagePlugin.__version__
- SunImagePlugin.__version__
- TgaImagePlugin.__version__
- TiffImagePlugin.__version__
- WmfImagePlugin.__version__
- XbmImagePlugin.__version__
- XpmImagePlugin.__version__
- XVThumbImagePlugin.__version__
```

----------------------------------------

TITLE: Pillow Version Constants
DESCRIPTION: The `PILLOW_VERSION` constant has been re-added in Pillow 7.1.0, though it is deprecated and will be removed in future releases. Developers are advised to use `__version__` for checking the Pillow version instead.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.1.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PILLOW_VERSION (deprecated)
__version__ (recommended)
```

----------------------------------------

TITLE: Deprecation of ExifTags.IFD.Makernote
DESCRIPTION: The `ExifTags.IFD.Makernote` attribute has been deprecated in Pillow 11.1.0. Users should update their code to use `ExifTags.IFD.MakerNote` instead for consistency and future compatibility.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.1.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Deprecated: ExifTags.IFD.Makernote
Replacement: ExifTags.IFD.MakerNote
```

----------------------------------------

TITLE: Saving CMYK Images as JPEG 2000 in Pillow
DESCRIPTION: With OpenJPEG 2.5.3 or later, Pillow now supports saving CMYK images as JPEG 2000 files. This expands the color space capabilities for JPEG 2000 output.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.1.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Functionality: Saving CMYK images as JPEG 2000
Requirement: OpenJPEG 2.5.3 or later
```

----------------------------------------

TITLE: PIL.ImageFont Module Constants Reference
DESCRIPTION: Reference documentation for important constants defined in the PIL.ImageFont module.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageFont.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Constants:
  MAX_STRING_LENGTH: int
    Default Value: 1,000,000
    Description: Maximum number of characters allowed in text input to prevent DOS attacks.
    Behavior: Raises ValueError if exceeded.
    Control: Can be changed or disabled by setting ImageFont.MAX_STRING_LENGTH = None.
```

----------------------------------------

TITLE: Performance Improvement: Square Image Rotation
DESCRIPTION: Pillow now uses a faster rotation method for square images (90 or 270 degrees) even without the `expand` flag, by internally leveraging `PIL.Image.Image.transpose`. This optimization, previously applied only when `expand` was true or irrelevant, now benefits all square image rotations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.4.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image:
  Method: rotate(angle, resample=NEAREST, expand=False, center=None, translate=None, fillcolor=None)
    Description: Improved speed for rotating square images by 90 or 270 degrees.
    Details: The faster `transpose` method is now used internally for square images, even when the `expand` flag is not set, as `expand` makes no difference for square images.
```

----------------------------------------

TITLE: PIL.TiffTags Module API Reference
DESCRIPTION: Provides access to standard TIFF metadata tag numbers, names, and type information.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/TiffTags.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Module: PIL.TiffTags
Current Module: PIL.TiffTags
Description: The PIL.TiffTags module exposes many of the standard TIFF metadata tag numbers, names, and type information.
```

----------------------------------------

TITLE: Load WMF/EMF Image at Specific DPI in Pillow
DESCRIPTION: This snippet demonstrates how to open a WMF or EMF file using Pillow and load it at a custom resolution (DPI) other than the default 72 DPI. It utilizes the `Image.open` method to load the file and then `im.load(dpi=...)` to specify the desired resolution.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_64

LANGUAGE: Python
CODE:
```
from PIL import Image

with Image.open("drawing.wmf") as im:
    im.load(dpi=144)
```

----------------------------------------

TITLE: Pillow Resolves Version String Confusion
DESCRIPTION: Efforts have been made in Pillow 5.2.0 to clarify and simplify the process of obtaining the Pillow version string. This addresses previous confusion where `PIL.VERSION` returned the old PIL version, and other version constants were ambiguous. The recommended way to get the Pillow version is now `PIL.__version__`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.2.0.rst#_snippet_10

LANGUAGE: APIDOC
CODE:
```
Version Information Access:
- Addressed confusion regarding PIL/Pillow version strings.
- Recommended method for Pillow version: `PIL.__version__`.
- Improvements implemented in #3083, #3090, and #3218.
```

----------------------------------------

TITLE: Removed Deprecated Methods in Pillow 4.2.0
DESCRIPTION: Pillow 4.2.0 has removed several previously deprecated methods to streamline the API. This includes `PIL.ImageWin.Dib.fromstring`, `PIL.ImageWin.Dib.tostring`, and `PIL.TiffImagePlugin.ImageFileDirectory_v2.as_dict`. Additionally, saving an RGBA image as JPEG now raises an `IOError` instead of discarding the alpha channel, a change from previous behavior where a deprecation warning was issued.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.2.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Removed Methods:
  PIL.ImageWin.Dib.fromstring
  PIL.ImageWin.Dib.tostring
  PIL.TiffImagePlugin.ImageFileDirectory_v2.as_dict

RGBA JPEG Save Behavior:
  Before 4.2.0: Alpha channel discarded (with deprecation warning from 3.4.0)
  From 4.2.0: Raises IOError when attempting to save RGBA as JPEG
```

----------------------------------------

TITLE: PIL.ImageChops Module Functions API Reference
DESCRIPTION: API documentation for the functions available in the PIL.ImageChops module. Most functions take one or two image arguments and return a new image, with the result always clipped to the range 0 to 255.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageChops.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.ImageChops Module Functions:
  Description: Most channel operations take one or two image arguments and return a new image. Unless otherwise noted, the result is always clipped to the range 0 to MAX (255 for all modes supported by the operations in this module).

  Functions:
    PIL.ImageChops.add
    PIL.ImageChops.add_modulo
    PIL.ImageChops.blend
    PIL.ImageChops.composite
    PIL.ImageChops.constant
    PIL.ImageChops.darker
    PIL.ImageChops.difference
    PIL.ImageChops.duplicate
    PIL.ImageChops.invert
    PIL.ImageChops.lighter
    PIL.ImageChops.logical_and
    PIL.ImageChops.logical_or
    PIL.ImageChops.logical_xor
    PIL.ImageChops.multiply
    PIL.ImageChops.soft_light
    PIL.ImageChops.hard_light
    PIL.ImageChops.overlay
    PIL.ImageChops.offset
    PIL.ImageChops.screen
    PIL.ImageChops.subtract
    PIL.ImageChops.subtract_modulo
```

----------------------------------------

TITLE: Pillow APNG Disposal and Blend Operations Constants
DESCRIPTION: This section lists the constants used for APNG disposal and blend operations in `PngImagePlugin`, showing their old and new aliased names for clarity and future compatibility.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PngImagePlugin.APNG_DISPOSE_OP_NONE                PngImagePlugin.Disposal.OP_NONE
PngImagePlugin.APNG_DISPOSE_OP_BACKGROUND          PngImagePlugin.Disposal.OP_BACKGROUND
PngImagePlugin.APNG_DISPOSE_OP_PREVIOUS            PngImagePlugin.Disposal.OP_PREVIOUS
PngImagePlugin.APNG_BLEND_OP_SOURCE                PngImagePlugin.Blend.OP_SOURCE
PngImagePlugin.APNG_BLEND_OP_OVER                  PngImagePlugin.Blend.OP_OVER
```

----------------------------------------

TITLE: Pillow ImagePalette size Parameter Removal
DESCRIPTION: Documentation for the removal of the `size` parameter from `ImagePalette`, as default required lengths were removed in Pillow 8.3.0, making the parameter unnecessary.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_16

LANGUAGE: APIDOC
CODE:
```
Removed parameter:
  ImagePalette(..., size=...)
```

----------------------------------------

TITLE: Improved TIFF Tag Encoding
DESCRIPTION: The TIFF encoder has been improved to support more types, especially arrays, which is crucial for formats like GeoTIFF. Enhancements include explicit type passing, support for 64-bit longs, multiple values, and signed types.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.1.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
TIFF Encoder Improvements:
- Pass `tagtype` from v2 directory to libtiff encoder, instead of autodetecting type.
- Use explicit types (e.g., `uint32_t` for `TIFF_LONG`) to fix issues on platforms with 64-bit longs.
- Add support for multiple values (arrays). Requires type in v2 directory and values must be passed as a tuple.
- Add support for signed types (e.g., `TIFFTypes.TIFF_SIGNED_SHORT`).
```

----------------------------------------

TITLE: New ImageShow.XDGViewer for Linux
DESCRIPTION: A new `PIL.ImageShow.Viewer` subclass, `XDGViewer`, is now registered on Linux if `xdg-open` is present. It uses the system's default application to display images and has a higher priority than other default viewers.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_11

LANGUAGE: APIDOC
CODE:
```
class PIL.ImageShow.XDGViewer(PIL.ImageShow.Viewer)

# Registered automatically if xdg-open is present on Linux.
# Preferred by im.show() and ImageShow.show().
```

LANGUAGE: Python
CODE:
```
from PIL import Image

im = Image.new('RGB', (100, 100))
im.show() # Will use XDGViewer on Linux if available
```

----------------------------------------

TITLE: Checking for zlib-ng Support and Version in Pillow
DESCRIPTION: Pillow now provides functions to check if it has been built against the zlib-ng library and to retrieve the specific version of zlib-ng being used. This allows developers to verify zlib-ng integration and its version programmatically.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.1.0.rst#_snippet_2

LANGUAGE: Python
CODE:
```
from PIL import features
features.check_feature("zlib_ng")  # True or False
features.version_feature("zlib_ng")  # "2.2.2" for example, or None
```

----------------------------------------

TITLE: Pillow ImageFile.PyEncoder for Python Encoders
DESCRIPTION: The `PIL.ImageFile.PyEncoder` class has been added, enabling the creation of file encoders written entirely in Python. This provides greater flexibility for custom image encoding solutions within Pillow.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_9

LANGUAGE: APIDOC
CODE:
```
PIL.ImageFile.PyEncoder
  Purpose: Allows file encoders to be written in Python.
  See: Writing Your Own File Codec in Python
```

----------------------------------------

TITLE: PIL.ImageMode Module API Reference
DESCRIPTION: API documentation for the `PIL.ImageMode` module, including all its members, undocumented members, and inheritance hierarchy as generated by autodoc.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/PIL.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Module: PIL.ImageMode
  Members: All
  Undocumented Members: Included
  Inheritance: Shown
```

----------------------------------------

TITLE: Deprecated Internal Pointer Access in Pillow
DESCRIPTION: `Image.core.ImagingCore.id` and `Image.core.ImagingCore.unsafe_ptrs` are deprecated in Pillow 11.0.0 for obtaining raw pointers to `ImagingCore` internals. To interact with C code, use `Image.Image.getim()`, which returns a `Capsule` object.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_14

LANGUAGE: Python
CODE:
```
# Deprecated:
Image.core.ImagingCore.id
Image.core.ImagingCore.unsafe_ptrs

# Replacement:
Image.Image.getim()
```

----------------------------------------

TITLE: Fix `stroke_width` offset in `ImageDraw.text` in Pillow 8.0.0
DESCRIPTION: Pillow 8.0.0 fixes an issue where passing a non-zero `stroke_width` to `ImageDraw.text` would incorrectly offset the text. This ensures correct rendering of stroked text.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
ImageDraw.text method:
  Parameter: stroke_width
  Change: Fixed issue causing text offset when stroke_width is non-zero.
```

----------------------------------------

TITLE: Pillow ImageOps.colorize Three-Color Mapping
DESCRIPTION: The `ImageOps.colorize` method now supports three-color mapping with an optional `mid` parameter, along with `blackpoint`, `whitepoint`, and `midpoint` for specifying color positions. This extends its previous two-color mapping functionality.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.3.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
ImageOps.colorize(image, black, white, mid=None, blackpoint=0, whitepoint=255, midpoint=128)

Parameters:
  image (Image.Image): The input image.
  black (color): Color to map to the blackpoint.
  white (color): Color to map to the whitepoint.
  mid (color, optional): Color to map to the midpoint.
  blackpoint (int, optional): Pixel value mapped to 'black' color. Defaults to 0.
  whitepoint (int, optional): Pixel value mapped to 'white' color. Defaults to 255.
  midpoint (int, optional): Pixel value mapped to 'mid' color. Defaults to 128.
```

LANGUAGE: Python
CODE:
```
ImageOps.colorize(im, black=(32, 37, 79), white='white', mid=(59, 101, 175),
                          blackpoint=15, whitepoint=240, midpoint=100)
```

----------------------------------------

TITLE: Deprecate FitsStubImagePlugin in Pillow
DESCRIPTION: The `FitsStubImagePlugin` has been deprecated and will be removed in Pillow 10.0.0. FITS images can now be read directly through `PIL.FitsImagePlugin` without needing a stub handler.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
# Old (deprecated) usage: FitsStubImagePlugin
# New usage: FITS images can be read without a handler through PIL.FitsImagePlugin
```

----------------------------------------

TITLE: Deprecation: Saving RGBA images as JPEG
DESCRIPTION: Pillow now issues a `DeprecationWarning` when attempting to save an `RGBA` mode image as a JPEG. JPEG images do not support an alpha channel, and prior to this release, Pillow silently dropped it. This will become an error in Pillow 4.2.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/3.4.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Saving RGBA as JPEG will issue DeprecationWarning.
```

----------------------------------------

TITLE: Decode XMP data from WebP images using `getxmp()`
DESCRIPTION: The `getxmp()` method now supports decoding XMP (Extensible Metadata Platform) data specifically for WEBP image formats. This allows users to extract embedded metadata from WebP files, enhancing interoperability and data access.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.4.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Image.getxmp() -> bytes | None
```

----------------------------------------

TITLE: Add support for DDS L and LA image formats
DESCRIPTION: Pillow now supports reading and writing uncompressed DDS (DirectDraw Surface) images in L (luminance) and LA (luminance with alpha) formats. This expands Pillow's compatibility with various texture types used in graphics applications.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.4.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
# Implicit support for L and LA modes when opening/saving DDS
Image.open("image.dds") # If L or LA
Image.save("output.dds", format="DDS") # If L or LA
```

----------------------------------------

TITLE: API Reference: PIL.ImageTransform.QuadTransform Class
DESCRIPTION: API documentation for the `QuadTransform` class within the `PIL.ImageTransform` module. This class implements `PIL.Image.ImageTransformHandler` for quadrilateral image transformation operations. Its members and undocumented members are automatically included by the `autoclass` directive.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageTransform.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
class PIL.ImageTransform.QuadTransform
```

----------------------------------------

TITLE: Pillow ImageShow Multi-Frame Display API
DESCRIPTION: When calling `PIL.Image.Image.show()` or using `PIL.ImageShow`, all frames of a multi-frame image will now be displayed by default.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.3.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.show()
  Description: Displays all frames of the image.
  Behavior Change: Previously, might only show the first frame. Now shows all.

PIL.ImageShow module
  Description: Utility module for displaying images.
  Behavior Change: When used, now ensures all frames of a multi-frame image are shown.
```

----------------------------------------

TITLE: Default Resampling Filter Reversion for Special Image Modes
DESCRIPTION: API documentation for the reversion of the default resampling filter for images with a custom number of bits. The default filter has been reverted to `Image.NEAREST` as `Image.BICUBIC` is not yet supported for these modes.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.3.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Image Resampling Filter Defaults
  Affected Modes: Images with a custom number of bits.
  Previous Default (Pillow 7.0+): Image.BICUBIC
  Current Default (for affected modes): Image.NEAREST
  Reason: Image.BICUBIC is not yet supported for these modes.
```

----------------------------------------

TITLE: Pillow TIFF BYTE Tags Format Change
DESCRIPTION: Previously, TIFF BYTE tags were read as a tuple containing a bytestring. In Pillow 7.2.0, they are now read directly as a single bytestring, simplifying their representation.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.2.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
TIFF BYTE tags:
  - Old format: tuple containing a bytestring
  - New format: single bytestring
```

----------------------------------------

TITLE: Improved JPEG 2000 Comment Reading in Pillow
DESCRIPTION: Pillow can now read comments from J2K (JPEG 2000) images into the `PIL.Image.Image.info` attribute, extending functionality previously limited to JP2 images. This provides more comprehensive metadata access for JPEG 2000 files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.1.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.info (attribute)
  Description: Now includes comments for J2K images, in addition to JP2 images.
```

----------------------------------------

TITLE: Add Corners Argument to ImageDraw.rounded_rectangle
DESCRIPTION: The `ImageDraw.rounded_rectangle` method now includes a `corners` keyword argument. This tuple of Booleans `(top_left, top_right, bottom_right, bottom_left)` allows selective rounding of individual corners.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.5.0.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
PIL.ImageDraw.ImageDraw.rounded_rectangle(xy, radius=0, fill=None, outline=None, width=1, corners=(True, True, True, True))
  Parameters:
    corners: tuple[bool, bool, bool, bool], optional
      A tuple `(top_left, top_right, bottom_right, bottom_left)` indicating which corners to round. Defaults to all True.
```

----------------------------------------

TITLE: PIL.ImageQt.ImageQt Class Constructor
DESCRIPTION: Documents the ImageQt class, which allows creating a QtGui.QImage object from a PIL.Image.Image object. This class is a subclass of QtGui.QImage, enabling direct use in PyQt6/PySide6 API functions. It supports specific image modes, with other modes requiring prior conversion.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageQt.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: ImageQt
  Constructor: __init__(image)
    Parameters:
      image: PIL.Image.Image object
    Description: Creates an ImageQt object from a PIL Image object.
    Notes:
      - This class is a subclass of QtGui.QImage.
      - Supported modes: 1, L, P, RGB, and RGBA.
      - Other modes require prior conversion.
```

----------------------------------------

TITLE: Deprecate 'file' Argument in Pillow ImageShow.Viewer.show_file
DESCRIPTION: The `file` argument in `PIL.ImageShow.Viewer.show_file()` is deprecated and will be removed in Pillow 10.0.0. Users should now use the `path` argument instead to avoid deprecation warnings.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
viewer.show_file("test.jpg") # Continues to work
viewer.show_file(file="test.jpg") # Raises deprecation warning
viewer.show_file(path="test.jpg") # Recommended usage
```

----------------------------------------

TITLE: PIL.ImageTk.BitmapImage Class API Reference
DESCRIPTION: API documentation for the PIL.ImageTk.BitmapImage class, which facilitates the conversion of PIL images into Tkinter BitmapImage objects. This class includes all its members as indicated by the source documentation.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageTk.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: PIL.ImageTk.BitmapImage
Description: Supports creating Tkinter BitmapImage objects from PIL images.
Members: (All members are included as per :members: directive)
```

----------------------------------------

TITLE: Pillow API Change: FreeTypeFont Zero/Negative Size Error
DESCRIPTION: Creating a `PIL.ImageFont.FreeTypeFont` instance directly or via `PIL.ImageFont.truetype` with a zero or negative font size will now raise a `ValueError`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.2.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
PIL.ImageFont.FreeTypeFont(size: int, ...)
  Raises ValueError if size <= 0.
PIL.ImageFont.truetype(size: int, ...)
  Raises ValueError if size <= 0.
```

----------------------------------------

TITLE: Enable Single Block Allocator for Pillow Arrow Export
DESCRIPTION: This code snippet demonstrates how to configure Pillow's internal memory allocator to use a single continuous block. This setting is crucial for enabling zero-copy export of images to the Apache Arrow format, as Arrow requires a single contiguous memory allocation. Note that this is a global setting.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/arrow_support.rst#_snippet_0

LANGUAGE: python
CODE:
```
from PIL import Image
Image.core.set_use_block_allocator(1)
```

----------------------------------------

TITLE: Deprecated ImageOps Functions in Pillow 4.3.0
DESCRIPTION: Several undocumented functions in `ImageOps` have been deprecated. Users should transition to the equivalent operations available in `ImageFilter` for these functionalities. These deprecated functions are scheduled for removal in future releases.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.3.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Deprecated functions in PIL.ImageOps:
- gaussian_blur (Use PIL.ImageFilter.GaussianBlur instead)
- gblur (Use PIL.ImageFilter.GaussianBlur instead)
- unsharp_mask (Use PIL.ImageFilter.UnsharpMask instead)
- usm (Use PIL.ImageFilter.UnsharpMask instead)
- box_blur (Use PIL.ImageFilter.BoxBlur instead)
```

----------------------------------------

TITLE: DDS Read Support in Pillow
DESCRIPTION: DDS is a popular container texture format used in video games. Pillow provides support for reading various DDS pixel formats.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Pillow DDS Read Support:
  Supported pixel formats (RGBA mode): DXT1, DXT5.
  Supported pixel formats (RGBA mode, added 3.4.0): DXT3.
  Supported pixel formats (RGB/RGBA mode, added 3.4.0): DX10.
```

----------------------------------------

TITLE: Pillow PIL.Image.Image.info Properties for Image Formats
DESCRIPTION: Details the `info` properties set by Pillow's `PIL.Image.open` method for specific image file formats like FLI/FLC, GBR, and GD.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_63

LANGUAGE: APIDOC
CODE:
```
PIL.Image.open(fp, mode='r', formats=None)
  PIL.Image.Image.info properties:
    For FLI, FLC:
      duration: int - The delay (in milliseconds) between each frame.

    For GBR:
      comment: str - The brush name.
      spacing: int - The spacing between the brushes, in pixels. Version 2 only.

    For GD:
      transparency: int - Transparency color index. This key is omitted if the image is not transparent.
```

----------------------------------------

TITLE: PIL.ImageDraw.fill Attribute
DESCRIPTION: Selects whether ImageDraw.ink should be used as a fill or outline color.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
ImageDraw.fill
  Type: bool
  Value: False
```

----------------------------------------

TITLE: Pillow API Addition: ImageGrab.grab window Parameter
DESCRIPTION: Documents the new `window` parameter for `PIL.ImageGrab.grab` on Windows, allowing selection of a specific window using its HWND.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.2.1.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
API Addition: PIL.ImageGrab.grab method
  Parameter: window
    Type: HWND (Windows Handle)
    Description: Specifies a particular window to capture.
  Platform: Windows only.
```

LANGUAGE: python
CODE:
```
from PIL import ImageGrab
ImageGrab.grab(window=hwnd)
```

----------------------------------------

TITLE: PIL.ImageCms Module API Overview
DESCRIPTION: Overview of classes, constants, and functions available in the `PIL.ImageCms` module for color profile management, including `ImageCmsProfile`, `ImageCmsTransform`, and various utility functions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageCms.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Module: PIL.ImageCms

Classes:
  - ImageCmsProfile (members: all, special-members: __init__)
  - ImageCmsTransform (members: all, undoc-members: all, show-inheritance: true)
  - PyCMSError (exception)

Constants (Classes):
  - Intent (members: all, member-order: bysource, undoc-members: all, show-inheritance: true)
  - Direction (members: all, member-order: bysource, undoc-members: all, show-inheritance: true)
  - Flags (members: all, member-order: bysource, undoc-members: all, show-inheritance: true)

Functions:
  - applyTransform()
  - buildProofTransform()
  - buildProofTransformFromOpenProfiles()
  - buildTransform()
  - buildTransformFromOpenProfiles()
  - createProfile()
  - getDefaultIntent()
  - getOpenProfile()
  - getProfileCopyright()
  - getProfileDescription()
  - getProfileInfo()
  - getProfileManufacturer()
  - getProfileModel()
  - getProfileName()
  - get_display_profile()
  - isIntentSupported()
  - profileToProfile()
  - versions()
```

----------------------------------------

TITLE: Deprecated ImageCms.CmsProfile Attributes
DESCRIPTION: Several attributes within `ImageCms.CmsProfile` have been deprecated since Pillow 3.2.0 and now issue a `DeprecationWarning` in 6.0.0. Users should update their code to use the specified replacement attributes.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
ImageCms.CmsProfile:
  Deprecated: color_space
  Use instead: Padded xcolor_space

  Deprecated: pcs
  Use instead: Padded connection_space

  Deprecated: product_copyright
  Use instead: Unicode copyright

  Deprecated: product_desc
  Use instead: Unicode profile_description

  Deprecated: product_description
  Use instead: Unicode profile_description

  Deprecated: product_manufacturer
  Use instead: Unicode manufacturer

  Deprecated: product_model
  Use instead: Unicode model
```

----------------------------------------

TITLE: Importing Pillow's Core Imaging Module
DESCRIPTION: The `PIL._imaging` module has been relocated to `PIL.Image.core` in Pillow. This snippet shows the updated import statement for accessing the core imaging functionalities.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/porting.rst#_snippet_1

LANGUAGE: Python
CODE:
```
from PIL.Image import core as _imaging
```

----------------------------------------

TITLE: Pillow JPEG Save Option: streamtype
DESCRIPTION: Allows storing images without quantization and Huffman tables, or with these tables but without image data. This is useful for container formats or network protocols that handle tables separately and share them between images. Options include 0 (default: interchange datastream), 1 (abbreviated table specification, added 10.2.0), and 2 (abbreviated image datastream).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_25

LANGUAGE: APIDOC
CODE:
```
streamtype: int
  Controls datastream type:
  - 0 (default): interchange datastream, with tables and image data
  - 1: abbreviated table specification (tables-only) (added 10.2.0)
  - 2: abbreviated image (image-only) datastream
```

----------------------------------------

TITLE: Image.entropy Method
DESCRIPTION: Calculates and returns the entropy for the image. A bilevel image (mode "1") is treated as a grayscale ("L") image. If a mask is provided, the method uses the histogram for non-zero parts of the mask. The mask must be the same size as the image and be mode "1" or "L".
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.1.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Image.entropy(mask=None) -> float

Calculates and returns the entropy for the image.

Parameters:
  mask: An optional mask image (mode "1" or "L") of the same size as the image.

Returns:
  The entropy value as a float.
```

----------------------------------------

TITLE: PIL.ImageShow Platform-Specific Viewer Classes
DESCRIPTION: Details the various viewer classes provided by PIL.ImageShow for different operating systems, including IPython, Windows, Mac, and Unix-based systems, along with their specific behaviors.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageShow.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Class: IPythonViewer
Class: WindowsViewer
Class: MacViewer
Class: UnixViewer
  Description: The following viewers may be registered on Unix-based systems, if the given command is found. To provide maximum functionality on Unix-based systems, temporary files created from images will not be automatically removed by Pillow.
  Nested Viewers:
    PIL.ImageShow.XDGViewer
    PIL.ImageShow.DisplayViewer
    PIL.ImageShow.GmDisplayViewer
    PIL.ImageShow.EogViewer
    PIL.ImageShow.XVViewer
```

----------------------------------------

TITLE: PIL.TiffTags.lookup Method
DESCRIPTION: Looks up TIFF tag information by integer tag number, optionally within a specific group, returning a TagInfo namedtuple or 'unknown' if not recognized.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/TiffTags.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Method: lookup(tag, group=None)
Parameters:
  tag (int): Integer tag number
  group (PIL.TiffTags.TAGS_V2_GROUPS, optional): Which PIL.TiffTags.TAGS_V2_GROUPS to look in
Returns:
  TagInfo namedtuple: From PIL.TiffTags.TAGS_V2 info if possible, otherwise just populating the value and name from PIL.TiffTags.TAGS. If the tag is not recognized, "unknown" is returned for the name.
Version Added: 8.3.0
```

----------------------------------------

TITLE: Check for libjpeg-turbo Support in Pillow
DESCRIPTION: Illustrates how to programmatically check if the Pillow library has been built against the libjpeg-turbo version of the libjpeg library. This feature check returns a boolean value indicating its presence.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.4.0.rst#_snippet_1

LANGUAGE: python
CODE:
```
from PIL import features
features.check_feature("libjpeg_turbo")  # True or False
```

----------------------------------------

TITLE: Get Advanced 2D Drawing Interface (ImageDraw.getdraw)
DESCRIPTION: Provides an experimental, more advanced 2D drawing interface for PIL images, based on the WCK interface. This method returns a tuple containing a drawing context and a drawing resource factory.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageDraw.rst#_snippet_31

LANGUAGE: APIDOC
CODE:
```
ImageDraw.getdraw(im=None, hints=None)

Warning: This method is experimental.

Description: A more advanced 2D drawing interface for PIL images, based on the WCK interface.

Parameters:
  im: The image to draw in.
  hints: An optional list of hints.

Returns: A (drawing context, drawing resource factory) tuple.
```

----------------------------------------

TITLE: Add `signed` option for saving JPEG2000 images
DESCRIPTION: When saving JPEG2000 images, a new `signed` keyword argument can be provided. If `True`, this option instructs the encoder to save the image as signed, which is relevant for certain image data types.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.4.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Image.save(filename: str, format: str = "JPEG2000", signed: bool = False, ...)
```

----------------------------------------

TITLE: Retrieve Version Information for Pillow Components
DESCRIPTION: These functions provide the version string for specific Pillow modules, codecs, or features, if that information is available. Version numbers can be compile-time or run-time dependent, with some components like 'jpg' codecs only providing compile-time versions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/features.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.features.version(name: str) -> str | None
  name: The name of a general feature, module, or codec.
  Returns: The version string (e.g., '2.10.0') if available, None otherwise.
```

LANGUAGE: APIDOC
CODE:
```
PIL.features.version_module(module_name: str) -> str | None
  module_name: The name of a specific module.
  Returns: The version string if available, None otherwise.
```

LANGUAGE: APIDOC
CODE:
```
PIL.features.version_codec(codec_name: str) -> str | None
  codec_name: The name of a specific image codec.
  Returns: The version string if available, None otherwise.
```

LANGUAGE: APIDOC
CODE:
```
PIL.features.version_feature(feature_name: str) -> str | None
  feature_name: The name of a specific Pillow feature.
  Returns: The version string if available, None otherwise.
```

----------------------------------------

TITLE: Consistent Multiline Text Spacing in ImageDraw
DESCRIPTION: Pillow 3.1.0 resolves inconsistencies in line spacing for `ImageDraw` multiline text methods. Lines are now offset by their baselines, ensuring uniform spacing regardless of ascenders and descenders. A default spacing of 4px is also introduced between lines.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/3.1.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ImageDraw multiline text methods:
  - Spacing between lines is now consistent, based on baselines.
  - Default spacing of 4px between lines.
```

----------------------------------------

TITLE: Pillow ImageDraw Curved Line Joints Addition
DESCRIPTION: The `ImageDraw.Draw.line` method now includes an optional `joint` parameter to render rounded joints between line segments, improving the appearance of wider lines.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.3.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
ImageDraw.Draw.line(xy, fill=None, width=0, joint=None)

Parameters:
  joint (str, optional): Specifies the joint style for multiple line segments.
                         - 'curved': Renders rounded joints.
                         - None (default): Renders sharp joints.
```

----------------------------------------

TITLE: PIL.ImageMath Logical Operators
DESCRIPTION: Explains how logical operators (`and`, `or`, `not`) function in `PIL.ImageMath` expressions, operating on entire images rather than individual pixels. An empty image is false, others are true. `and` and `or` return the last evaluated operand.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageMath.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Logical operators:
  Supported:
    - and, or, not
  Behavior:
    - Operate on entire images, not individual pixels.
  Truthiness:
    - An empty image (all pixels zero) is treated as false.
    - All other images are treated as true.
  Return value:
    - 'and' and 'or' return the last evaluated operand.
```

----------------------------------------

TITLE: PIL.ImagePath.Path Class API Reference
DESCRIPTION: Detailed API documentation for the PIL.ImagePath.Path class, which represents 2D vector data. It supports sequence-like operations and various transformations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImagePath.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PIL.ImagePath.Path
  Description: A path object. The coordinate list can be any sequence object containing either 2-tuples [(x, y), …] or numeric values [x, y, …].
               You can also create a path object from another path object.
               In 1.1.6 and later, you can also pass in any object that implements Python’s buffer API. The buffer should provide read access, and contain C floats in machine byte order.
               The path object implements most parts of the Python sequence interface, and behaves like a list of (x, y) pairs. You can use len(), item access, and slicing as usual. However, this does not support slice assignment, or item and slice deletion.
  Parameters:
    xy: A sequence. The sequence can contain 2-tuples [(x, y), ...] or a flat list of numbers [x, y, ...].

  Methods:
    compact(distance=2)
      Description: Compares the path, by removing points that are close to each other. This method modifies the path in place, and returns the number of points left in the path.
      Parameters:
        distance: Measured as Manhattan distance and defaults to two pixels.
      Returns: Number of points left in the path.

    getbbox()
      Description: Gets the bounding box of the path.
      Returns: (x0, y0, x1, y1)

    map(function)
      Description: Maps the path through a function.
      Parameters:
        function: The function to apply to each point.

    tolist(flat=False)
      Description: Converts the path to a Python list [(x, y), …].
      Parameters:
        flat: By default, this function returns a list of 2-tuples [(x, y), ...]. If this argument is True, it returns a flat list [x, y, ...] instead.
      Returns: A list of coordinates. See `flat` parameter for format.

    transform(matrix)
      Description: Transforms the path in place, using an affine transform.
      Parameters:
        matrix: A 6-tuple (a, b, c, d, e, f).
      Transformation Formula:
        xOut = xIn * a + yIn * b + c
        yOut = xIn * d + yIn * e + f
```

----------------------------------------

TITLE: SupportsArrowArrayInterface Protocol
DESCRIPTION: A protocol indicating support for the Apache Arrow array interface, enabling efficient data exchange with Arrow-compatible systems.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_21

LANGUAGE: APIDOC
CODE:
```
SupportsArrowArrayInterface
  show-inheritance: true
```

----------------------------------------

TITLE: Saving BLP Images with Pillow
DESCRIPTION: Demonstrates how to save an image in the BLP format using Pillow. The `blp_version` parameter allows specifying whether to save as BLP1 or BLP2, with BLP2 being the default version.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_11

LANGUAGE: Python
CODE:
```
im.save("out.blp", blp_version="BLP1")
```

----------------------------------------

TITLE: BLP Save Options for PIL.Image.Image.save
DESCRIPTION: Pillow supports writing BLP (Blizzard Mipmap Format) images. This snippet details the keyword arguments available for the `save` method when writing BLP files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.save(filename, format="BLP", **options)
Options:
  blp_version: String, if present and set to "BLP1", images will be saved as BLP1. Otherwise, images will be saved as BLP2 (default).
```

----------------------------------------

TITLE: PIL.Image.ImageTransformHandler Class
DESCRIPTION: A class responsible for handling various image transformations.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_19

LANGUAGE: APIDOC
CODE:
```
PIL.Image.ImageTransformHandler
```

----------------------------------------

TITLE: MAX_IMAGE_PIXELS Constant
DESCRIPTION: Defines the maximum number of pixels allowed for an image, set to 89,478,485, which is approximately 0.25GB for a 24-bit image. This constant is used internally by methods like `PIL.Image.open` to prevent excessive memory consumption.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_24

LANGUAGE: APIDOC
CODE:
```
MAX_IMAGE_PIXELS
  value: 89,478,485 (approx. 0.25GB for 24-bit image)
  see_also: PIL.Image.open
```

----------------------------------------

TITLE: Pillow ImageSequence API Reference
DESCRIPTION: This section provides API documentation for the `PIL.ImageSequence` module, detailing the `Iterator` class for frame iteration and the `all_frames` function.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageSequence.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.ImageSequence.Iterator:
  Description: A wrapper class that allows iteration over the frames of an image sequence.
  Usage: Iterator(im)
    im: An Image object, typically an animated image.

PIL.ImageSequence.all_frames:
  Description: A function to retrieve all frames from an image sequence.
  Usage: all_frames(im)
    im: An Image object, typically an animated image.
  Returns: A list of Image objects, each representing a frame.
```

----------------------------------------

TITLE: Add PIL.ImageFilter.MultibandFilter Base Class
DESCRIPTION: A new base class, `MultibandFilter`, has been introduced for image filters that can process all channels of an image in a single operation. This is distinct from the `Filter` class, which is for single-band images or those requiring channel splitting.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.3.0.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
class PIL.ImageFilter.MultibandFilter

Description:
  Base class for image filters designed to operate on all channels of a multiband image in one pass.
  Contrast with PIL.ImageFilter.Filter, which is for single-band images or requires channel splitting.
```

----------------------------------------

TITLE: PIL.Image.Image.load Method Parameters for EPS
DESCRIPTION: Documents parameters for the `PIL.Image.Image.load` method when loading EPS files, specifically `scale` and `transparency`, which affect Ghostscript rendering.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.load(scale, transparency)
  scale:
    Affects the scale of the resultant rasterized image. If the EPS suggests that the image be rendered at 100px x 100px, setting this parameter to 2 will make the Ghostscript render a 200px x 200px image instead. The relative position of the bounding box is maintained.
    Example:
      im = Image.open(...)
      im.size  # (100,100)
      im.load(scale=2)
      im.size  # (200,200)
  transparency:
    If true, generates an RGBA image with a transparent background, instead of the default behaviour of an RGB image with a white background.
```

----------------------------------------

TITLE: Removal of FitsStubImagePlugin
DESCRIPTION: The `FitsStubImagePlugin` has been removed from the library. FITS images can now be read directly without a dedicated handler through `PIL.FitsImagePlugin`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Removed Module: FitsStubImagePlugin
Replacement: Direct reading via PIL.FitsImagePlugin
```

----------------------------------------

TITLE: SupportsArrayInterface Protocol
DESCRIPTION: A protocol indicating support for the array interface, allowing interoperability with array-like objects.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_20

LANGUAGE: APIDOC
CODE:
```
SupportsArrayInterface
  show-inheritance: true
```

----------------------------------------

TITLE: PIL.TiffTags.TagInfo Class API Reference
DESCRIPTION: A class representing detailed information about a TIFF tag, including methods for initialization and enumeration conversion.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/TiffTags.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Class: TagInfo
Methods:
  __init__(self, value=None, name="unknown", type=None, length=0, enum=None)
    Parameters:
      value (int, optional): Integer Tag Number
      name (str, optional): Tag Name
      type (int, optional): Integer type from PIL.TiffTags.TYPES
      length (int, optional): Array length: 0 == variable, 1 == single value, n = fixed
      enum (dict, optional): Dict of name:integer value options for an enumeration
  cvt_enum(self, value)
    Parameters:
      value (str): The enumerated value name
    Returns:
      int: The integer corresponding to the name.
Version Added: 3.0.0
```

----------------------------------------

TITLE: Pillow Support for Device Independent Bitmap (BMP)
DESCRIPTION: Pillow now includes capabilities for reading and writing images in the Device Independent Bitmap (BMP) file format, expanding its compatibility with various image standards.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.0.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Pillow now supports reading and writing the Device Independent Bitmap file format.
```

----------------------------------------

TITLE: Add Image.TRANSVERSE Operation to PIL.Image.Image.transpose
DESCRIPTION: A new transpose operation, `Image.TRANSVERSE`, has been added to the `PIL.Image.Image.transpose` method. This operation performs a transpose about the opposite diagonal, expanding the available image manipulation options.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.3.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.transpose(method: Image.TransposeMethod) -> PIL.Image.Image

New Method:
  Image.TRANSVERSE: Transpose operation about the opposite diagonal.
```

----------------------------------------

TITLE: PIL.TiffTags.LIBTIFF_CORE List
DESCRIPTION: A list of supported tag IDs when writing using LibTIFF.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/TiffTags.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Data: PIL.TiffTags.LIBTIFF_CORE
Type: list
Description: A list of supported tag IDs when writing using LibTIFF.
```

----------------------------------------

TITLE: PIL.PsdImagePlugin Module API
DESCRIPTION: Documents the API for the `PIL.PsdImagePlugin` module, handling Adobe Photoshop Document (PSD) image files. This entry includes directives to show all members, undocumented members, and inheritance information.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/plugins.rst#_snippet_33

LANGUAGE: APIDOC
CODE:
```
.. automodule:: PIL.PsdImagePlugin
    :members:
    :undoc-members:
    :show-inheritance:
```

----------------------------------------

TITLE: Open APNG Images with Pillow's PNG Plugin
DESCRIPTION: Demonstrates how to open Animated Portable Network Graphics (APNG) images using Pillow's PNG plugin to retrieve basic information like image mode and size, and display a single frame. Full APNG support is not yet available.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.4.0.rst#_snippet_0

LANGUAGE: python
CODE:
```
im = Image.open("image.apng")
print(im.mode)  # "RGBA"
print(im.size)  # (245, 245)
im.show()  # Shows a single frame
```

----------------------------------------

TITLE: Add `exact` encoding option for WebP
DESCRIPTION: The WebP encoder now supports an `exact` encoding option. When set to `True`, this option prevents the encoder from removing hidden RGB values, which it typically does for better compression in libwebp 0.5+. This ensures preservation of all color data.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.4.0.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Image.save(filename: str, format: str = "WEBP", exact: bool = False, ...)
```

----------------------------------------

TITLE: Improved 16-bit TIFF Image Support in Pillow 4.3.0
DESCRIPTION: Pillow 4.3.0 significantly enhances its capabilities for reading 16-bit TIFF images. It now supports multichannel TIFF files, including those with alpha transparency, and 16-bit signed integer single-channel TIFF files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/4.3.0.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
16-bit TIFF Image Support:
- Can now read 16-bit multichannel TIFF files (including alpha transparency). Image data is truncated to 8-bit precision.
- Can now read 16-bit signed integer single-channel TIFF files. Image data is promoted to 32-bit for storage and processing.
```

----------------------------------------

TITLE: PIL.ImageFont Module Classes Reference
DESCRIPTION: Reference documentation for font-related classes within the PIL.ImageFont module, including ImageFont, FreeTypeFont, TransposedFont, Layout, and Axis.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageFont.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Classes:
  class PIL.ImageFont.ImageFont:
    Description: Base class for font objects.
    Members: All public members are available.

  class PIL.ImageFont.FreeTypeFont:
    Description: Represents a TrueType or OpenType font loaded via FreeType.
    Members: All public members are available.

  class PIL.ImageFont.TransposedFont:
    Description: A font wrapper that transposes text.
    Members: All members, including undocumented, are available.

  class PIL.ImageFont.Layout:
    Description: Defines text layout engines for TrueType fonts.
    Attributes:
      BASIC: Use basic text layout. Advanced features (e.g., text direction) not supported.
      RAQM: Use Raqm text layout. Supports advanced features. Requires Raqm library.

  class PIL.ImageFont.Axis:
    Description: (No specific description provided in source, but it's a dictionary-like class)
    Members: All members, including undocumented, are available.
    Inheritance: Shows inheritance.
```

----------------------------------------

TITLE: Pillow JPEG 2000 Save Option: progression
DESCRIPTION: Controls the progression order; must be one of "LRCP", "RLCP", "RPCL", "PCRL", "CPRL". The letters stand for Component, Position, Resolution and Layer respectively and control the order of encoding, the idea being that e.g. an image encoded using LRCP mode can have its quality layers decoded as they arrive at the decoder, while one encoded using RLCP mode will have increasing resolutions decoded as they arrive, and so on.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_37

LANGUAGE: APIDOC
CODE:
```
progression: str
  Controls progression order: "LRCP", "RLCP", "RPCL", "PCRL", "CPRL".
```

----------------------------------------

TITLE: Pillow JPEG 2000 Save Option: mct
DESCRIPTION: If 1 then enable multiple component transformation when encoding, otherwise use 0 for no component transformation (default). If MCT is enabled and 'irreversible' is True then the Irreversible Color Transformation will be applied, otherwise encoding will use the Reversible Color Transformation. MCT works best with a 'mode' of 'RGB' and is only applicable when the image data has 3 components. Added in version 9.1.0.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_36

LANGUAGE: APIDOC
CODE:
```
mct: int
  Enables multiple component transformation (0: no, 1: yes).
  Applies Irreversible Color Transformation if 'irreversible' is True, else Reversible. Best with RGB mode (3 components).
```

----------------------------------------

TITLE: WARN_POSSIBLE_FORMATS Constant
DESCRIPTION: A boolean constant that, when set to `true`, enables warnings to be raised from image formats that attempted to read data but failed to identify the image. By default, it is set to `false`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_25

LANGUAGE: APIDOC
CODE:
```
WARN_POSSIBLE_FORMATS
  value: false (default)
  description: If true, when an image cannot be identified, warnings will be raised from formats that attempted to read the data.
```

----------------------------------------

TITLE: PIL.ImageFile Module API Reference
DESCRIPTION: Detailed API documentation for classes and constants within the PIL.ImageFile module, outlining their members, inheritance, and specific directives.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageFile.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
PIL.ImageFile Module API Reference

Classes:
  PIL.ImageFile._Tile():
    Directives:
      - member-order: bysource
      - members: All
      - show-inheritance: True
  PIL.ImageFile.Parser():
    Directives:
      - members: All
  PIL.ImageFile.PyCodec():
    Directives:
      - members: All
  PIL.ImageFile.PyDecoder():
    Directives:
      - members: All
      - show-inheritance: True
  PIL.ImageFile.PyEncoder():
    Directives:
      - members: All
      - show-inheritance: True
  PIL.ImageFile.ImageFile():
    Directives:
      - member-order: bysource
      - members: All
      - undoc-members: True
      - show-inheritance: True
  PIL.ImageFile.StubHandler():
    Directives:
      - members: All
      - show-inheritance: True
  PIL.ImageFile.StubImageFile():
    Directives:
      - members: All
      - show-inheritance: True

Constants:
  PIL.ImageFile.LOAD_TRUNCATED_IMAGES
  PIL.ImageFile.ERRORS:
    Directives:
      - annotation: True
```

----------------------------------------

TITLE: Pillow Metadata Handling for Out-of-Spec TIFF Data
DESCRIPTION: In Pillow 3.0 and 3.1, images containing internally consistent but TIFF-spec non-compliant metadata may raise an exception during reading. This occurs, for example, when a tag specified for a single value is stored with an array. This behavior is subject to change in future releases.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/3.1.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Metadata Reading Behavior (Pillow 3.0 & 3.1):
  - Potential Exception: May raise an exception when reading TIFF metadata that is internally consistent but violates TIFF specification (e.g., single-value tag stored as array).
  - Future Behavior: Anticipated to change in future releases.
```

----------------------------------------

TITLE: Write comments to JPEG images
DESCRIPTION: Pillow now allows writing comments to JPEG images, either by setting the `comment` key in the `Image.Image.info` dictionary or by passing a `comment` argument directly to the `save()` method. This feature enables embedding descriptive text within JPEG files.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.4.0.rst#_snippet_5

LANGUAGE: Python
CODE:
```
im.save(out, comment="Test comment")
```

----------------------------------------

TITLE: Changed WebP Default 'method' Value for Saving
DESCRIPTION: API documentation for the change in default 'method' value when saving WebP images. The default has been updated from 0 (best speed) to 4 (higher quality, matching WebP's default).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.3.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
WebP Saving Parameters
  Parameter: "method"
  Previous Default: 0 (best speed)
  New Default: 4 (higher quality, matches WebP's default)
```

----------------------------------------

TITLE: Pillow API Addition: DdsImagePlugin Enums
DESCRIPTION: New enums `DDSD`, `DDSCAPS`, `DDSCAPS2`, `DDPF`, `DXGI_FORMAT`, and `D3DFMT` have been added to `PIL.DdsImagePlugin` for DDS image handling.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.2.0.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
PIL.DdsImagePlugin:
  DDSD: Enum
  DDSCAPS: Enum
  DDSCAPS2: Enum
  DDPF: Enum
  DXGI_FORMAT: Enum
  D3DFMT: Enum
```

----------------------------------------

TITLE: Saving Zero Quality JPEG Images with Pillow
DESCRIPTION: Pillow 7.1.0 now allows explicitly saving JPEG images with a quality setting of zero, which was previously used internally to signify default quality. This Python snippet demonstrates how to save an image with `quality=0` using the `Image.save()` method.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.1.0.rst#_snippet_0

LANGUAGE: python
CODE:
```
from PIL import Image
im = Image.open("hopper.jpg")
im.save("out.jpg", quality=0)
```

----------------------------------------

TITLE: Update `ImageCms.CmsProfile` attributes in Pillow 8.0.0
DESCRIPTION: Several attributes within `PIL.ImageCms.core.CmsProfile` have been renamed or replaced in Pillow 8.0.0. The table below lists the removed attributes and their corresponding replacements.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/8.0.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PIL.ImageCms.core.CmsProfile attribute changes:
Removed                   Use instead
color_space               Padded .CmsProfile.xcolor_space
pcs                       Padded .CmsProfile.connection_space
product_copyright         Unicode .CmsProfile.copyright
product_desc              Unicode .CmsProfile.profile_description
product_description       Unicode .CmsProfile.profile_description
product_manufacturer      Unicode .CmsProfile.manufacturer
product_model             Unicode .CmsProfile.model
```

----------------------------------------

TITLE: Pillow API Addition: DDS Saving with pixel_format
DESCRIPTION: Documents the new `pixel_format` argument for saving compressed DDS images, supporting DXT1, DXT3, DXT5, BC2, BC3, and BC5.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/11.2.1.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
API Addition: Image.save method for DDS format
  Parameter: pixel_format
    Type: str
    Description: Specifies the compression format for DDS images.
    Supported Values: "DXT1", "DXT3", "DXT5", "BC2", "BC3", "BC5"
```

LANGUAGE: python
CODE:
```
im.save("out.dds", pixel_format="DXT1")
```

----------------------------------------

TITLE: Pillow ImageFont.MAX_STRING_LENGTH API Reference
DESCRIPTION: Documentation for the `PIL.ImageFont.MAX_STRING_LENGTH` constant, which limits the number of characters in ImageFont methods to prevent DOS attacks. This threshold can be changed or disabled.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.0.0.rst#_snippet_13

LANGUAGE: APIDOC
CODE:
```
PIL.ImageFont.MAX_STRING_LENGTH: int | None
  Description: Maximum number of characters allowed in ImageFont methods.
  Default: (A predefined limit)
  Usage:
    - Set to change limit: PIL.ImageFont.MAX_STRING_LENGTH = <new_limit>
    - Set to disable: PIL.ImageFont.MAX_STRING_LENGTH = None
  Raises: ValueError if character count exceeds limit.
```

----------------------------------------

TITLE: Pillow JPEG 2000 Save Option: tile_size
DESCRIPTION: The tile size as a 2-tuple. If not specified, or if set to None, the image will be saved without tiling.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_29

LANGUAGE: APIDOC
CODE:
```
tile_size: tuple[int, int] | None
  The tile size. If None, the image is saved without tiling.
```

----------------------------------------

TITLE: SupportsGetData Protocol
DESCRIPTION: A protocol for objects that provide a `getdata` method, typically used for retrieving image pixel data.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/Image.rst#_snippet_22

LANGUAGE: APIDOC
CODE:
```
SupportsGetData
  show-inheritance: true
```

----------------------------------------

TITLE: Pillow TiffImagePlugin Debugging to Logging API Change
DESCRIPTION: The `TiffImagePlugin.DEBUG` flag has been removed in Pillow 7.2.0. Developers should now use Python's standard `logging` module for debugging information related to TIFF images, aligning with other parts of the Pillow codebase.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/7.2.0.rst#_snippet_0

LANGUAGE: APIDOC
CODE:
```
TiffImagePlugin.DEBUG = True (removed)
Replaced by Python's logging module.
```

----------------------------------------

TITLE: Pillow API: Image.getexif Method Change
DESCRIPTION: API documentation for the Image.getexif() method, which now returns a shared instance of Image.Exif to support lazy loading of Exif data.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/6.2.0.rst#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Image.getexif()
  Returns: A shared instance of Image.Exif
  Purpose: To allow for lazy loading of Exif data.
```

----------------------------------------

TITLE: DisplayViewer Supports 'title' Argument
DESCRIPTION: The `PIL.ImageShow.UnixViewer.DisplayViewer` now supports the `title` argument, allowing users to specify a window title when displaying images using the `display` command line tool.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_12

LANGUAGE: APIDOC
CODE:
```
PIL.ImageShow.UnixViewer.DisplayViewer.show_image(image, **options)

# New 'title' option supported.
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageShow

im = Image.new('RGB', (100, 100))

# Display image with a custom title
im.show(title="My Custom Image Title")

# Or using ImageShow directly
ImageShow.show(im, title="Another Image Title")
```

----------------------------------------

TITLE: Pillow TIFF and WebP Image Handling Improvements
DESCRIPTION: Pillow 5.3.0 enhances image handling by adding support for reading tiled TIFF images via LibTIFF and ensuring compressed TIFF images are read through LibTIFF. Additionally, RGB WebP images are now correctly read in RGB mode instead of RGBX.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/5.3.0.rst#_snippet_5

LANGUAGE: APIDOC
CODE:
```
TIFF Image Handling:
  - Added support for reading tiled TIFF images through LibTIFF.
  - Compressed TIFF images are now read through LibTIFF.

WebP Image Handling:
  - RGB WebP images are now read as RGB mode (previously RGBX).
```

----------------------------------------

TITLE: Image._showxv Method Removed
DESCRIPTION: The internal `Image._showxv` method has been removed. Users should use `PIL.Image.Image.show` for displaying images. For custom display behavior, register a custom `PIL.ImageShow.Viewer` class.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.0.0.rst#_snippet_8

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.show(title=None, **options)

# Image._showxv removed.
# For custom behavior, use PIL.ImageShow.register() with a custom Viewer.
```

LANGUAGE: Python
CODE:
```
from PIL import Image, ImageShow

# To replace Image._showxv for custom behavior:
class MyCustomViewer(ImageShow.Viewer):
    # ... implement show_image ...
    pass

ImageShow.register(MyCustomViewer)

im = Image.new('RGB', (100, 100))
im.show()
```

----------------------------------------

TITLE: Pillow ICNS Image.load() Parameters
DESCRIPTION: API documentation for the `PIL.Image.Image.load` method when processing ICNS files, focusing on the `scale` parameter. This parameter affects the final size of the loaded image, allowing for scaling up (e.g., for retina displays).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_16

LANGUAGE: APIDOC
CODE:
```
PIL.Image.Image.load() parameters for ICNS:
  scale: Affects the scale of the resultant image. If the size is set to (512, 512), after loading at scale 2, the final value of Image.Image.size will be (1024, 1024).
```

----------------------------------------

TITLE: Configure Ghostscript Binary for EPS Loading
DESCRIPTION: Shows how to customize the Ghostscript executable path or disable its use for EPS image loading in Pillow. This allows fine-tuning how EPS files are processed.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/image-file-formats.rst#_snippet_6

LANGUAGE: Python
CODE:
```
EpsImagePlugin.gs_binary = "gswin64"
EpsImagePlugin.gs_binary = False
```

----------------------------------------

TITLE: Install Pillow Core Prerequisites on macOS with Homebrew
DESCRIPTION: Installs essential external libraries for Pillow on macOS using Homebrew. This includes `libavif`, `libjpeg`, `libraqm`, `libtiff`, `little-cms2`, `openjpeg`, and `webp`.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst#_snippet_9

LANGUAGE: Shell
CODE:
```
brew install libavif libjpeg libraqm libtiff little-cms2 openjpeg webp
```

----------------------------------------

TITLE: Pillow Dependency Installation with Extras
DESCRIPTION: Pillow now uses `extras_require` for installing documentation and test dependencies, replacing `requirements.txt`. This allows users to install only necessary dependencies alongside Pillow, improving installation efficiency.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/9.1.0.rst#_snippet_6

LANGUAGE: bash
CODE:
```
# Install with dependencies for tests:
python3 -m pip install .[tests]
```

LANGUAGE: bash
CODE:
```
# Or for building docs:
python3 -m pip install .[docs]
```

LANGUAGE: bash
CODE:
```
# Or for all:
python3 -m pip install .[docs,tests]
```

LANGUAGE: bash
CODE:
```
# On macOS, the last argument may need to be wrapped in quotes:
python3 -m pip install ".[tests]"
```

----------------------------------------

TITLE: Display an image using PIL's show method
DESCRIPTION: Shows how to display an image loaded into a PIL `Image` object using the `im.show()` method. Note that this method saves the image to a temporary file and calls an external utility, which might not be efficient or universally supported.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/tutorial.rst#_snippet_1

LANGUAGE: Python
CODE:
```
im.show()
```

----------------------------------------

TITLE: PIL.ImageShow Core Functions
DESCRIPTION: Documents the primary functions available in the PIL.ImageShow module for image display and viewer registration.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/reference/ImageShow.rst#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Function: PIL.ImageShow.show()
Function: PIL.ImageShow.register()
```

----------------------------------------

TITLE: Common Raw Modes for PIL Decoders
DESCRIPTION: A table listing commonly used `raw_mode` values and their descriptions, which determine how data is unpacked to match PIL’s internal pixel layout.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/handbook/writing-your-own-image-plugin.rst#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Common Raw Modes:
- mode: "1"
  description: "1-bit bilevel, stored with the leftmost pixel in the most significant bit. 0 means black, 1 means white."
- mode: "1;I"
  description: "1-bit inverted bilevel, stored with the leftmost pixel in the most significant bit. 0 means white, 1 means black."
- mode: "1;R"
  description: "1-bit reversed bilevel, stored with the leftmost pixel in the least significant bit. 0 means black, 1 means white."
- mode: "L"
  description: "8-bit grayscale. 0 means black, 255 means white."
- mode: "L;I"
  description: "8-bit inverted grayscale. 0 means white, 255 means black."
- mode: "P"
  description: "8-bit palette-mapped image."
- mode: "RGB"
  description: "24-bit true colour, stored as (red, green, blue)."
- mode: "BGR"
  description: "24-bit true colour, stored as (blue, green, red)."
- mode: "RGBX"
  description: "24-bit true colour, stored as (red, green, blue, pad). The pad pixels may vary."
- mode: "RGB;L"
  description: "24-bit true colour, line interleaved (first all red pixels, then all green pixels, finally all blue pixels)."
```

----------------------------------------

TITLE: PIL.ImageDraw2 Module API Reference
DESCRIPTION: API documentation for the `PIL.ImageDraw2` module, including all its members, undocumented members, and inheritance hierarchy, with members ordered by source.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/PIL.rst#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Module: PIL.ImageDraw2
  Members: All
  Member Order: By Source
  Undocumented Members: Included
  Inheritance: Shown
```

----------------------------------------

TITLE: Install Python Development Libraries on Alpine Linux
DESCRIPTION: This command installs Python 3 development headers and setuptools on Alpine Linux. These packages are required to build Python applications and libraries, such as Pillow, from source on Alpine.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst#_snippet_3

LANGUAGE: Shell
CODE:
```
sudo apk add python3-dev py3-setuptools
```

----------------------------------------

TITLE: Install Pillow External Library Prerequisites on Red Hat/CentOS/Fedora
DESCRIPTION: This command installs development libraries required by Pillow on recent Red Hat, CentOS, or Fedora systems. These prerequisites enable support for various image formats (TIFF, JPEG, OpenJPEG, WebP), compression (zlib), text rendering (FreeType), and color management (lcms2).
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/installation/building-from-source.rst#_snippet_7

LANGUAGE: Shell
CODE:
```
sudo dnf install libtiff-devel libjpeg-devel openjpeg2-devel zlib-devel \
            freetype-devel lcms2-devel libwebp-devel tcl-devel tk-devel \
```

----------------------------------------

TITLE: Deprecation of ImageMath.eval()
DESCRIPTION: The `ImageMath.eval()` function is deprecated since Pillow 10.3.0. Users should migrate to `PIL.ImageMath.lambda_eval` or `PIL.ImageMath.unsafe_eval` for evaluating image expressions.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/deprecations.rst#_snippet_3

LANGUAGE: APIDOC
CODE:
```
ImageMath.eval()
```

----------------------------------------

TITLE: ValueError for Negative Values in P1-P3 PPM Images in Pillow
DESCRIPTION: Indicates that `ValueError` will now be raised if a P1-P3 PPM image contains any negative pixel values during processing.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/releasenotes/10.3.0.rst#_snippet_4

LANGUAGE: APIDOC
CODE:
```
P1-P3 PPM Image Processing:
  Condition: Image contains a negative value
  Behavior: Raises ValueError.
```

----------------------------------------

TITLE: PIL.PngImagePlugin.PngInfo Class API Reference
DESCRIPTION: API documentation for the `PIL.PngImagePlugin.PngInfo` class, which manages PNG metadata. It includes all its members, undocumented members, and inheritance hierarchy.
SOURCE: https://github.com/python-pillow/pillow/blob/main/docs/PIL.rst#_snippet_12

LANGUAGE: APIDOC
CODE:
```
Class: PIL.PngImagePlugin.PngInfo
  Members: All
  Undocumented Members: Included
  Inheritance: Shown
```